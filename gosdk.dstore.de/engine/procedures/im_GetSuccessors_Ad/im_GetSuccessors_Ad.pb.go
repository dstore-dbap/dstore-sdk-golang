// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/im_GetSuccessors_Ad.proto
// DO NOT EDIT!

/*
Package im_GetSuccessors_Ad is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/im_GetSuccessors_Ad.proto

It has these top-level messages:
	Parameters
	Response
*/
package im_GetSuccessors_Ad

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "gosdk.dstore.de/values"
import dstore_engine_error "gosdk.dstore.de/engine/error"
import dstore_engine_message "gosdk.dstore.de/engine/message"
import dstore_engine_metainformation "gosdk.dstore.de/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	TreeNodeList                      *dstore_values.StringValue  `protobuf:"bytes,1,opt,name=tree_node_list,json=treeNodeList" json:"tree_node_list,omitempty"`
	TreeNodeListNull                  bool                        `protobuf:"varint,1001,opt,name=tree_node_list_null,json=treeNodeListNull" json:"tree_node_list_null,omitempty"`
	LevelNo                           *dstore_values.IntegerValue `protobuf:"bytes,2,opt,name=level_no,json=levelNo" json:"level_no,omitempty"`
	LevelNoNull                       bool                        `protobuf:"varint,1002,opt,name=level_no_null,json=levelNoNull" json:"level_no_null,omitempty"`
	IncludeDeactivatedNodes           *dstore_values.BooleanValue `protobuf:"bytes,3,opt,name=include_deactivated_nodes,json=includeDeactivatedNodes" json:"include_deactivated_nodes,omitempty"`
	IncludeDeactivatedNodesNull       bool                        `protobuf:"varint,1003,opt,name=include_deactivated_nodes_null,json=includeDeactivatedNodesNull" json:"include_deactivated_nodes_null,omitempty"`
	OutputIntoOneId                   *dstore_values.BooleanValue `protobuf:"bytes,4,opt,name=output_into_one_id,json=outputIntoOneId" json:"output_into_one_id,omitempty"`
	OutputIntoOneIdNull               bool                        `protobuf:"varint,1004,opt,name=output_into_one_id_null,json=outputIntoOneIdNull" json:"output_into_one_id_null,omitempty"`
	FilterByCharacteristicId          *dstore_values.IntegerValue `protobuf:"bytes,5,opt,name=filter_by_characteristic_id,json=filterByCharacteristicId" json:"filter_by_characteristic_id,omitempty"`
	FilterByCharacteristicIdNull      bool                        `protobuf:"varint,1005,opt,name=filter_by_characteristic_id_null,json=filterByCharacteristicIdNull" json:"filter_by_characteristic_id_null,omitempty"`
	FilterByCharacValue               *dstore_values.StringValue  `protobuf:"bytes,6,opt,name=filter_by_charac_value,json=filterByCharacValue" json:"filter_by_charac_value,omitempty"`
	FilterByCharacValueNull           bool                        `protobuf:"varint,1006,opt,name=filter_by_charac_value_null,json=filterByCharacValueNull" json:"filter_by_charac_value_null,omitempty"`
	BinaryCharacteristicValueId       *dstore_values.IntegerValue `protobuf:"bytes,7,opt,name=binary_characteristic_value_id,json=binaryCharacteristicValueId" json:"binary_characteristic_value_id,omitempty"`
	BinaryCharacteristicValueIdNull   bool                        `protobuf:"varint,1007,opt,name=binary_characteristic_value_id_null,json=binaryCharacteristicValueIdNull" json:"binary_characteristic_value_id_null,omitempty"`
	NegateFilterByParams              *dstore_values.BooleanValue `protobuf:"bytes,8,opt,name=negate_filter_by_params,json=negateFilterByParams" json:"negate_filter_by_params,omitempty"`
	NegateFilterByParamsNull          bool                        `protobuf:"varint,1008,opt,name=negate_filter_by_params_null,json=negateFilterByParamsNull" json:"negate_filter_by_params_null,omitempty"`
	SortByCharacteristicIdList        *dstore_values.StringValue  `protobuf:"bytes,9,opt,name=sort_by_characteristic_id_list,json=sortByCharacteristicIdList" json:"sort_by_characteristic_id_list,omitempty"`
	SortByCharacteristicIdListNull    bool                        `protobuf:"varint,1009,opt,name=sort_by_characteristic_id_list_null,json=sortByCharacteristicIdListNull" json:"sort_by_characteristic_id_list_null,omitempty"`
	SortOptionList                    *dstore_values.StringValue  `protobuf:"bytes,10,opt,name=sort_option_list,json=sortOptionList" json:"sort_option_list,omitempty"`
	SortOptionListNull                bool                        `protobuf:"varint,1010,opt,name=sort_option_list_null,json=sortOptionListNull" json:"sort_option_list_null,omitempty"`
	InheritDepthOptionList            *dstore_values.StringValue  `protobuf:"bytes,11,opt,name=inherit_depth_option_list,json=inheritDepthOptionList" json:"inherit_depth_option_list,omitempty"`
	InheritDepthOptionListNull        bool                        `protobuf:"varint,1011,opt,name=inherit_depth_option_list_null,json=inheritDepthOptionListNull" json:"inherit_depth_option_list_null,omitempty"`
	RecursiveEvaluationOptionList     *dstore_values.StringValue  `protobuf:"bytes,12,opt,name=recursive_evaluation_option_list,json=recursiveEvaluationOptionList" json:"recursive_evaluation_option_list,omitempty"`
	RecursiveEvaluationOptionListNull bool                        `protobuf:"varint,1012,opt,name=recursive_evaluation_option_list_null,json=recursiveEvaluationOptionListNull" json:"recursive_evaluation_option_list_null,omitempty"`
	GetValuesForSortByCharacs         *dstore_values.BooleanValue `protobuf:"bytes,13,opt,name=get_values_for_sort_by_characs,json=getValuesForSortByCharacs" json:"get_values_for_sort_by_characs,omitempty"`
	GetValuesForSortByCharacsNull     bool                        `protobuf:"varint,1013,opt,name=get_values_for_sort_by_characs_null,json=getValuesForSortByCharacsNull" json:"get_values_for_sort_by_characs_null,omitempty"`
	FromRowNumber                     *dstore_values.IntegerValue `protobuf:"bytes,14,opt,name=from_row_number,json=fromRowNumber" json:"from_row_number,omitempty"`
	FromRowNumberNull                 bool                        `protobuf:"varint,1014,opt,name=from_row_number_null,json=fromRowNumberNull" json:"from_row_number_null,omitempty"`
	MaxNumberOfNodes                  *dstore_values.IntegerValue `protobuf:"bytes,15,opt,name=max_number_of_nodes,json=maxNumberOfNodes" json:"max_number_of_nodes,omitempty"`
	MaxNumberOfNodesNull              bool                        `protobuf:"varint,1015,opt,name=max_number_of_nodes_null,json=maxNumberOfNodesNull" json:"max_number_of_nodes_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetTreeNodeList() *dstore_values.StringValue {
	if m != nil {
		return m.TreeNodeList
	}
	return nil
}

func (m *Parameters) GetLevelNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.LevelNo
	}
	return nil
}

func (m *Parameters) GetIncludeDeactivatedNodes() *dstore_values.BooleanValue {
	if m != nil {
		return m.IncludeDeactivatedNodes
	}
	return nil
}

func (m *Parameters) GetOutputIntoOneId() *dstore_values.BooleanValue {
	if m != nil {
		return m.OutputIntoOneId
	}
	return nil
}

func (m *Parameters) GetFilterByCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.FilterByCharacteristicId
	}
	return nil
}

func (m *Parameters) GetFilterByCharacValue() *dstore_values.StringValue {
	if m != nil {
		return m.FilterByCharacValue
	}
	return nil
}

func (m *Parameters) GetBinaryCharacteristicValueId() *dstore_values.IntegerValue {
	if m != nil {
		return m.BinaryCharacteristicValueId
	}
	return nil
}

func (m *Parameters) GetNegateFilterByParams() *dstore_values.BooleanValue {
	if m != nil {
		return m.NegateFilterByParams
	}
	return nil
}

func (m *Parameters) GetSortByCharacteristicIdList() *dstore_values.StringValue {
	if m != nil {
		return m.SortByCharacteristicIdList
	}
	return nil
}

func (m *Parameters) GetSortOptionList() *dstore_values.StringValue {
	if m != nil {
		return m.SortOptionList
	}
	return nil
}

func (m *Parameters) GetInheritDepthOptionList() *dstore_values.StringValue {
	if m != nil {
		return m.InheritDepthOptionList
	}
	return nil
}

func (m *Parameters) GetRecursiveEvaluationOptionList() *dstore_values.StringValue {
	if m != nil {
		return m.RecursiveEvaluationOptionList
	}
	return nil
}

func (m *Parameters) GetGetValuesForSortByCharacs() *dstore_values.BooleanValue {
	if m != nil {
		return m.GetValuesForSortByCharacs
	}
	return nil
}

func (m *Parameters) GetFromRowNumber() *dstore_values.IntegerValue {
	if m != nil {
		return m.FromRowNumber
	}
	return nil
}

func (m *Parameters) GetMaxNumberOfNodes() *dstore_values.IntegerValue {
	if m != nil {
		return m.MaxNumberOfNodes
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
	Count           *dstore_values.IntegerValue                      `protobuf:"bytes,101,opt,name=count" json:"count,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

func (m *Response) GetCount() *dstore_values.IntegerValue {
	if m != nil {
		return m.Count
	}
	return nil
}

type Response_Row struct {
	RowId           int32                       `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	Predecessor     *dstore_values.IntegerValue `protobuf:"bytes,10001,opt,name=predecessor" json:"predecessor,omitempty"`
	NodeDescription *dstore_values.StringValue  `protobuf:"bytes,10002,opt,name=node_description,json=nodeDescription" json:"node_description,omitempty"`
	Value2          *dstore_values.StringValue  `protobuf:"bytes,10003,opt,name=value2" json:"value2,omitempty"`
	Value3          *dstore_values.StringValue  `protobuf:"bytes,10004,opt,name=value3" json:"value3,omitempty"`
	Value1          *dstore_values.StringValue  `protobuf:"bytes,10005,opt,name=value1" json:"value1,omitempty"`
	BinaryCodeId    *dstore_values.IntegerValue `protobuf:"bytes,10006,opt,name=binary_code_id,json=binaryCodeId" json:"binary_code_id,omitempty"`
	TreeNodeId      *dstore_values.IntegerValue `protobuf:"bytes,10007,opt,name=tree_node_id,json=treeNodeId" json:"tree_node_id,omitempty"`
	NodeId          *dstore_values.IntegerValue `protobuf:"bytes,10008,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetPredecessor() *dstore_values.IntegerValue {
	if m != nil {
		return m.Predecessor
	}
	return nil
}

func (m *Response_Row) GetNodeDescription() *dstore_values.StringValue {
	if m != nil {
		return m.NodeDescription
	}
	return nil
}

func (m *Response_Row) GetValue2() *dstore_values.StringValue {
	if m != nil {
		return m.Value2
	}
	return nil
}

func (m *Response_Row) GetValue3() *dstore_values.StringValue {
	if m != nil {
		return m.Value3
	}
	return nil
}

func (m *Response_Row) GetValue1() *dstore_values.StringValue {
	if m != nil {
		return m.Value1
	}
	return nil
}

func (m *Response_Row) GetBinaryCodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.BinaryCodeId
	}
	return nil
}

func (m *Response_Row) GetTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.TreeNodeId
	}
	return nil
}

func (m *Response_Row) GetNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.im_GetSuccessors_Ad.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.im_GetSuccessors_Ad.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.im_GetSuccessors_Ad.Response.Row")
}

func init() { proto.RegisterFile("dstore/engine/procedures/im_GetSuccessors_Ad.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1090 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x8c, 0x97, 0x5b, 0x73, 0xdb, 0x44,
	0x14, 0xc7, 0xa7, 0x84, 0x38, 0xe1, 0xe4, 0x62, 0x77, 0x1d, 0x12, 0xc5, 0x6e, 0x4d, 0x5a, 0x0f,
	0x33, 0x3c, 0x39, 0x24, 0x99, 0x02, 0x2f, 0x5c, 0x9a, 0xb8, 0x29, 0x81, 0xc6, 0x01, 0x95, 0xcb,
	0xd0, 0x07, 0x84, 0x2c, 0xad, 0x1d, 0x0d, 0xb6, 0xd6, 0xb3, 0x2b, 0xa7, 0xf4, 0x5b, 0x70, 0x87,
	0x19, 0x3e, 0x11, 0x1f, 0x85, 0xfb, 0x1d, 0x1e, 0xe9, 0xd9, 0x3d, 0x72, 0x6c, 0xc9, 0x17, 0xf9,
	0xa5, 0x8d, 0xbc, 0xe7, 0xff, 0x3f, 0xbf, 0xdd, 0x3d, 0xda, 0x3d, 0x82, 0x7d, 0x5f, 0x45, 0x42,
	0xf2, 0x5d, 0x1e, 0xb6, 0x83, 0x90, 0xef, 0xf6, 0xa4, 0xf0, 0xb8, 0xdf, 0x97, 0x5c, 0xed, 0x06,
	0x5d, 0xe7, 0x2e, 0x8f, 0xee, 0xf7, 0x3d, 0x8f, 0x2b, 0x25, 0xa4, 0x72, 0x6e, 0xfb, 0x35, 0x1c,
	0x8e, 0x04, 0xbb, 0x41, 0x9a, 0x1a, 0x69, 0x6a, 0x13, 0x02, 0x4b, 0xc5, 0xd8, 0xf6, 0xc2, 0xed,
	0xf4, 0xb9, 0x22, 0x5d, 0x69, 0x3b, 0x99, 0x8b, 0x4b, 0x29, 0x64, 0x3c, 0x54, 0x4e, 0x0e, 0x75,
	0xd1, 0xc9, 0x6d, 0xf3, 0x78, 0xb0, 0x9a, 0x1e, 0x8c, 0xdc, 0x20, 0x6c, 0x09, 0xd9, 0x75, 0xa3,
	0x40, 0x84, 0x14, 0x74, 0xf3, 0xbb, 0xab, 0x00, 0x6f, 0xb9, 0xd2, 0xc5, 0x51, 0x2e, 0x15, 0x7b,
	0x0d, 0xd6, 0x23, 0xc9, 0xb9, 0x13, 0x0a, 0x9f, 0x3b, 0x9d, 0x40, 0x45, 0xd6, 0x95, 0x9d, 0x2b,
	0xcf, 0xad, 0xec, 0x97, 0x6a, 0x31, 0x7c, 0x4c, 0xa6, 0x22, 0x19, 0x84, 0xed, 0xf7, 0xf4, 0x83,
	0xbd, 0xaa, 0x15, 0x0d, 0x14, 0xdc, 0xc3, 0x78, 0x56, 0x83, 0x62, 0xd2, 0xc1, 0x09, 0xfb, 0x9d,
	0x8e, 0xf5, 0xc3, 0x12, 0xfa, 0x2c, 0xdb, 0x85, 0xd1, 0xd8, 0x06, 0x0e, 0xb0, 0x17, 0x60, 0xb9,
	0xc3, 0x2f, 0x78, 0x07, 0x05, 0xd6, 0x13, 0x26, 0x57, 0x39, 0x95, 0x2b, 0x08, 0x23, 0xde, 0xe6,
	0x92, 0x92, 0x2d, 0x99, 0xe0, 0x86, 0x60, 0x55, 0x58, 0x1b, 0xe8, 0x28, 0xc3, 0x8f, 0x94, 0x61,
	0x25, 0x0e, 0x30, 0xe6, 0xef, 0xc3, 0x76, 0x10, 0x7a, 0x9d, 0x3e, 0xa2, 0xf8, 0xdc, 0xf5, 0xa2,
	0xe0, 0xc2, 0x8d, 0xb8, 0x6f, 0xd8, 0x94, 0xb5, 0x30, 0x31, 0x5b, 0x53, 0x88, 0x0e, 0x77, 0x43,
	0xca, 0xb6, 0x15, 0xab, 0xeb, 0x43, 0xb1, 0x86, 0x57, 0xac, 0x0e, 0x95, 0xa9, 0xc6, 0x84, 0xf3,
	0x13, 0xe1, 0x94, 0xa7, 0x38, 0x18, 0xbc, 0xd7, 0x81, 0x89, 0x7e, 0xd4, 0xeb, 0x47, 0x0e, 0xce,
	0x51, 0x38, 0x22, 0xe4, 0x4e, 0xe0, 0x5b, 0x4f, 0x66, 0x73, 0xe5, 0x49, 0x76, 0x82, 0xaa, 0xb3,
	0x90, 0x9f, 0xf8, 0xec, 0x16, 0x6c, 0x8d, 0x3b, 0x11, 0xc8, 0xcf, 0x04, 0x52, 0x4c, 0x49, 0x0c,
	0xc0, 0x03, 0x28, 0xb7, 0x82, 0x0e, 0xee, 0xbc, 0xd3, 0x7c, 0xe4, 0x78, 0xe7, 0x58, 0x07, 0x1e,
	0x3e, 0xe0, 0xd6, 0x04, 0x9e, 0x26, 0x59, 0xcc, 0xde, 0x0f, 0x8b, 0xf4, 0x87, 0x8f, 0x8e, 0x12,
	0x6a, 0x44, 0xba, 0x0b, 0x3b, 0x33, 0xbc, 0x89, 0xed, 0x17, 0x62, 0xbb, 0x36, 0xcd, 0xc4, 0x40,
	0x9e, 0xc1, 0x66, 0xda, 0xc8, 0x31, 0x28, 0x56, 0x2e, 0xb3, 0x36, 0x8b, 0x49, 0x67, 0xf3, 0x23,
	0x7b, 0x79, 0x7c, 0xd6, 0x64, 0x48, 0x50, 0xbf, 0x12, 0xd4, 0xd6, 0x04, 0xa9, 0xe1, 0xf9, 0x08,
	0x2a, 0xcd, 0x20, 0x74, 0xe5, 0xd8, 0xac, 0xc8, 0x03, 0xd7, 0x6d, 0x29, 0x7b, 0xdd, 0xca, 0x64,
	0x91, 0x9c, 0xb0, 0x19, 0xc2, 0xa5, 0x3b, 0x85, 0xea, 0xec, 0x0c, 0x04, 0xfa, 0x1b, 0x81, 0x3e,
	0x33, 0xc3, 0xca, 0x00, 0xdb, 0xb0, 0x15, 0xf2, 0x36, 0x96, 0x9e, 0x33, 0x9c, 0x76, 0x4f, 0xbf,
	0xf3, 0xca, 0x5a, 0xce, 0xae, 0xb5, 0x0d, 0xd2, 0x1e, 0xc7, 0xab, 0x61, 0x0e, 0x0b, 0xc5, 0x5e,
	0x85, 0x6b, 0x53, 0x3c, 0x89, 0xed, 0x77, 0x62, 0xb3, 0x26, 0x89, 0x0d, 0xd4, 0x87, 0x50, 0xc1,
	0x53, 0x2f, 0x9a, 0x5c, 0x1c, 0xe6, 0xe4, 0x79, 0x2a, 0x73, 0x77, 0x4b, 0xda, 0x61, 0xbc, 0x6a,
	0xcc, 0x39, 0x74, 0x0f, 0xaa, 0xb3, 0xfd, 0x89, 0xf3, 0x0f, 0xe2, 0xac, 0x4c, 0x77, 0x32, 0xb4,
	0x75, 0x28, 0x18, 0x37, 0xd1, 0xd3, 0x67, 0x27, 0xf1, 0x41, 0x26, 0xdf, 0xba, 0xd6, 0x9c, 0x19,
	0x89, 0x61, 0xda, 0x87, 0xa7, 0xd3, 0x2e, 0x44, 0xf1, 0x27, 0x51, 0xb0, 0x64, 0xbc, 0xc9, 0xfc,
	0xae, 0x3e, 0xc2, 0xce, 0x91, 0x28, 0xc2, 0x93, 0xa6, 0x17, 0x9d, 0x27, 0x10, 0x56, 0x32, 0x11,
	0x36, 0x63, 0x71, 0x5d, 0x6b, 0x47, 0x50, 0x8e, 0xf4, 0x01, 0x36, 0xc5, 0x96, 0x98, 0xfe, 0x22,
	0xa6, 0xd2, 0x64, 0x03, 0xc3, 0xe6, 0xc1, 0x8e, 0xe4, 0x5e, 0x5f, 0xaa, 0xe0, 0x82, 0x3b, 0x5c,
	0x67, 0x37, 0x57, 0x4b, 0x02, 0x71, 0x35, 0x13, 0xf1, 0xfa, 0xa5, 0xc7, 0x9d, 0x4b, 0x8b, 0x11,
	0xd2, 0xb7, 0xe1, 0xd9, 0xac, 0x24, 0x04, 0xfc, 0x37, 0x01, 0xdf, 0x98, 0x69, 0x37, 0xa8, 0xbd,
	0x36, 0x8f, 0xe8, 0x6d, 0x52, 0x0e, 0x5e, 0x89, 0x4e, 0xb2, 0x54, 0x94, 0xb5, 0x96, 0xfd, 0x5e,
	0x6c, 0xa3, 0x85, 0xf9, 0x4b, 0x1d, 0x0b, 0x79, 0x7f, 0xa4, 0x7c, 0x14, 0x7b, 0x13, 0xaa, 0xb3,
	0xfd, 0x09, 0xf8, 0x1f, 0x02, 0xbe, 0x3e, 0xd5, 0xc8, 0xc0, 0x1e, 0x41, 0xbe, 0x25, 0x45, 0xd7,
	0x91, 0xe2, 0x21, 0xca, 0xba, 0x4d, 0x2e, 0xad, 0xf5, 0xec, 0xf3, 0x65, 0x4d, 0x6b, 0x6c, 0xf1,
	0xb0, 0x61, 0x14, 0xec, 0x79, 0xd8, 0x48, 0x99, 0x10, 0xc2, 0xbf, 0x84, 0x70, 0x35, 0x11, 0x6d,
	0xd2, 0xbe, 0x01, 0xc5, 0xae, 0xfb, 0xc9, 0x20, 0x58, 0xb4, 0xe2, 0x4b, 0x33, 0x9f, 0x9d, 0xba,
	0x80, 0x3a, 0x32, 0x3a, 0x6b, 0xd1, 0x6d, 0xf9, 0x22, 0x58, 0x13, 0xbc, 0x88, 0xe0, 0x3f, 0x22,
	0xd8, 0x48, 0x8b, 0x34, 0xc4, 0xcd, 0xef, 0x73, 0xb0, 0x6c, 0x73, 0xd5, 0x13, 0xa1, 0xe2, 0x38,
	0x87, 0x45, 0xd3, 0xfb, 0xa4, 0x5b, 0x92, 0xb8, 0x9f, 0xa2, 0xbe, 0xe8, 0x8e, 0xfe, 0xd7, 0xa6,
	0x40, 0xf6, 0x01, 0x14, 0x74, 0xd7, 0xe3, 0x8c, 0xb4, 0x3d, 0xd8, 0x63, 0x2c, 0xa0, 0xb8, 0x96,
	0x12, 0xa7, 0x9b, 0xa3, 0x53, 0x7c, 0x3e, 0x19, 0x3e, 0xdb, 0xf9, 0x6e, 0xf2, 0x07, 0xf6, 0x12,
	0x2c, 0xc5, 0xdd, 0x16, 0xf6, 0x11, 0xda, 0xb1, 0x32, 0xe6, 0x48, 0xbd, 0xd8, 0x29, 0xfd, 0x6f,
	0x0f, 0xc2, 0xd9, 0x6d, 0x58, 0xc0, 0x5d, 0xc0, 0x5b, 0x5e, 0xab, 0x76, 0x6b, 0x99, 0x4d, 0x61,
	0x6d, 0xb0, 0x00, 0x35, 0xdc, 0x20, 0x5b, 0x6b, 0xd9, 0x1e, 0x2c, 0x7a, 0xa2, 0x1f, 0x46, 0x16,
	0xcf, 0xde, 0x0d, 0x8a, 0x2c, 0xfd, 0xbf, 0x00, 0x0b, 0xa8, 0x67, 0x9b, 0x90, 0xd3, 0x35, 0x80,
	0x97, 0xd4, 0xa7, 0x0d, 0x14, 0x2f, 0xda, 0x8b, 0xf8, 0x88, 0x57, 0xce, 0x2b, 0xb0, 0xd2, 0x93,
	0xdc, 0xe7, 0x94, 0xd7, 0xfa, 0xac, 0x91, 0xed, 0x3c, 0x2a, 0x60, 0xc7, 0x50, 0x30, 0x1d, 0x1f,
	0xee, 0x9c, 0x27, 0x03, 0xf3, 0xba, 0x59, 0x9f, 0x37, 0x32, 0xdf, 0xfd, 0xbc, 0x16, 0xd5, 0x87,
	0x1a, 0x76, 0x00, 0x39, 0x13, 0xb6, 0x6f, 0x7d, 0x91, 0xad, 0x8e, 0x43, 0x2f, 0x45, 0x07, 0xd6,
	0x97, 0xf3, 0x8a, 0x0e, 0x2e, 0x45, 0x7b, 0xd6, 0x57, 0xf3, 0x8a, 0xf6, 0xd8, 0x21, 0xac, 0x0f,
	0x6e, 0x66, 0x3d, 0x5b, 0x5c, 0xc6, 0xaf, 0xe7, 0x58, 0xa9, 0xd5, 0xf8, 0x86, 0x46, 0x89, 0x59,
	0xea, 0xd5, 0x61, 0x87, 0x8c, 0x0e, 0xdf, 0xcc, 0xe1, 0x00, 0x83, 0xbe, 0xd9, 0xf4, 0x7a, 0x4b,
	0x03, 0xe9, 0xb7, 0x73, 0x48, 0x73, 0xa1, 0x91, 0x1d, 0xbe, 0x03, 0xe5, 0x40, 0xa4, 0xca, 0x6d,
	0xf8, 0xdd, 0xf2, 0xe0, 0x56, 0x5b, 0x28, 0xff, 0xe3, 0xc1, 0xb8, 0x3f, 0xe7, 0xa7, 0x4d, 0x33,
	0x67, 0x3e, 0x23, 0x0e, 0x1e, 0x07, 0x00, 0x00, 0xff, 0xff, 0x0f, 0xc9, 0x9f, 0xec, 0x11, 0x0d,
	0x00, 0x00,
}
