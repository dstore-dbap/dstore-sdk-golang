// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/om_ExportOrders_Ad.proto
// DO NOT EDIT!

/*
Package om_ExportOrders_Ad is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/om_ExportOrders_Ad.proto

It has these top-level messages:
	Parameters
	Response
*/
package om_ExportOrders_Ad

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "gosdk.dstore.de/values"
import dstore_engine_error "gosdk.dstore.de/engine/error"
import dstore_engine_message "gosdk.dstore.de/engine/message"
import dstore_engine_metainformation "gosdk.dstore.de/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	FromDate                        *dstore_values.TimestampValue `protobuf:"bytes,1,opt,name=from_date,json=fromDate" json:"from_date,omitempty"`
	FromDateNull                    bool                          `protobuf:"varint,1001,opt,name=from_date_null,json=fromDateNull" json:"from_date_null,omitempty"`
	ToDate                          *dstore_values.TimestampValue `protobuf:"bytes,2,opt,name=to_date,json=toDate" json:"to_date,omitempty"`
	ToDateNull                      bool                          `protobuf:"varint,1002,opt,name=to_date_null,json=toDateNull" json:"to_date_null,omitempty"`
	NodeCharacteristicId1           *dstore_values.IntegerValue   `protobuf:"bytes,3,opt,name=node_characteristic_id1,json=nodeCharacteristicId1" json:"node_characteristic_id1,omitempty"`
	NodeCharacteristicId1Null       bool                          `protobuf:"varint,1003,opt,name=node_characteristic_id1_null,json=nodeCharacteristicId1Null" json:"node_characteristic_id1_null,omitempty"`
	NodeCharacteristicId2           *dstore_values.IntegerValue   `protobuf:"bytes,4,opt,name=node_characteristic_id2,json=nodeCharacteristicId2" json:"node_characteristic_id2,omitempty"`
	NodeCharacteristicId2Null       bool                          `protobuf:"varint,1004,opt,name=node_characteristic_id2_null,json=nodeCharacteristicId2Null" json:"node_characteristic_id2_null,omitempty"`
	NodeCharacteristicId3           *dstore_values.IntegerValue   `protobuf:"bytes,5,opt,name=node_characteristic_id3,json=nodeCharacteristicId3" json:"node_characteristic_id3,omitempty"`
	NodeCharacteristicId3Null       bool                          `protobuf:"varint,1005,opt,name=node_characteristic_id3_null,json=nodeCharacteristicId3Null" json:"node_characteristic_id3_null,omitempty"`
	SkipOHavingDifferentOStates     *dstore_values.BooleanValue   `protobuf:"bytes,6,opt,name=skip_o_having_different_o_states,json=skipOHavingDifferentOStates" json:"skip_o_having_different_o_states,omitempty"`
	SkipOHavingDifferentOStatesNull bool                          `protobuf:"varint,1006,opt,name=skip_o_having_different_o_states_null,json=skipOHavingDifferentOStatesNull" json:"skip_o_having_different_o_states_null,omitempty"`
	GetAllPositionsOfOrder          *dstore_values.BooleanValue   `protobuf:"bytes,7,opt,name=get_all_positions_of_order,json=getAllPositionsOfOrder" json:"get_all_positions_of_order,omitempty"`
	GetAllPositionsOfOrderNull      bool                          `protobuf:"varint,1007,opt,name=get_all_positions_of_order_null,json=getAllPositionsOfOrderNull" json:"get_all_positions_of_order_null,omitempty"`
	MaxNumberOfOrders               *dstore_values.IntegerValue   `protobuf:"bytes,8,opt,name=max_number_of_orders,json=maxNumberOfOrders" json:"max_number_of_orders,omitempty"`
	MaxNumberOfOrdersNull           bool                          `protobuf:"varint,1008,opt,name=max_number_of_orders_null,json=maxNumberOfOrdersNull" json:"max_number_of_orders_null,omitempty"`
	IncludeOrdersWithOrderNo        *dstore_values.IntegerValue   `protobuf:"bytes,9,opt,name=include_orders_with_order_no,json=includeOrdersWithOrderNo" json:"include_orders_with_order_no,omitempty"`
	IncludeOrdersWithOrderNoNull    bool                          `protobuf:"varint,1009,opt,name=include_orders_with_order_no_null,json=includeOrdersWithOrderNoNull" json:"include_orders_with_order_no_null,omitempty"`
	GetActualItemInfo               *dstore_values.BooleanValue   `protobuf:"bytes,10,opt,name=get_actual_item_info,json=getActualItemInfo" json:"get_actual_item_info,omitempty"`
	GetActualItemInfoNull           bool                          `protobuf:"varint,1010,opt,name=get_actual_item_info_null,json=getActualItemInfoNull" json:"get_actual_item_info_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetFromDate() *dstore_values.TimestampValue {
	if m != nil {
		return m.FromDate
	}
	return nil
}

func (m *Parameters) GetToDate() *dstore_values.TimestampValue {
	if m != nil {
		return m.ToDate
	}
	return nil
}

func (m *Parameters) GetNodeCharacteristicId1() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeCharacteristicId1
	}
	return nil
}

func (m *Parameters) GetNodeCharacteristicId2() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeCharacteristicId2
	}
	return nil
}

func (m *Parameters) GetNodeCharacteristicId3() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeCharacteristicId3
	}
	return nil
}

func (m *Parameters) GetSkipOHavingDifferentOStates() *dstore_values.BooleanValue {
	if m != nil {
		return m.SkipOHavingDifferentOStates
	}
	return nil
}

func (m *Parameters) GetGetAllPositionsOfOrder() *dstore_values.BooleanValue {
	if m != nil {
		return m.GetAllPositionsOfOrder
	}
	return nil
}

func (m *Parameters) GetMaxNumberOfOrders() *dstore_values.IntegerValue {
	if m != nil {
		return m.MaxNumberOfOrders
	}
	return nil
}

func (m *Parameters) GetIncludeOrdersWithOrderNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.IncludeOrdersWithOrderNo
	}
	return nil
}

func (m *Parameters) GetGetActualItemInfo() *dstore_values.BooleanValue {
	if m != nil {
		return m.GetActualItemInfo
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId                    int32                         `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	DeliveryDateAndTime      *dstore_values.TimestampValue `protobuf:"bytes,10001,opt,name=delivery_date_and_time,json=deliveryDateAndTime" json:"delivery_date_and_time,omitempty"`
	DeliveryDateAndTimeChar  *dstore_values.StringValue    `protobuf:"bytes,10002,opt,name=delivery_date_and_time_char,json=deliveryDateAndTimeChar" json:"delivery_date_and_time_char,omitempty"`
	NetShippingCost          *dstore_values.DecimalValue   `protobuf:"bytes,10003,opt,name=net_shipping_cost,json=netShippingCost" json:"net_shipping_cost,omitempty"`
	NettoSum                 *dstore_values.DecimalValue   `protobuf:"bytes,10004,opt,name=netto_sum,json=nettoSum" json:"netto_sum,omitempty"`
	OrderId                  *dstore_values.IntegerValue   `protobuf:"bytes,10005,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	BruttoSum                *dstore_values.DecimalValue   `protobuf:"bytes,10006,opt,name=brutto_sum,json=bruttoSum" json:"brutto_sum,omitempty"`
	OrderContentId           *dstore_values.IntegerValue   `protobuf:"bytes,10007,opt,name=order_content_id,json=orderContentId" json:"order_content_id,omitempty"`
	PreciseNetShippingCost   *dstore_values.DecimalValue   `protobuf:"bytes,10008,opt,name=precise_net_shipping_cost,json=preciseNetShippingCost" json:"precise_net_shipping_cost,omitempty"`
	PreciseGrossPaymentCost  *dstore_values.DecimalValue   `protobuf:"bytes,10009,opt,name=precise_gross_payment_cost,json=preciseGrossPaymentCost" json:"precise_gross_payment_cost,omitempty"`
	PersonId                 *dstore_values.IntegerValue   `protobuf:"bytes,10010,opt,name=person_id,json=personId" json:"person_id,omitempty"`
	PreciseNetSum            *dstore_values.DecimalValue   `protobuf:"bytes,10011,opt,name=precise_net_sum,json=preciseNetSum" json:"precise_net_sum,omitempty"`
	NettoPositionSum         *dstore_values.DecimalValue   `protobuf:"bytes,10012,opt,name=netto_position_sum,json=nettoPositionSum" json:"netto_position_sum,omitempty"`
	Currency                 *dstore_values.StringValue    `protobuf:"bytes,10013,opt,name=currency" json:"currency,omitempty"`
	OrderStateId             *dstore_values.IntegerValue   `protobuf:"bytes,10014,opt,name=order_state_id,json=orderStateId" json:"order_state_id,omitempty"`
	ShippingTypeId           *dstore_values.IntegerValue   `protobuf:"bytes,10015,opt,name=shipping_type_id,json=shippingTypeId" json:"shipping_type_id,omitempty"`
	GrossPaymentCost         *dstore_values.DecimalValue   `protobuf:"bytes,10016,opt,name=gross_payment_cost,json=grossPaymentCost" json:"gross_payment_cost,omitempty"`
	ShippingType             *dstore_values.StringValue    `protobuf:"bytes,10017,opt,name=shipping_type,json=shippingType" json:"shipping_type,omitempty"`
	Position                 *dstore_values.IntegerValue   `protobuf:"bytes,10018,opt,name=position" json:"position,omitempty"`
	PreciseNetPaymentCost    *dstore_values.DecimalValue   `protobuf:"bytes,10019,opt,name=precise_net_payment_cost,json=preciseNetPaymentCost" json:"precise_net_payment_cost,omitempty"`
	GrossPositionSum         *dstore_values.DecimalValue   `protobuf:"bytes,10020,opt,name=gross_position_sum,json=grossPositionSum" json:"gross_position_sum,omitempty"`
	SurchargeValue           *dstore_values.DecimalValue   `protobuf:"bytes,10021,opt,name=surcharge_value,json=surchargeValue" json:"surcharge_value,omitempty"`
	BruttoShippingCost       *dstore_values.DecimalValue   `protobuf:"bytes,10022,opt,name=brutto_shipping_cost,json=bruttoShippingCost" json:"brutto_shipping_cost,omitempty"`
	PreciseGrossShippingCost *dstore_values.DecimalValue   `protobuf:"bytes,10023,opt,name=precise_gross_shipping_cost,json=preciseGrossShippingCost" json:"precise_gross_shipping_cost,omitempty"`
	PreciseGrossSum          *dstore_values.DecimalValue   `protobuf:"bytes,10024,opt,name=precise_gross_sum,json=preciseGrossSum" json:"precise_gross_sum,omitempty"`
	HTreeNodeId              *dstore_values.IntegerValue   `protobuf:"bytes,10025,opt,name=h_tree_node_id,json=hTreeNodeId" json:"h_tree_node_id,omitempty"`
	BruttoPaymentCost        *dstore_values.DecimalValue   `protobuf:"bytes,10026,opt,name=brutto_payment_cost,json=bruttoPaymentCost" json:"brutto_payment_cost,omitempty"`
	PaymentTypeId            *dstore_values.IntegerValue   `protobuf:"bytes,10027,opt,name=payment_type_id,json=paymentTypeId" json:"payment_type_id,omitempty"`
	SurchargeTypeId          *dstore_values.IntegerValue   `protobuf:"bytes,10028,opt,name=surcharge_type_id,json=surchargeTypeId" json:"surcharge_type_id,omitempty"`
	OrderDateAndTime         *dstore_values.TimestampValue `protobuf:"bytes,10029,opt,name=order_date_and_time,json=orderDateAndTime" json:"order_date_and_time,omitempty"`
	Value3                   *dstore_values.StringValue    `protobuf:"bytes,10030,opt,name=value3" json:"value3,omitempty"`
	Value1                   *dstore_values.StringValue    `protobuf:"bytes,10031,opt,name=value1" json:"value1,omitempty"`
	Value2                   *dstore_values.StringValue    `protobuf:"bytes,10032,opt,name=value2" json:"value2,omitempty"`
	OrderDateAndTimeChar     *dstore_values.StringValue    `protobuf:"bytes,10033,opt,name=order_date_and_time_char,json=orderDateAndTimeChar" json:"order_date_and_time_char,omitempty"`
	NetSum                   *dstore_values.DecimalValue   `protobuf:"bytes,10034,opt,name=net_sum,json=netSum" json:"net_sum,omitempty"`
	NodeId                   *dstore_values.IntegerValue   `protobuf:"bytes,10035,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	PaymentType              *dstore_values.StringValue    `protobuf:"bytes,10036,opt,name=payment_type,json=paymentType" json:"payment_type,omitempty"`
	PositionCount            *dstore_values.IntegerValue   `protobuf:"bytes,10037,opt,name=position_count,json=positionCount" json:"position_count,omitempty"`
	NetPositionSum           *dstore_values.DecimalValue   `protobuf:"bytes,10038,opt,name=net_position_sum,json=netPositionSum" json:"net_position_sum,omitempty"`
	SurchargeIsAbsoluteValue *dstore_values.IntegerValue   `protobuf:"bytes,10039,opt,name=surcharge_is_absolute_value,json=surchargeIsAbsoluteValue" json:"surcharge_is_absolute_value,omitempty"`
	PreciseNetPositionSum    *dstore_values.DecimalValue   `protobuf:"bytes,10040,opt,name=precise_net_position_sum,json=preciseNetPositionSum" json:"precise_net_position_sum,omitempty"`
	NettoPaymentCost         *dstore_values.DecimalValue   `protobuf:"bytes,10041,opt,name=netto_payment_cost,json=nettoPaymentCost" json:"netto_payment_cost,omitempty"`
	NetPaymentCost           *dstore_values.DecimalValue   `protobuf:"bytes,10042,opt,name=net_payment_cost,json=netPaymentCost" json:"net_payment_cost,omitempty"`
	BruttoPostionSum         *dstore_values.DecimalValue   `protobuf:"bytes,10043,opt,name=brutto_postion_sum,json=bruttoPostionSum" json:"brutto_postion_sum,omitempty"`
	DeliveryPersonId         *dstore_values.IntegerValue   `protobuf:"bytes,10044,opt,name=delivery_person_id,json=deliveryPersonId" json:"delivery_person_id,omitempty"`
	Quantity                 *dstore_values.IntegerValue   `protobuf:"bytes,10045,opt,name=quantity" json:"quantity,omitempty"`
	GrossShippingCost        *dstore_values.DecimalValue   `protobuf:"bytes,10046,opt,name=gross_shipping_cost,json=grossShippingCost" json:"gross_shipping_cost,omitempty"`
	GrossSum                 *dstore_values.DecimalValue   `protobuf:"bytes,10047,opt,name=gross_sum,json=grossSum" json:"gross_sum,omitempty"`
	CurrencyId               *dstore_values.IntegerValue   `protobuf:"bytes,10048,opt,name=currency_id,json=currencyId" json:"currency_id,omitempty"`
	PreciseGrossPositionSum  *dstore_values.DecimalValue   `protobuf:"bytes,10049,opt,name=precise_gross_position_sum,json=preciseGrossPositionSum" json:"precise_gross_position_sum,omitempty"`
	NettoShippingCost        *dstore_values.DecimalValue   `protobuf:"bytes,10050,opt,name=netto_shipping_cost,json=nettoShippingCost" json:"netto_shipping_cost,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetDeliveryDateAndTime() *dstore_values.TimestampValue {
	if m != nil {
		return m.DeliveryDateAndTime
	}
	return nil
}

func (m *Response_Row) GetDeliveryDateAndTimeChar() *dstore_values.StringValue {
	if m != nil {
		return m.DeliveryDateAndTimeChar
	}
	return nil
}

func (m *Response_Row) GetNetShippingCost() *dstore_values.DecimalValue {
	if m != nil {
		return m.NetShippingCost
	}
	return nil
}

func (m *Response_Row) GetNettoSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.NettoSum
	}
	return nil
}

func (m *Response_Row) GetOrderId() *dstore_values.IntegerValue {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *Response_Row) GetBruttoSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.BruttoSum
	}
	return nil
}

func (m *Response_Row) GetOrderContentId() *dstore_values.IntegerValue {
	if m != nil {
		return m.OrderContentId
	}
	return nil
}

func (m *Response_Row) GetPreciseNetShippingCost() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseNetShippingCost
	}
	return nil
}

func (m *Response_Row) GetPreciseGrossPaymentCost() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseGrossPaymentCost
	}
	return nil
}

func (m *Response_Row) GetPersonId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonId
	}
	return nil
}

func (m *Response_Row) GetPreciseNetSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseNetSum
	}
	return nil
}

func (m *Response_Row) GetNettoPositionSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.NettoPositionSum
	}
	return nil
}

func (m *Response_Row) GetCurrency() *dstore_values.StringValue {
	if m != nil {
		return m.Currency
	}
	return nil
}

func (m *Response_Row) GetOrderStateId() *dstore_values.IntegerValue {
	if m != nil {
		return m.OrderStateId
	}
	return nil
}

func (m *Response_Row) GetShippingTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ShippingTypeId
	}
	return nil
}

func (m *Response_Row) GetGrossPaymentCost() *dstore_values.DecimalValue {
	if m != nil {
		return m.GrossPaymentCost
	}
	return nil
}

func (m *Response_Row) GetShippingType() *dstore_values.StringValue {
	if m != nil {
		return m.ShippingType
	}
	return nil
}

func (m *Response_Row) GetPosition() *dstore_values.IntegerValue {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *Response_Row) GetPreciseNetPaymentCost() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseNetPaymentCost
	}
	return nil
}

func (m *Response_Row) GetGrossPositionSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.GrossPositionSum
	}
	return nil
}

func (m *Response_Row) GetSurchargeValue() *dstore_values.DecimalValue {
	if m != nil {
		return m.SurchargeValue
	}
	return nil
}

func (m *Response_Row) GetBruttoShippingCost() *dstore_values.DecimalValue {
	if m != nil {
		return m.BruttoShippingCost
	}
	return nil
}

func (m *Response_Row) GetPreciseGrossShippingCost() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseGrossShippingCost
	}
	return nil
}

func (m *Response_Row) GetPreciseGrossSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseGrossSum
	}
	return nil
}

func (m *Response_Row) GetHTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.HTreeNodeId
	}
	return nil
}

func (m *Response_Row) GetBruttoPaymentCost() *dstore_values.DecimalValue {
	if m != nil {
		return m.BruttoPaymentCost
	}
	return nil
}

func (m *Response_Row) GetPaymentTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PaymentTypeId
	}
	return nil
}

func (m *Response_Row) GetSurchargeTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.SurchargeTypeId
	}
	return nil
}

func (m *Response_Row) GetOrderDateAndTime() *dstore_values.TimestampValue {
	if m != nil {
		return m.OrderDateAndTime
	}
	return nil
}

func (m *Response_Row) GetValue3() *dstore_values.StringValue {
	if m != nil {
		return m.Value3
	}
	return nil
}

func (m *Response_Row) GetValue1() *dstore_values.StringValue {
	if m != nil {
		return m.Value1
	}
	return nil
}

func (m *Response_Row) GetValue2() *dstore_values.StringValue {
	if m != nil {
		return m.Value2
	}
	return nil
}

func (m *Response_Row) GetOrderDateAndTimeChar() *dstore_values.StringValue {
	if m != nil {
		return m.OrderDateAndTimeChar
	}
	return nil
}

func (m *Response_Row) GetNetSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.NetSum
	}
	return nil
}

func (m *Response_Row) GetNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *Response_Row) GetPaymentType() *dstore_values.StringValue {
	if m != nil {
		return m.PaymentType
	}
	return nil
}

func (m *Response_Row) GetPositionCount() *dstore_values.IntegerValue {
	if m != nil {
		return m.PositionCount
	}
	return nil
}

func (m *Response_Row) GetNetPositionSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.NetPositionSum
	}
	return nil
}

func (m *Response_Row) GetSurchargeIsAbsoluteValue() *dstore_values.IntegerValue {
	if m != nil {
		return m.SurchargeIsAbsoluteValue
	}
	return nil
}

func (m *Response_Row) GetPreciseNetPositionSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseNetPositionSum
	}
	return nil
}

func (m *Response_Row) GetNettoPaymentCost() *dstore_values.DecimalValue {
	if m != nil {
		return m.NettoPaymentCost
	}
	return nil
}

func (m *Response_Row) GetNetPaymentCost() *dstore_values.DecimalValue {
	if m != nil {
		return m.NetPaymentCost
	}
	return nil
}

func (m *Response_Row) GetBruttoPostionSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.BruttoPostionSum
	}
	return nil
}

func (m *Response_Row) GetDeliveryPersonId() *dstore_values.IntegerValue {
	if m != nil {
		return m.DeliveryPersonId
	}
	return nil
}

func (m *Response_Row) GetQuantity() *dstore_values.IntegerValue {
	if m != nil {
		return m.Quantity
	}
	return nil
}

func (m *Response_Row) GetGrossShippingCost() *dstore_values.DecimalValue {
	if m != nil {
		return m.GrossShippingCost
	}
	return nil
}

func (m *Response_Row) GetGrossSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.GrossSum
	}
	return nil
}

func (m *Response_Row) GetCurrencyId() *dstore_values.IntegerValue {
	if m != nil {
		return m.CurrencyId
	}
	return nil
}

func (m *Response_Row) GetPreciseGrossPositionSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseGrossPositionSum
	}
	return nil
}

func (m *Response_Row) GetNettoShippingCost() *dstore_values.DecimalValue {
	if m != nil {
		return m.NettoShippingCost
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.om_ExportOrders_Ad.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.om_ExportOrders_Ad.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.om_ExportOrders_Ad.Response.Row")
}

func init() { proto.RegisterFile("dstore/engine/procedures/om_ExportOrders_Ad.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1580 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x58, 0x69, 0x53, 0x1b, 0x47,
	0x10, 0x2d, 0x87, 0x00, 0x62, 0xc0, 0x1c, 0x8b, 0x8d, 0x07, 0x41, 0x7c, 0xa5, 0x5c, 0x95, 0x4f,
	0x72, 0x90, 0x72, 0xa7, 0x92, 0x32, 0x06, 0x27, 0x26, 0x65, 0x0b, 0x4a, 0x38, 0x71, 0x39, 0xfe,
	0xb0, 0xb5, 0x68, 0x07, 0xb1, 0x65, 0x69, 0x47, 0xd9, 0x99, 0xb5, 0xcd, 0xbf, 0xc8, 0x7d, 0x3a,
	0xf7, 0xe9, 0xdc, 0xf7, 0x9d, 0x38, 0xc9, 0xbf, 0xc9, 0x7d, 0xfc, 0x82, 0xf4, 0x5c, 0xd2, 0xae,
	0xb4, 0xa0, 0xb1, 0xbf, 0x40, 0xad, 0xb6, 0xdf, 0x9b, 0xd7, 0x3d, 0x3d, 0xaf, 0x47, 0x42, 0x73,
	0x3e, 0xe3, 0x34, 0x22, 0x87, 0x49, 0x58, 0x0b, 0x42, 0x72, 0xb8, 0x19, 0xd1, 0x2a, 0xf1, 0xe3,
	0x88, 0xb0, 0xc3, 0xb4, 0xe1, 0x1e, 0xbb, 0xd8, 0xa4, 0x11, 0x5f, 0x8e, 0x7c, 0x12, 0x31, 0x77,
	0xde, 0x2f, 0xc0, 0x5b, 0x4e, 0x9d, 0xfd, 0x0a, 0x52, 0x50, 0x90, 0x42, 0x77, 0x5c, 0x7e, 0x52,
	0x93, 0x9e, 0xf7, 0xea, 0x31, 0x61, 0x0a, 0x96, 0x9f, 0x4e, 0xaf, 0x44, 0xa2, 0x88, 0x46, 0xfa,
	0xd5, 0x4c, 0xfa, 0x55, 0x83, 0x30, 0xe6, 0xd5, 0x88, 0x7e, 0x79, 0x63, 0xe7, 0x4b, 0xee, 0x05,
	0xe1, 0x3a, 0x8d, 0x1a, 0x1e, 0x0f, 0x68, 0xa8, 0x82, 0x0e, 0x5e, 0x1a, 0x46, 0x68, 0xc5, 0x8b,
	0x3c, 0x78, 0x0b, 0x1a, 0x9c, 0xbb, 0xd0, 0xd0, 0x7a, 0x04, 0xc2, 0x7c, 0x8f, 0x13, 0xbc, 0x63,
	0xff, 0x8e, 0x9b, 0x86, 0x8b, 0x37, 0x14, 0xb4, 0x6c, 0x2d, 0x8a, 0x07, 0xb0, 0x0c, 0xf7, 0x1a,
	0xcd, 0x87, 0xc4, 0x73, 0x25, 0x27, 0xe2, 0x17, 0x21, 0xdc, 0x39, 0x84, 0x46, 0x5b, 0x58, 0x37,
	0x8c, 0xeb, 0x75, 0xfc, 0xeb, 0x20, 0x30, 0xe4, 0x2a, 0x23, 0x26, 0xa4, 0x0c, 0x1f, 0x3a, 0xb7,
	0xa1, 0x41, 0x4e, 0xd5, 0x02, 0xd7, 0xd9, 0x2c, 0x30, 0xc0, 0xa9, 0xa4, 0x3f, 0x80, 0x46, 0x34,
	0x4e, 0x91, 0xff, 0xa6, 0xc8, 0x91, 0x7a, 0x2d, 0xa9, 0x57, 0xd1, 0x9e, 0x90, 0xfa, 0xc4, 0xad,
	0x6e, 0x40, 0x46, 0x55, 0x48, 0x28, 0x60, 0x3c, 0xa8, 0xba, 0x81, 0x3f, 0x87, 0xfb, 0xe4, 0x52,
	0x33, 0x1d, 0x4b, 0x05, 0x21, 0x27, 0x35, 0x12, 0xa9, 0x85, 0x76, 0x0b, 0xec, 0x42, 0x0a, 0xba,
	0xe4, 0xcf, 0x39, 0x47, 0xd0, 0xec, 0x16, 0xa4, 0x4a, 0xc7, 0xef, 0x4a, 0xc7, 0x74, 0x26, 0x7a,
	0x7b, 0x59, 0x45, 0x7c, 0xfd, 0x35, 0xca, 0x2a, 0x6e, 0x2d, 0xab, 0xa8, 0x64, 0xfd, 0xb1, 0x8d,
	0xac, 0xe2, 0xf6, 0xb2, 0x4a, 0xb8, 0xff, 0x1a, 0x65, 0x95, 0xb6, 0x96, 0x55, 0x52, 0xb2, 0xfe,
	0xdc, 0x46, 0x56, 0x49, 0xca, 0x5a, 0x43, 0xfb, 0xd9, 0xb9, 0xa0, 0xe9, 0x52, 0x77, 0xc3, 0x3b,
	0x1f, 0x84, 0x35, 0xd7, 0x0f, 0xd6, 0xd7, 0x49, 0x44, 0x42, 0x0e, 0x1f, 0x41, 0x5f, 0x70, 0xc2,
	0xf0, 0x40, 0xa6, 0xbe, 0x35, 0x4a, 0xeb, 0xc4, 0x0b, 0x95, 0xbe, 0x19, 0x41, 0xb2, 0x7c, 0x5c,
	0x52, 0x2c, 0x1a, 0x86, 0xe5, 0x55, 0x89, 0x77, 0x96, 0xd1, 0xa1, 0x5e, 0x6b, 0x28, 0xb9, 0x7f,
	0x29, 0xb9, 0xfb, 0xb6, 0x21, 0x93, 0xa2, 0x4f, 0xa3, 0x7c, 0x8d, 0x70, 0xd7, 0xab, 0xd7, 0xdd,
	0x26, 0x65, 0x81, 0x38, 0x60, 0xcc, 0xa5, 0xeb, 0x2e, 0x15, 0x47, 0x1b, 0x0f, 0xf6, 0x96, 0x3b,
	0x05, 0xf0, 0xf9, 0x7a, 0x7d, 0xc5, 0x80, 0x97, 0xd7, 0xa5, 0x2b, 0x38, 0x8b, 0x68, 0xdf, 0xd6,
	0xc4, 0x4a, 0xe3, 0xdf, 0x4a, 0x63, 0x3e, 0x9b, 0x41, 0xca, 0x3b, 0x81, 0x76, 0x35, 0xbc, 0x8b,
	0x10, 0xde, 0x58, 0x03, 0x94, 0x81, 0x33, 0x9c, 0xeb, 0xbd, 0xcf, 0x13, 0x00, 0x2c, 0x4b, 0x9c,
	0x26, 0x64, 0xce, 0x9d, 0x68, 0x3a, 0x8b, 0x4d, 0xa9, 0xf9, 0x47, 0xa9, 0xd9, 0xdd, 0x05, 0x93,
	0x42, 0xce, 0xa2, 0xd9, 0x20, 0xac, 0xd6, 0x63, 0xe8, 0x10, 0x0d, 0xba, 0x10, 0xf0, 0x0d, 0x93,
	0x0d, 0xc5, 0x43, 0xbd, 0x05, 0x61, 0x4d, 0xa0, 0x58, 0x4f, 0x03, 0x5c, 0xe5, 0x49, 0x9d, 0xe3,
	0xe8, 0xc0, 0x76, 0xe4, 0x4a, 0xdf, 0xbf, 0x4a, 0xdf, 0xec, 0x56, 0x2c, 0xa6, 0x5e, 0xb2, 0xea,
	0x55, 0x1e, 0x7b, 0x75, 0x37, 0xe0, 0xa4, 0xe1, 0x0a, 0xeb, 0xc4, 0xa8, 0xf7, 0x46, 0x4e, 0x88,
	0x6d, 0x90, 0xb8, 0x25, 0x80, 0x2d, 0x01, 0x4a, 0xd4, 0x2b, 0x8b, 0x4d, 0xe9, 0xf9, 0x4f, 0xd7,
	0xab, 0x0b, 0x26, 0x84, 0x1c, 0xbc, 0xb2, 0x17, 0xe5, 0x2a, 0x84, 0x35, 0x61, 0x3f, 0x89, 0x73,
	0x33, 0xea, 0x97, 0xe6, 0xaf, 0x8d, 0x39, 0x5f, 0x48, 0xcf, 0x13, 0x35, 0x18, 0x8e, 0x89, 0xbf,
	0x15, 0x15, 0xe8, 0x9c, 0x41, 0xe3, 0xc2, 0xf6, 0xdd, 0x84, 0xef, 0x83, 0xe9, 0xf6, 0x01, 0xb8,
	0xd0, 0x01, 0xee, 0x9c, 0x0e, 0x27, 0xe1, 0x79, 0xa9, 0xfd, 0x5c, 0x19, 0x6b, 0xa4, 0x3f, 0x70,
	0xee, 0x40, 0x83, 0x7a, 0xdc, 0x80, 0xb7, 0x0a, 0xc6, 0xbd, 0x5d, 0x8c, 0x6a, 0x18, 0x9d, 0x54,
	0xff, 0x2b, 0x26, 0x1c, 0x2c, 0xa2, 0x2f, 0xa2, 0x17, 0xc0, 0xfa, 0xb2, 0x74, 0x64, 0x0c, 0x4f,
	0x93, 0x7f, 0xa1, 0x42, 0x2f, 0x54, 0x04, 0x34, 0x7f, 0x79, 0x16, 0xf5, 0xc1, 0x83, 0x33, 0x85,
	0x06, 0xe0, 0x11, 0xcc, 0x05, 0x3f, 0x5a, 0x86, 0x92, 0xf4, 0x57, 0xfa, 0xe1, 0x71, 0xc9, 0x07,
	0x67, 0x9b, 0xf2, 0x49, 0x3d, 0x38, 0x4f, 0xa2, 0x4d, 0x35, 0x30, 0xbc, 0xd0, 0x77, 0xc5, 0x58,
	0xc1, 0x8f, 0x95, 0x6d, 0x46, 0xce, 0xa4, 0x41, 0x8b, 0xc9, 0x32, 0x1f, 0xfa, 0xa7, 0xe0, 0x35,
	0xd4, 0x72, 0x26, 0x9b, 0x54, 0x7a, 0x1d, 0x7e, 0xbc, 0x9c, 0xde, 0x14, 0xcd, 0xcc, 0x78, 0x04,
	0x9e, 0xa1, 0x68, 0xf7, 0x64, 0xd0, 0x0a, 0x0f, 0x84, 0xc6, 0x9d, 0x08, 0xa1, 0x41, 0xd8, 0x46,
	0xd0, 0x6c, 0x0a, 0x37, 0xaa, 0x52, 0xc6, 0xf1, 0x13, 0xe5, 0xcc, 0x66, 0xf3, 0x49, 0x35, 0x68,
	0x78, 0x75, 0xc5, 0x38, 0x06, 0xb0, 0x55, 0x8d, 0x5a, 0x00, 0x10, 0xb4, 0xda, 0x10, 0x7c, 0x04,
	0x73, 0x92, 0xc5, 0x0d, 0xfc, 0xa4, 0x05, 0x43, 0x4e, 0x86, 0xaf, 0xc6, 0x0d, 0xe7, 0x76, 0x94,
	0x53, 0x27, 0x05, 0xca, 0xf9, 0x54, 0xb9, 0xf7, 0x39, 0x1c, 0x94, 0xd1, 0x50, 0xed, 0xbb, 0x11,
	0x5a, 0x8b, 0x62, 0xb3, 0xe8, 0xd3, 0x16, 0x8b, 0x0e, 0xa9, 0x78, 0xb1, 0xea, 0x7d, 0x68, 0x5c,
	0xad, 0x5a, 0xa5, 0x40, 0x0e, 0xfe, 0x0b, 0xab, 0x3f, 0x63, 0xb1, 0xfa, 0xa8, 0x44, 0x2d, 0x28,
	0x10, 0x88, 0x38, 0x8d, 0xa6, 0x9b, 0x11, 0xac, 0xc1, 0xe0, 0x76, 0xd0, 0x55, 0xca, 0x67, 0x2d,
	0x34, 0x4d, 0x69, 0x78, 0xb9, 0xa3, 0xa2, 0x67, 0x50, 0xde, 0x10, 0xd7, 0x22, 0xca, 0x98, 0xdb,
	0xf4, 0x36, 0x1b, 0x42, 0xa8, 0x64, 0x7e, 0xce, 0x82, 0x79, 0x8f, 0xc6, 0xdf, 0x2f, 0xe0, 0x2b,
	0x0a, 0x6d, 0x36, 0xab, 0x09, 0x3d, 0x4e, 0x43, 0x91, 0xf4, 0xf3, 0x16, 0x49, 0xe7, 0x54, 0x38,
	0xa4, 0xbb, 0x88, 0xc6, 0x52, 0xe9, 0x42, 0xe1, 0x5f, 0xb0, 0x90, 0xb2, 0x33, 0x91, 0x24, 0x14,
	0xff, 0x01, 0xe4, 0xa8, 0x6e, 0x31, 0xa3, 0x45, 0x12, 0x5d, 0xb2, 0x20, 0x1a, 0x97, 0x38, 0x33,
	0x6b, 0x74, 0xfb, 0x54, 0xe3, 0x08, 0xe6, 0x62, 0x75, 0x13, 0xbf, 0xd8, 0xfb, 0x2c, 0xb4, 0x82,
	0x9d, 0xa3, 0x48, 0xed, 0xa5, 0x9a, 0xbb, 0xa2, 0x14, 0x2f, 0x59, 0x94, 0x62, 0x44, 0x62, 0xe4,
	0x04, 0x86, 0x72, 0x40, 0x17, 0xb5, 0x76, 0x9c, 0x6f, 0x36, 0x25, 0xcb, 0xcb, 0x36, 0x5d, 0x64,
	0x50, 0xa7, 0x00, 0x04, 0x3c, 0x50, 0x90, 0x8c, 0x4d, 0x7e, 0xc5, 0xa6, 0x20, 0xb5, 0xce, 0xdd,
	0x3d, 0x82, 0x76, 0xa6, 0x34, 0xe1, 0x57, 0x7b, 0x57, 0x65, 0x24, 0xa9, 0x07, 0x2c, 0x36, 0x67,
	0x36, 0x06, 0xbf, 0x66, 0xd5, 0x1e, 0x3a, 0xda, 0x79, 0x10, 0xe1, 0x64, 0x7b, 0xa4, 0xb2, 0x79,
	0xdd, 0x22, 0x9b, 0xdd, 0xed, 0x3e, 0x49, 0xa6, 0xd4, 0x2e, 0x4f, 0xb2, 0x5f, 0xde, 0xb0, 0x2f,
	0x4f, 0xa2, 0x5f, 0x8e, 0xa1, 0x31, 0x16, 0x47, 0xc2, 0x3a, 0x6b, 0xc4, 0x95, 0x10, 0xfc, 0xa6,
	0x05, 0xd1, 0x68, 0x0b, 0x24, 0x9f, 0x9d, 0x32, 0xda, 0x65, 0xcc, 0x27, 0x75, 0xe4, 0xdf, 0xb2,
	0xe0, 0x72, 0xb4, 0x0d, 0x25, 0x8f, 0xfb, 0x59, 0x34, 0x93, 0x3e, 0xee, 0x69, 0xda, 0xb7, 0x2d,
	0x68, 0x71, 0xf2, 0xbc, 0xa7, 0xc8, 0xc1, 0xe7, 0x3b, 0xc8, 0xa1, 0x7c, 0xef, 0xd8, 0xf8, 0x7c,
	0x8a, 0x12, 0xaa, 0x37, 0x8f, 0x46, 0x37, 0x5c, 0x1e, 0x11, 0xd8, 0x5f, 0x71, 0xdb, 0x86, 0x76,
	0xbf, 0x6c, 0xd1, 0x20, 0xc3, 0x1b, 0xa7, 0x00, 0x52, 0x06, 0x04, 0xf4, 0xfa, 0x09, 0x34, 0xa9,
	0x2b, 0x97, 0x6a, 0x8f, 0x77, 0x2d, 0xe4, 0x4c, 0x28, 0x60, 0xb2, 0x35, 0x84, 0x21, 0x69, 0x1a,
	0x73, 0x00, 0xdf, 0xb3, 0x50, 0xb4, 0x53, 0x83, 0xf4, 0xf9, 0x83, 0x02, 0xb5, 0x9b, 0xc2, 0xf0,
	0xbc, 0x6f, 0xc1, 0xd3, 0xee, 0x25, 0xcd, 0x74, 0x12, 0x4d, 0x2a, 0x57, 0x49, 0xcf, 0xff, 0x0f,
	0xac, 0xe6, 0xbf, 0x1a, 0x49, 0xc9, 0xe1, 0x5f, 0x42, 0x03, 0x32, 0xb4, 0x84, 0x3f, 0xec, 0x7d,
	0x8a, 0x75, 0x68, 0x0b, 0x34, 0x87, 0x3f, 0xb2, 0x05, 0xcd, 0xb5, 0x40, 0x45, 0xfc, 0xb1, 0x2d,
	0xa8, 0x08, 0x17, 0x1e, 0x9c, 0x91, 0xad, 0xba, 0x98, 0x7c, 0xd2, 0x9b, 0x66, 0x57, 0x67, 0xbe,
	0xf2, 0x56, 0x72, 0x2b, 0x1a, 0x34, 0xb3, 0xe5, 0x53, 0x8b, 0xa6, 0x18, 0x08, 0xd5, 0x50, 0x11,
	0x30, 0xdd, 0x93, 0x9f, 0x59, 0xec, 0xdc, 0x40, 0xa8, 0xda, 0xf1, 0x5e, 0x34, 0x92, 0x6c, 0x20,
	0xfc, 0x79, 0x6f, 0xd9, 0xc3, 0x89, 0xe6, 0x71, 0x16, 0xd0, 0x68, 0xcb, 0x95, 0xaa, 0x34, 0x0e,
	0x39, 0xfe, 0xc2, 0xaa, 0xff, 0x34, 0x66, 0x41, 0x40, 0xc4, 0x1c, 0x91, 0x7e, 0x99, 0xb4, 0xb7,
	0x2f, 0x6d, 0x5c, 0x09, 0x50, 0x49, 0x73, 0x03, 0x17, 0x69, 0xf7, 0x71, 0xc0, 0x5c, 0x6f, 0x8d,
	0xd1, 0x7a, 0xcc, 0x8d, 0xd1, 0x7d, 0x65, 0xa1, 0x0c, 0xb7, 0x08, 0x96, 0xd8, 0xbc, 0x86, 0x2b,
	0xcb, 0xeb, 0x34, 0xf7, 0xa4, 0xd8, 0xaf, 0xaf, 0xd2, 0xdc, 0x13, 0x9a, 0xdb, 0x97, 0x81, 0xa4,
	0x1d, 0x7c, 0x63, 0x7f, 0x19, 0x48, 0xb8, 0x81, 0xa9, 0x63, 0x92, 0xe9, 0x5b, 0xdb, 0x3a, 0xa6,
	0x07, 0x8e, 0xf1, 0x28, 0x78, 0x34, 0x49, 0x7e, 0x67, 0xa3, 0x49, 0x5b, 0x94, 0x82, 0xe9, 0xfc,
	0x5a, 0xf7, 0xf7, 0xf6, 0xb5, 0xeb, 0x7b, 0x8b, 0xad, 0x18, 0x37, 0xb8, 0x15, 0x73, 0xfd, 0x82,
	0xc9, 0xfc, 0x48, 0xec, 0x85, 0x3c, 0xe0, 0x9b, 0xf8, 0x07, 0x9b, 0xc9, 0x6c, 0xa2, 0x85, 0xeb,
	0x66, 0xcd, 0x95, 0x1f, 0x6d, 0x5c, 0xb7, 0xd6, 0x35, 0x50, 0xe0, 0x06, 0xd9, 0x1e, 0x24, 0x57,
	0x6c, 0xae, 0xfb, 0x35, 0x33, 0x41, 0xee, 0x41, 0xc3, 0xe6, 0x0a, 0x26, 0xea, 0xf0, 0x93, 0x45,
	0x16, 0xc8, 0x00, 0xa0, 0x02, 0xdd, 0xd7, 0xe2, 0x64, 0x1b, 0xfe, 0x7c, 0xd5, 0xd7, 0xe2, 0x44,
	0x23, 0x42, 0x89, 0xf4, 0x77, 0x98, 0x54, 0x89, 0x7e, 0xb1, 0x29, 0x91, 0xfa, 0x36, 0x93, 0x28,
	0xd1, 0xd1, 0x55, 0x34, 0x13, 0xd0, 0x8e, 0x2f, 0x99, 0xed, 0x1f, 0x6b, 0x1f, 0xbe, 0xa5, 0x46,
	0x99, 0x7f, 0xce, 0xbc, 0xf7, 0xed, 0x7e, 0xcf, 0x5d, 0x1b, 0x90, 0x3f, 0x9e, 0x96, 0xfe, 0x0f,
	0x00, 0x00, 0xff, 0xff, 0xbf, 0x98, 0xb8, 0x7e, 0x05, 0x16, 0x00, 0x00,
}
