// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/om_GetTrolley_Pu.proto
// DO NOT EDIT!

/*
Package om_GetTrolley_Pu is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/om_GetTrolley_Pu.proto

It has these top-level messages:
	Parameters
	Response
*/
package om_GetTrolley_Pu

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "gosdk.dstore.de/values"
import dstore_engine_error "gosdk.dstore.de/engine/error"
import dstore_engine_message "gosdk.dstore.de/engine/message"
import dstore_engine_metainformation "gosdk.dstore.de/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	UniqueId                         *dstore_values.StringValue  `protobuf:"bytes,1,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
	UniqueIdNull                     bool                        `protobuf:"varint,1001,opt,name=unique_id_null,json=uniqueIdNull" json:"unique_id_null,omitempty"`
	PersonId                         *dstore_values.IntegerValue `protobuf:"bytes,2,opt,name=person_id,json=personId" json:"person_id,omitempty"`
	PersonIdNull                     bool                        `protobuf:"varint,1002,opt,name=person_id_null,json=personIdNull" json:"person_id_null,omitempty"`
	CalculatePrices                  *dstore_values.IntegerValue `protobuf:"bytes,3,opt,name=calculate_prices,json=calculatePrices" json:"calculate_prices,omitempty"`
	CalculatePricesNull              bool                        `protobuf:"varint,1003,opt,name=calculate_prices_null,json=calculatePricesNull" json:"calculate_prices_null,omitempty"`
	CheckAvailability                *dstore_values.BooleanValue `protobuf:"bytes,4,opt,name=check_availability,json=checkAvailability" json:"check_availability,omitempty"`
	CheckAvailabilityNull            bool                        `protobuf:"varint,1004,opt,name=check_availability_null,json=checkAvailabilityNull" json:"check_availability_null,omitempty"`
	ShowDescriptions                 *dstore_values.BooleanValue `protobuf:"bytes,5,opt,name=show_descriptions,json=showDescriptions" json:"show_descriptions,omitempty"`
	ShowDescriptionsNull             bool                        `protobuf:"varint,1005,opt,name=show_descriptions_null,json=showDescriptionsNull" json:"show_descriptions_null,omitempty"`
	PriceNodeCharacteristicId        *dstore_values.IntegerValue `protobuf:"bytes,6,opt,name=price_node_characteristic_id,json=priceNodeCharacteristicId" json:"price_node_characteristic_id,omitempty"`
	PriceNodeCharacteristicIdNull    bool                        `protobuf:"varint,1006,opt,name=price_node_characteristic_id_null,json=priceNodeCharacteristicIdNull" json:"price_node_characteristic_id_null,omitempty"`
	NodeCharacteristicId             *dstore_values.IntegerValue `protobuf:"bytes,7,opt,name=node_characteristic_id,json=nodeCharacteristicId" json:"node_characteristic_id,omitempty"`
	NodeCharacteristicIdNull         bool                        `protobuf:"varint,1007,opt,name=node_characteristic_id_null,json=nodeCharacteristicIdNull" json:"node_characteristic_id_null,omitempty"`
	IncludePredecessors              *dstore_values.BooleanValue `protobuf:"bytes,8,opt,name=include_predecessors,json=includePredecessors" json:"include_predecessors,omitempty"`
	IncludePredecessorsNull          bool                        `protobuf:"varint,1008,opt,name=include_predecessors_null,json=includePredecessorsNull" json:"include_predecessors_null,omitempty"`
	LookForProductDescription        *dstore_values.BooleanValue `protobuf:"bytes,9,opt,name=look_for_product_description,json=lookForProductDescription" json:"look_for_product_description,omitempty"`
	LookForProductDescriptionNull    bool                        `protobuf:"varint,1009,opt,name=look_for_product_description_null,json=lookForProductDescriptionNull" json:"look_for_product_description_null,omitempty"`
	RepairEntriesWithSameNodeId      *dstore_values.IntegerValue `protobuf:"bytes,10,opt,name=repair_entries_with_same_node_id,json=repairEntriesWithSameNodeId" json:"repair_entries_with_same_node_id,omitempty"`
	RepairEntriesWithSameNodeIdNull  bool                        `protobuf:"varint,1010,opt,name=repair_entries_with_same_node_id_null,json=repairEntriesWithSameNodeIdNull" json:"repair_entries_with_same_node_id_null,omitempty"`
	GetPlainTrolley                  *dstore_values.BooleanValue `protobuf:"bytes,11,opt,name=get_plain_trolley,json=getPlainTrolley" json:"get_plain_trolley,omitempty"`
	GetPlainTrolleyNull              bool                        `protobuf:"varint,1011,opt,name=get_plain_trolley_null,json=getPlainTrolleyNull" json:"get_plain_trolley_null,omitempty"`
	DeliveryPersonId                 *dstore_values.IntegerValue `protobuf:"bytes,12,opt,name=delivery_person_id,json=deliveryPersonId" json:"delivery_person_id,omitempty"`
	DeliveryPersonIdNull             bool                        `protobuf:"varint,1012,opt,name=delivery_person_id_null,json=deliveryPersonIdNull" json:"delivery_person_id_null,omitempty"`
	OutputIntoTrolleySurchInterf     *dstore_values.BooleanValue `protobuf:"bytes,13,opt,name=output_into_trolley_surch_interf,json=outputIntoTrolleySurchInterf" json:"output_into_trolley_surch_interf,omitempty"`
	OutputIntoTrolleySurchInterfNull bool                        `protobuf:"varint,1013,opt,name=output_into_trolley_surch_interf_null,json=outputIntoTrolleySurchInterfNull" json:"output_into_trolley_surch_interf_null,omitempty"`
	PaymentTypeId                    *dstore_values.IntegerValue `protobuf:"bytes,14,opt,name=payment_type_id,json=paymentTypeId" json:"payment_type_id,omitempty"`
	PaymentTypeIdNull                bool                        `protobuf:"varint,1014,opt,name=payment_type_id_null,json=paymentTypeIdNull" json:"payment_type_id_null,omitempty"`
	ShippingTypeId                   *dstore_values.IntegerValue `protobuf:"bytes,15,opt,name=shipping_type_id,json=shippingTypeId" json:"shipping_type_id,omitempty"`
	ShippingTypeIdNull               bool                        `protobuf:"varint,1015,opt,name=shipping_type_id_null,json=shippingTypeIdNull" json:"shipping_type_id_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetUniqueId() *dstore_values.StringValue {
	if m != nil {
		return m.UniqueId
	}
	return nil
}

func (m *Parameters) GetPersonId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonId
	}
	return nil
}

func (m *Parameters) GetCalculatePrices() *dstore_values.IntegerValue {
	if m != nil {
		return m.CalculatePrices
	}
	return nil
}

func (m *Parameters) GetCheckAvailability() *dstore_values.BooleanValue {
	if m != nil {
		return m.CheckAvailability
	}
	return nil
}

func (m *Parameters) GetShowDescriptions() *dstore_values.BooleanValue {
	if m != nil {
		return m.ShowDescriptions
	}
	return nil
}

func (m *Parameters) GetPriceNodeCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PriceNodeCharacteristicId
	}
	return nil
}

func (m *Parameters) GetNodeCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeCharacteristicId
	}
	return nil
}

func (m *Parameters) GetIncludePredecessors() *dstore_values.BooleanValue {
	if m != nil {
		return m.IncludePredecessors
	}
	return nil
}

func (m *Parameters) GetLookForProductDescription() *dstore_values.BooleanValue {
	if m != nil {
		return m.LookForProductDescription
	}
	return nil
}

func (m *Parameters) GetRepairEntriesWithSameNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.RepairEntriesWithSameNodeId
	}
	return nil
}

func (m *Parameters) GetGetPlainTrolley() *dstore_values.BooleanValue {
	if m != nil {
		return m.GetPlainTrolley
	}
	return nil
}

func (m *Parameters) GetDeliveryPersonId() *dstore_values.IntegerValue {
	if m != nil {
		return m.DeliveryPersonId
	}
	return nil
}

func (m *Parameters) GetOutputIntoTrolleySurchInterf() *dstore_values.BooleanValue {
	if m != nil {
		return m.OutputIntoTrolleySurchInterf
	}
	return nil
}

func (m *Parameters) GetPaymentTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PaymentTypeId
	}
	return nil
}

func (m *Parameters) GetShippingTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ShippingTypeId
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId                          int32                         `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	TotalNettoPrice                *dstore_values.DecimalValue   `protobuf:"bytes,10001,opt,name=total_netto_price,json=totalNettoPrice" json:"total_netto_price,omitempty"`
	PreciseAbsUnitGrossSurcharge   *dstore_values.DecimalValue   `protobuf:"bytes,10002,opt,name=precise_abs_unit_gross_surcharge,json=preciseAbsUnitGrossSurcharge" json:"precise_abs_unit_gross_surcharge,omitempty"`
	PriceNodeCharacteristicId      *dstore_values.IntegerValue   `protobuf:"bytes,10003,opt,name=price_node_characteristic_id,json=priceNodeCharacteristicId" json:"price_node_characteristic_id,omitempty"`
	AbsoluteUnitNettoSurcharge     *dstore_values.DecimalValue   `protobuf:"bytes,10004,opt,name=absolute_unit_netto_surcharge,json=absoluteUnitNettoSurcharge" json:"absolute_unit_netto_surcharge,omitempty"`
	UnitGrossPrice                 *dstore_values.DecimalValue   `protobuf:"bytes,10005,opt,name=unit_gross_price,json=unitGrossPrice" json:"unit_gross_price,omitempty"`
	AbsoluteTotalNetSurcharge      *dstore_values.DecimalValue   `protobuf:"bytes,10006,opt,name=absolute_total_net_surcharge,json=absoluteTotalNetSurcharge" json:"absolute_total_net_surcharge,omitempty"`
	AbsoluteTotalGrossSurcharge    *dstore_values.DecimalValue   `protobuf:"bytes,10007,opt,name=absolute_total_gross_surcharge,json=absoluteTotalGrossSurcharge" json:"absolute_total_gross_surcharge,omitempty"`
	Removed                        *dstore_values.IntegerValue   `protobuf:"bytes,10008,opt,name=removed" json:"removed,omitempty"`
	UnitBruttoPrice                *dstore_values.DecimalValue   `protobuf:"bytes,10009,opt,name=unit_brutto_price,json=unitBruttoPrice" json:"unit_brutto_price,omitempty"`
	CurrencySymbol                 *dstore_values.StringValue    `protobuf:"bytes,10010,opt,name=currency_symbol,json=currencySymbol" json:"currency_symbol,omitempty"`
	PreciseUnitGrossPrice          *dstore_values.DecimalValue   `protobuf:"bytes,10011,opt,name=precise_unit_gross_price,json=preciseUnitGrossPrice" json:"precise_unit_gross_price,omitempty"`
	NodeDescription                *dstore_values.StringValue    `protobuf:"bytes,10012,opt,name=node_description,json=nodeDescription" json:"node_description,omitempty"`
	UnitNetPrice                   *dstore_values.DecimalValue   `protobuf:"bytes,10013,opt,name=unit_net_price,json=unitNetPrice" json:"unit_net_price,omitempty"`
	TotalBruttoPrice               *dstore_values.DecimalValue   `protobuf:"bytes,10014,opt,name=total_brutto_price,json=totalBruttoPrice" json:"total_brutto_price,omitempty"`
	PreciseAbsUnitNetSurcharge     *dstore_values.DecimalValue   `protobuf:"bytes,10015,opt,name=precise_abs_unit_net_surcharge,json=preciseAbsUnitNetSurcharge" json:"precise_abs_unit_net_surcharge,omitempty"`
	SurchargeReason                *dstore_values.StringValue    `protobuf:"bytes,10016,opt,name=surcharge_reason,json=surchargeReason" json:"surcharge_reason,omitempty"`
	AssociatedOrChosenTreeNodeId   *dstore_values.IntegerValue   `protobuf:"bytes,10017,opt,name=associated_or_chosen_tree_node_id,json=associatedOrChosenTreeNodeId" json:"associated_or_chosen_tree_node_id,omitempty"`
	NodeId                         *dstore_values.IntegerValue   `protobuf:"bytes,10018,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Deleted                        *dstore_values.BooleanValue   `protobuf:"bytes,10019,opt,name=deleted" json:"deleted,omitempty"`
	AbsoluteTotalNettoSurcharge    *dstore_values.DecimalValue   `protobuf:"bytes,10020,opt,name=absolute_total_netto_surcharge,json=absoluteTotalNettoSurcharge" json:"absolute_total_netto_surcharge,omitempty"`
	BonusItemForItemSetId          *dstore_values.IntegerValue   `protobuf:"bytes,10021,opt,name=bonus_item_for_item_set_id,json=bonusItemForItemSetId" json:"bonus_item_for_item_set_id,omitempty"`
	RelativeSurcharge              *dstore_values.DecimalValue   `protobuf:"bytes,10022,opt,name=relative_surcharge,json=relativeSurcharge" json:"relative_surcharge,omitempty"`
	AbsoluteTotalBruttoSurcharge   *dstore_values.DecimalValue   `protobuf:"bytes,10023,opt,name=absolute_total_brutto_surcharge,json=absoluteTotalBruttoSurcharge" json:"absolute_total_brutto_surcharge,omitempty"`
	SurchargeGeneratedByCampIds    *dstore_values.StringValue    `protobuf:"bytes,10024,opt,name=surcharge_generated_by_camp_ids,json=surchargeGeneratedByCampIds" json:"surcharge_generated_by_camp_ids,omitempty"`
	PreciseTotalGrossPrice         *dstore_values.DecimalValue   `protobuf:"bytes,10025,opt,name=precise_total_gross_price,json=preciseTotalGrossPrice" json:"precise_total_gross_price,omitempty"`
	InputDateAndTime               *dstore_values.TimestampValue `protobuf:"bytes,10026,opt,name=input_date_and_time,json=inputDateAndTime" json:"input_date_and_time,omitempty"`
	UnitNettoPrice                 *dstore_values.DecimalValue   `protobuf:"bytes,10027,opt,name=unit_netto_price,json=unitNettoPrice" json:"unit_netto_price,omitempty"`
	TaxesMultiplier                *dstore_values.DecimalValue   `protobuf:"bytes,10028,opt,name=taxes_multiplier,json=taxesMultiplier" json:"taxes_multiplier,omitempty"`
	PreciseAbsTotalGrossSurcharge  *dstore_values.DecimalValue   `protobuf:"bytes,10029,opt,name=precise_abs_total_gross_surcharge,json=preciseAbsTotalGrossSurcharge" json:"precise_abs_total_gross_surcharge,omitempty"`
	ItemProperty                   *dstore_values.StringValue    `protobuf:"bytes,10030,opt,name=item_property,json=itemProperty" json:"item_property,omitempty"`
	PreciseAbsTotalNetSurcharge    *dstore_values.DecimalValue   `protobuf:"bytes,10031,opt,name=precise_abs_total_net_surcharge,json=preciseAbsTotalNetSurcharge" json:"precise_abs_total_net_surcharge,omitempty"`
	TotalNetPrice                  *dstore_values.DecimalValue   `protobuf:"bytes,10032,opt,name=total_net_price,json=totalNetPrice" json:"total_net_price,omitempty"`
	Quantity                       *dstore_values.IntegerValue   `protobuf:"bytes,10033,opt,name=quantity" json:"quantity,omitempty"`
	UnitSymbol                     *dstore_values.StringValue    `protobuf:"bytes,10034,opt,name=unit_symbol,json=unitSymbol" json:"unit_symbol,omitempty"`
	QuantityPerBundleItemSetIdList *dstore_values.StringValue    `protobuf:"bytes,10035,opt,name=quantity_per_bundle_item_set_id_list,json=quantityPerBundleItemSetIdList" json:"quantity_per_bundle_item_set_id_list,omitempty"`
	SurchargeValue                 *dstore_values.DecimalValue   `protobuf:"bytes,10036,opt,name=surcharge_value,json=surchargeValue" json:"surcharge_value,omitempty"`
	CurrencyId                     *dstore_values.IntegerValue   `protobuf:"bytes,10037,opt,name=currency_id,json=currencyId" json:"currency_id,omitempty"`
	Active                         *dstore_values.BooleanValue   `protobuf:"bytes,10038,opt,name=active" json:"active,omitempty"`
	AbsoluteUnitNetSurcharge       *dstore_values.DecimalValue   `protobuf:"bytes,10039,opt,name=absolute_unit_net_surcharge,json=absoluteUnitNetSurcharge" json:"absolute_unit_net_surcharge,omitempty"`
	HTreeNodeId                    *dstore_values.IntegerValue   `protobuf:"bytes,10040,opt,name=h_tree_node_id,json=hTreeNodeId" json:"h_tree_node_id,omitempty"`
	AbsoluteUnitBruttoSurcharge    *dstore_values.DecimalValue   `protobuf:"bytes,10041,opt,name=absolute_unit_brutto_surcharge,json=absoluteUnitBruttoSurcharge" json:"absolute_unit_brutto_surcharge,omitempty"`
	AbsoluteUnitGrossSurcharge     *dstore_values.DecimalValue   `protobuf:"bytes,10042,opt,name=absolute_unit_gross_surcharge,json=absoluteUnitGrossSurcharge" json:"absolute_unit_gross_surcharge,omitempty"`
	PreciseTotalNetPrice           *dstore_values.DecimalValue   `protobuf:"bytes,10043,opt,name=precise_total_net_price,json=preciseTotalNetPrice" json:"precise_total_net_price,omitempty"`
	SurchargeTypeId                *dstore_values.IntegerValue   `protobuf:"bytes,10044,opt,name=surcharge_type_id,json=surchargeTypeId" json:"surcharge_type_id,omitempty"`
	PreciseUnitNetPrice            *dstore_values.DecimalValue   `protobuf:"bytes,10045,opt,name=precise_unit_net_price,json=preciseUnitNetPrice" json:"precise_unit_net_price,omitempty"`
	TotalGrossPrice                *dstore_values.DecimalValue   `protobuf:"bytes,10046,opt,name=total_gross_price,json=totalGrossPrice" json:"total_gross_price,omitempty"`
	PrePredecessorsLevelNo         *dstore_values.IntegerValue   `protobuf:"bytes,20011,opt,name=pre_predecessors_level_no,json=prePredecessorsLevelNo" json:"pre_predecessors_level_no,omitempty"`
	PrePredecessorsTreeNodeId      *dstore_values.IntegerValue   `protobuf:"bytes,20013,opt,name=pre_predecessors_tree_node_id,json=prePredecessorsTreeNodeId" json:"pre_predecessors_tree_node_id,omitempty"`
	PredecessorsTreeNodeId         *dstore_values.IntegerValue   `protobuf:"bytes,20028,opt,name=predecessors_tree_node_id,json=predecessorsTreeNodeId" json:"predecessors_tree_node_id,omitempty"`
	PredecessorsDescription        *dstore_values.StringValue    `protobuf:"bytes,20029,opt,name=predecessors_description,json=predecessorsDescription" json:"predecessors_description,omitempty"`
	PredecessorsLevelNo            *dstore_values.IntegerValue   `protobuf:"bytes,20032,opt,name=predecessors_level_no,json=predecessorsLevelNo" json:"predecessors_level_no,omitempty"`
	TreeNodeId                     *dstore_values.IntegerValue   `protobuf:"bytes,20039,opt,name=tree_node_id,json=treeNodeId" json:"tree_node_id,omitempty"`
	PrePredecessorsDescription     *dstore_values.StringValue    `protobuf:"bytes,20040,opt,name=pre_predecessors_description,json=prePredecessorsDescription" json:"pre_predecessors_description,omitempty"`
	InputDateAndTimeChar           *dstore_values.StringValue    `protobuf:"bytes,30007,opt,name=input_date_and_time_char,json=inputDateAndTimeChar" json:"input_date_and_time_char,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetTotalNettoPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.TotalNettoPrice
	}
	return nil
}

func (m *Response_Row) GetPreciseAbsUnitGrossSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseAbsUnitGrossSurcharge
	}
	return nil
}

func (m *Response_Row) GetPriceNodeCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PriceNodeCharacteristicId
	}
	return nil
}

func (m *Response_Row) GetAbsoluteUnitNettoSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.AbsoluteUnitNettoSurcharge
	}
	return nil
}

func (m *Response_Row) GetUnitGrossPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.UnitGrossPrice
	}
	return nil
}

func (m *Response_Row) GetAbsoluteTotalNetSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.AbsoluteTotalNetSurcharge
	}
	return nil
}

func (m *Response_Row) GetAbsoluteTotalGrossSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.AbsoluteTotalGrossSurcharge
	}
	return nil
}

func (m *Response_Row) GetRemoved() *dstore_values.IntegerValue {
	if m != nil {
		return m.Removed
	}
	return nil
}

func (m *Response_Row) GetUnitBruttoPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.UnitBruttoPrice
	}
	return nil
}

func (m *Response_Row) GetCurrencySymbol() *dstore_values.StringValue {
	if m != nil {
		return m.CurrencySymbol
	}
	return nil
}

func (m *Response_Row) GetPreciseUnitGrossPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseUnitGrossPrice
	}
	return nil
}

func (m *Response_Row) GetNodeDescription() *dstore_values.StringValue {
	if m != nil {
		return m.NodeDescription
	}
	return nil
}

func (m *Response_Row) GetUnitNetPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.UnitNetPrice
	}
	return nil
}

func (m *Response_Row) GetTotalBruttoPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.TotalBruttoPrice
	}
	return nil
}

func (m *Response_Row) GetPreciseAbsUnitNetSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseAbsUnitNetSurcharge
	}
	return nil
}

func (m *Response_Row) GetSurchargeReason() *dstore_values.StringValue {
	if m != nil {
		return m.SurchargeReason
	}
	return nil
}

func (m *Response_Row) GetAssociatedOrChosenTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.AssociatedOrChosenTreeNodeId
	}
	return nil
}

func (m *Response_Row) GetNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *Response_Row) GetDeleted() *dstore_values.BooleanValue {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *Response_Row) GetAbsoluteTotalNettoSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.AbsoluteTotalNettoSurcharge
	}
	return nil
}

func (m *Response_Row) GetBonusItemForItemSetId() *dstore_values.IntegerValue {
	if m != nil {
		return m.BonusItemForItemSetId
	}
	return nil
}

func (m *Response_Row) GetRelativeSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.RelativeSurcharge
	}
	return nil
}

func (m *Response_Row) GetAbsoluteTotalBruttoSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.AbsoluteTotalBruttoSurcharge
	}
	return nil
}

func (m *Response_Row) GetSurchargeGeneratedByCampIds() *dstore_values.StringValue {
	if m != nil {
		return m.SurchargeGeneratedByCampIds
	}
	return nil
}

func (m *Response_Row) GetPreciseTotalGrossPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseTotalGrossPrice
	}
	return nil
}

func (m *Response_Row) GetInputDateAndTime() *dstore_values.TimestampValue {
	if m != nil {
		return m.InputDateAndTime
	}
	return nil
}

func (m *Response_Row) GetUnitNettoPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.UnitNettoPrice
	}
	return nil
}

func (m *Response_Row) GetTaxesMultiplier() *dstore_values.DecimalValue {
	if m != nil {
		return m.TaxesMultiplier
	}
	return nil
}

func (m *Response_Row) GetPreciseAbsTotalGrossSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseAbsTotalGrossSurcharge
	}
	return nil
}

func (m *Response_Row) GetItemProperty() *dstore_values.StringValue {
	if m != nil {
		return m.ItemProperty
	}
	return nil
}

func (m *Response_Row) GetPreciseAbsTotalNetSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseAbsTotalNetSurcharge
	}
	return nil
}

func (m *Response_Row) GetTotalNetPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.TotalNetPrice
	}
	return nil
}

func (m *Response_Row) GetQuantity() *dstore_values.IntegerValue {
	if m != nil {
		return m.Quantity
	}
	return nil
}

func (m *Response_Row) GetUnitSymbol() *dstore_values.StringValue {
	if m != nil {
		return m.UnitSymbol
	}
	return nil
}

func (m *Response_Row) GetQuantityPerBundleItemSetIdList() *dstore_values.StringValue {
	if m != nil {
		return m.QuantityPerBundleItemSetIdList
	}
	return nil
}

func (m *Response_Row) GetSurchargeValue() *dstore_values.DecimalValue {
	if m != nil {
		return m.SurchargeValue
	}
	return nil
}

func (m *Response_Row) GetCurrencyId() *dstore_values.IntegerValue {
	if m != nil {
		return m.CurrencyId
	}
	return nil
}

func (m *Response_Row) GetActive() *dstore_values.BooleanValue {
	if m != nil {
		return m.Active
	}
	return nil
}

func (m *Response_Row) GetAbsoluteUnitNetSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.AbsoluteUnitNetSurcharge
	}
	return nil
}

func (m *Response_Row) GetHTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.HTreeNodeId
	}
	return nil
}

func (m *Response_Row) GetAbsoluteUnitBruttoSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.AbsoluteUnitBruttoSurcharge
	}
	return nil
}

func (m *Response_Row) GetAbsoluteUnitGrossSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.AbsoluteUnitGrossSurcharge
	}
	return nil
}

func (m *Response_Row) GetPreciseTotalNetPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseTotalNetPrice
	}
	return nil
}

func (m *Response_Row) GetSurchargeTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.SurchargeTypeId
	}
	return nil
}

func (m *Response_Row) GetPreciseUnitNetPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseUnitNetPrice
	}
	return nil
}

func (m *Response_Row) GetTotalGrossPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.TotalGrossPrice
	}
	return nil
}

func (m *Response_Row) GetPrePredecessorsLevelNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.PrePredecessorsLevelNo
	}
	return nil
}

func (m *Response_Row) GetPrePredecessorsTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PrePredecessorsTreeNodeId
	}
	return nil
}

func (m *Response_Row) GetPredecessorsTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PredecessorsTreeNodeId
	}
	return nil
}

func (m *Response_Row) GetPredecessorsDescription() *dstore_values.StringValue {
	if m != nil {
		return m.PredecessorsDescription
	}
	return nil
}

func (m *Response_Row) GetPredecessorsLevelNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.PredecessorsLevelNo
	}
	return nil
}

func (m *Response_Row) GetTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.TreeNodeId
	}
	return nil
}

func (m *Response_Row) GetPrePredecessorsDescription() *dstore_values.StringValue {
	if m != nil {
		return m.PrePredecessorsDescription
	}
	return nil
}

func (m *Response_Row) GetInputDateAndTimeChar() *dstore_values.StringValue {
	if m != nil {
		return m.InputDateAndTimeChar
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.om_GetTrolley_Pu.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.om_GetTrolley_Pu.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.om_GetTrolley_Pu.Response.Row")
}

func init() { proto.RegisterFile("dstore/engine/procedures/om_GetTrolley_Pu.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 2028 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x59, 0x59, 0x73, 0xdc, 0xc6,
	0x11, 0x2e, 0x45, 0x11, 0x49, 0x35, 0x25, 0x1e, 0xe0, 0x05, 0x72, 0x25, 0x8a, 0x56, 0xac, 0xaa,
	0x3c, 0xa4, 0x96, 0x29, 0xf9, 0x88, 0xab, 0x72, 0x92, 0x94, 0xcc, 0x6c, 0x62, 0xae, 0x97, 0x4b,
	0x32, 0xca, 0x8d, 0x60, 0x81, 0xd1, 0x2e, 0x4a, 0x58, 0xcc, 0x7a, 0x00, 0x90, 0xd9, 0x7f, 0x91,
	0xfb, 0x54, 0x2e, 0xe7, 0x8e, 0xe3, 0xdc, 0x89, 0x73, 0xd8, 0xa9, 0xbc, 0x25, 0xff, 0x23, 0x4f,
	0x71, 0xee, 0xd3, 0xaf, 0xe9, 0x99, 0xc1, 0x31, 0xc0, 0x2e, 0x89, 0x51, 0xf9, 0xc5, 0x32, 0x88,
	0xf9, 0xbe, 0xfe, 0xa6, 0xbb, 0xa7, 0xbb, 0x07, 0x0b, 0x9b, 0x6e, 0x18, 0x51, 0x46, 0x36, 0x49,
	0xd0, 0xf5, 0x02, 0xb2, 0x39, 0x60, 0xd4, 0x21, 0x6e, 0xcc, 0x48, 0xb8, 0x49, 0xfb, 0xd6, 0x2e,
	0x89, 0x0e, 0x19, 0xf5, 0x7d, 0x32, 0xb4, 0x5a, 0x71, 0x1d, 0xdf, 0x45, 0xd4, 0x58, 0x97, 0x80,
	0xba, 0x04, 0xd4, 0xcb, 0xab, 0xd6, 0x16, 0x12, 0xc2, 0x63, 0xdb, 0x8f, 0x49, 0x28, 0x41, 0x6b,
	0xab, 0x45, 0x2b, 0x84, 0x31, 0xca, 0x92, 0x57, 0xb5, 0xe2, 0xab, 0x3e, 0x09, 0x43, 0xbb, 0x4b,
	0x92, 0x97, 0xaf, 0x2b, 0xbf, 0x8c, 0x6c, 0x2f, 0xb8, 0x4b, 0x59, 0xdf, 0x8e, 0x3c, 0x1a, 0xc8,
	0x45, 0xd7, 0x9f, 0x9d, 0x03, 0x68, 0xd9, 0xcc, 0xc6, 0xb7, 0x84, 0x85, 0xc6, 0x9b, 0xe0, 0x62,
	0x1c, 0x78, 0xcf, 0xc4, 0xc4, 0xf2, 0x5c, 0xf3, 0xdc, 0xc6, 0xb9, 0xd7, 0x4f, 0xdf, 0x5c, 0xab,
	0x27, 0xa2, 0x13, 0x51, 0x61, 0xc4, 0xbc, 0xa0, 0xfb, 0x1e, 0xfe, 0xd0, 0x9e, 0x92, 0x8b, 0x1b,
	0xae, 0x71, 0x03, 0x66, 0x32, 0xa0, 0x15, 0xc4, 0xbe, 0x6f, 0xfe, 0x69, 0x12, 0xe1, 0x53, 0xed,
	0x4b, 0xe9, 0x92, 0x26, 0xfe, 0xd1, 0x78, 0x02, 0x2e, 0x0e, 0xd0, 0x0e, 0x0d, 0x38, 0xff, 0x6b,
	0x04, 0x7f, 0xad, 0xc4, 0xef, 0x05, 0x11, 0xe9, 0x12, 0x96, 0x18, 0x90, 0xab, 0xa5, 0x81, 0x0c,
	0x29, 0x0d, 0xbc, 0x9c, 0x18, 0x48, 0x97, 0x08, 0x03, 0x4f, 0xc2, 0x9c, 0x63, 0xfb, 0x4e, 0xec,
	0xdb, 0x11, 0xb1, 0x06, 0xcc, 0x73, 0x48, 0x68, 0x9e, 0xaf, 0xb6, 0x33, 0x9b, 0x81, 0x5a, 0x02,
	0x63, 0x3c, 0x02, 0x4b, 0x65, 0x1e, 0x69, 0xf5, 0xcf, 0xd2, 0xea, 0x42, 0x09, 0x20, 0x8c, 0xbf,
	0x0b, 0x0c, 0xa7, 0x47, 0x9c, 0x7b, 0x96, 0x7d, 0x6c, 0x7b, 0xbe, 0xdd, 0xf1, 0x7c, 0x2f, 0x1a,
	0x9a, 0xaf, 0x1d, 0x6b, 0xbe, 0x43, 0xa9, 0x4f, 0xec, 0x40, 0x9a, 0x9f, 0x17, 0xb0, 0x2d, 0x05,
	0x85, 0x91, 0x58, 0x19, 0xe5, 0x92, 0x12, 0xfe, 0x22, 0x25, 0x2c, 0x8d, 0x80, 0x84, 0x88, 0x77,
	0xc2, 0x7c, 0xd8, 0xa3, 0x27, 0x96, 0x4b, 0x42, 0x87, 0x79, 0x03, 0x1e, 0xeb, 0xd0, 0xbc, 0x50,
	0xad, 0x61, 0x8e, 0xa3, 0x6e, 0x29, 0x20, 0xe3, 0x31, 0x58, 0x1e, 0x61, 0x92, 0x0a, 0xfe, 0x2a,
	0x15, 0x2c, 0x96, 0x21, 0x42, 0xc0, 0x07, 0xe1, 0x8a, 0x70, 0x98, 0x15, 0x50, 0x97, 0x58, 0x4e,
	0x0f, 0xb3, 0xcb, 0xc1, 0xe4, 0xf2, 0xc2, 0xc8, 0x73, 0x78, 0xd8, 0x27, 0xaa, 0xc3, 0xb1, 0x2a,
	0x08, 0x9a, 0x88, 0xdf, 0x29, 0xc0, 0x31, 0x0f, 0x1a, 0xf0, 0xd0, 0x59, 0xec, 0x52, 0xdf, 0xdf,
	0xa4, 0xbe, 0xab, 0xa7, 0xd2, 0x08, 0xa1, 0xfb, 0xb0, 0x7c, 0x8a, 0xc4, 0xc9, 0x6a, 0x89, 0x8b,
	0xc1, 0x38, 0x75, 0x6f, 0x83, 0xda, 0x59, 0xba, 0xfe, 0x2e, 0x75, 0x99, 0xc1, 0x69, 0x92, 0x9a,
	0xb0, 0xe8, 0x05, 0x8e, 0x1f, 0xbb, 0x3c, 0xe9, 0x88, 0x4b, 0x30, 0xb3, 0x42, 0xca, 0x42, 0x73,
	0xaa, 0x3a, 0x7e, 0x0b, 0x09, 0xb0, 0xa5, 0xe0, 0x8c, 0x37, 0xc3, 0xea, 0x38, 0x3e, 0xa9, 0xe6,
	0x1f, 0x52, 0xcd, 0xca, 0x18, 0x60, 0x1a, 0x48, 0x9f, 0xd2, 0x7b, 0x16, 0xd6, 0x0c, 0x44, 0x53,
	0x37, 0x76, 0x22, 0x35, 0x17, 0xcc, 0x8b, 0xd5, 0xa2, 0x56, 0x39, 0xc1, 0x93, 0x94, 0xb5, 0x24,
	0x5c, 0xc9, 0x15, 0x1e, 0xc8, 0xb3, 0xd8, 0xa5, 0xc4, 0x7f, 0x26, 0x81, 0x3c, 0x95, 0x46, 0x08,
	0xed, 0xc0, 0x06, 0x23, 0x03, 0xdb, 0x63, 0x16, 0x09, 0xb0, 0x3a, 0xe1, 0x51, 0x3d, 0xf1, 0xa2,
	0x9e, 0x15, 0x62, 0x55, 0x93, 0x69, 0x82, 0x21, 0x85, 0xea, 0x90, 0xd6, 0x24, 0xc9, 0x6d, 0xc9,
	0x71, 0x07, 0x29, 0x0e, 0x90, 0x81, 0xa7, 0x0f, 0x46, 0xf6, 0x69, 0xb8, 0x51, 0x65, 0x43, 0x4a,
	0xfe, 0x97, 0x94, 0x7c, 0xed, 0x0c, 0x32, 0x21, 0x7a, 0x17, 0xe6, 0xbb, 0x24, 0xb2, 0x06, 0x3e,
	0x56, 0x65, 0x2b, 0x92, 0x3d, 0xc0, 0x9c, 0xae, 0x76, 0xe9, 0x2c, 0xa2, 0x5a, 0x1c, 0x94, 0xf4,
	0x0d, 0xe3, 0x51, 0x58, 0x1e, 0x21, 0x92, 0x52, 0xfe, 0x9d, 0xd4, 0xaa, 0x12, 0x42, 0x98, 0x6f,
	0x80, 0xe1, 0x12, 0xdf, 0x3b, 0x26, 0x6c, 0x68, 0xe5, 0x25, 0xf9, 0x52, 0xb5, 0x97, 0xe6, 0x52,
	0x58, 0x2b, 0x2d, 0xcd, 0x8f, 0xc3, 0xca, 0x28, 0x95, 0x54, 0xf0, 0x9f, 0xa4, 0x50, 0x94, 0x31,
	0x42, 0x82, 0x03, 0x1b, 0x34, 0x8e, 0x06, 0x71, 0x64, 0xa1, 0x01, 0x9a, 0x49, 0x0f, 0x63, 0xe6,
	0xf4, 0xf8, 0x9f, 0x08, 0xbb, 0x6b, 0x5e, 0xae, 0x76, 0xc8, 0x15, 0x49, 0xd2, 0x40, 0x8e, 0x64,
	0x83, 0x07, 0x9c, 0xa1, 0x21, 0x08, 0x8c, 0x16, 0xdc, 0xa8, 0x32, 0x22, 0xa5, 0xfe, 0x57, 0x4a,
	0xdd, 0x38, 0x8b, 0x4d, 0xc8, 0xde, 0x81, 0xd9, 0x81, 0x3d, 0xec, 0x63, 0x1a, 0x58, 0xd1, 0x70,
	0x20, 0x92, 0x6b, 0xa6, 0xda, 0x6d, 0x97, 0x13, 0xcc, 0x21, 0x42, 0xd0, 0x67, 0x6f, 0x84, 0xc5,
	0x12, 0x89, 0x54, 0xf1, 0x3f, 0xa9, 0x62, 0xbe, 0xb0, 0x5a, 0x98, 0xbd, 0x0d, 0x58, 0xa1, 0xbd,
	0xc1, 0x00, 0x9b, 0x6f, 0x66, 0x77, 0xb6, 0xda, 0xee, 0x4c, 0x0a, 0x4a, 0x0c, 0xdf, 0x84, 0xa5,
	0x32, 0x8d, 0xb4, 0xfc, 0x8a, 0xb4, 0x6c, 0x14, 0xd7, 0x73, 0xd3, 0xd7, 0x5f, 0x79, 0x18, 0xa6,
	0xda, 0x24, 0x1c, 0x60, 0x85, 0x27, 0xa8, 0xfc, 0x82, 0x18, 0x41, 0xca, 0xe3, 0x41, 0x32, 0xd3,
	0xc8, 0xf1, 0xe4, 0x36, 0xff, 0x6f, 0x5b, 0x2e, 0x34, 0xde, 0x07, 0x73, 0x7c, 0xf8, 0xb0, 0x94,
	0xe9, 0x03, 0x7b, 0xff, 0x79, 0x04, 0xd7, 0x4b, 0xe0, 0xf2, 0x8c, 0xb2, 0x87, 0xcf, 0x8d, 0xfc,
	0xb9, 0x3d, 0xdb, 0x2f, 0xfe, 0x01, 0xe7, 0x89, 0xc9, 0x64, 0xe8, 0xc1, 0x2e, 0xcf, 0x19, 0xd7,
	0x47, 0x18, 0xe5, 0x48, 0xb4, 0x27, 0xff, 0x6d, 0xa7, 0xcb, 0xb1, 0x52, 0x9f, 0x67, 0xf4, 0x04,
	0x9b, 0x33, 0x47, 0xbd, 0xa1, 0x7e, 0xf6, 0x60, 0x56, 0x4f, 0x77, 0x5f, 0x6f, 0xd3, 0x93, 0x36,
	0x07, 0xae, 0xfd, 0xf1, 0x3a, 0x9c, 0xc7, 0x07, 0x63, 0x19, 0x26, 0xf0, 0x91, 0x07, 0xe3, 0x63,
	0x4d, 0x74, 0xc8, 0x85, 0xf6, 0x05, 0x7c, 0x44, 0x3f, 0x63, 0x1b, 0x8e, 0x68, 0x64, 0xfb, 0x56,
	0x40, 0x22, 0xcc, 0x3b, 0xd1, 0x89, 0xcc, 0x8f, 0x37, 0xc7, 0x06, 0x0c, 0xcb, 0xae, 0xd7, 0xb7,
	0xfd, 0xe4, 0x7c, 0x0b, 0x58, 0x93, 0xa3, 0xc4, 0x68, 0x61, 0xb8, 0xb0, 0x81, 0xb5, 0xdb, 0xf1,
	0x42, 0x62, 0xd9, 0x9d, 0xd0, 0xc2, 0x79, 0x2a, 0xb2, 0xba, 0x8c, 0x86, 0xa1, 0x4c, 0x62, 0x9b,
	0xe1, 0xe6, 0x3f, 0xa1, 0x41, 0x7c, 0x25, 0x61, 0xd9, 0xea, 0x84, 0x47, 0xc8, 0xb1, 0xcb, 0x29,
	0x0e, 0x52, 0x06, 0xe3, 0x43, 0x15, 0x5d, 0xfb, 0x93, 0xcd, 0x57, 0xd5, 0xb6, 0x2d, 0xb8, 0x8a,
	0xe2, 0xa9, 0x1f, 0xe3, 0x38, 0x25, 0x76, 0x20, 0xdd, 0x92, 0xef, 0xe0, 0x53, 0x1a, 0x3b, 0x58,
	0x4b, 0x29, 0xb8, 0x7e, 0xe1, 0xa1, 0x5c, 0x3f, 0x0e, 0x7e, 0x8a, 0x67, 0xa4, 0xbb, 0x3f, 0xad,
	0xc1, 0xc9, 0xc7, 0x56, 0xe9, 0x0b, 0xe9, 0x6d, 0xf4, 0x43, 0x26, 0x34, 0x0b, 0xa0, 0xa2, 0xf3,
	0x33, 0x1a, 0x9c, 0xab, 0x29, 0xc3, 0x61, 0x12, 0xca, 0x5c, 0xa6, 0x0d, 0xeb, 0x25, 0xfa, 0x72,
	0x28, 0x3f, 0xab, 0x61, 0xa0, 0x56, 0x30, 0x50, 0x8a, 0xe4, 0xe3, 0x30, 0xc9, 0x48, 0x9f, 0x1e,
	0x13, 0xd7, 0xfc, 0x9c, 0x46, 0xd0, 0xd2, 0xc5, 0x3c, 0x63, 0x85, 0x07, 0x3b, 0x2c, 0xce, 0x33,
	0xf6, 0xf3, 0x3a, 0x19, 0xcb, 0x61, 0xdb, 0x02, 0x25, 0x7d, 0x78, 0x0b, 0x66, 0x9d, 0x98, 0x31,
	0x12, 0x38, 0x58, 0x68, 0x87, 0xfd, 0x0e, 0xf5, 0xcd, 0x2f, 0x34, 0x2b, 0x2f, 0x13, 0x33, 0x29,
	0xe6, 0x40, 0x40, 0x8c, 0x23, 0x30, 0xd3, 0xbc, 0x1f, 0x89, 0xec, 0x17, 0x35, 0x64, 0x2d, 0x25,
	0xe8, 0xa3, 0x62, 0x80, 0x31, 0x51, 0x44, 0x8a, 0xab, 0x93, 0xcc, 0xfd, 0x6a, 0x75, 0xb3, 0x1c,
	0xa4, 0xce, 0x2f, 0xdb, 0xe2, 0xc6, 0x23, 0x12, 0x39, 0x11, 0xf5, 0x25, 0x0d, 0x51, 0xfc, 0x3a,
	0xc4, 0x53, 0x57, 0x6a, 0xc1, 0x0b, 0x83, 0x4c, 0x82, 0x82, 0xcf, 0xbf, 0xac, 0xc1, 0x33, 0x27,
	0x70, 0xaa, 0xd3, 0x3f, 0x02, 0xeb, 0x23, 0x65, 0xa2, 0x98, 0xba, 0x5f, 0xd1, 0x39, 0x62, 0xc5,
	0x22, 0x51, 0xc8, 0x5d, 0xf4, 0x5c, 0x46, 0x66, 0x31, 0x62, 0x63, 0x27, 0x37, 0xbf, 0xaa, 0xe1,
	0xb9, 0x0c, 0xd4, 0x16, 0x18, 0x83, 0xc0, 0x43, 0x36, 0x4e, 0x99, 0x8e, 0x87, 0xb7, 0x27, 0xd7,
	0xc2, 0xf1, 0xcf, 0xe9, 0xd1, 0x90, 0xf0, 0xd9, 0x85, 0xe4, 0xf3, 0xda, 0xd7, 0x34, 0x52, 0xf7,
	0x4a, 0x4e, 0xf3, 0x34, 0xdb, 0x11, 0x24, 0x87, 0xc8, 0x91, 0x4c, 0x6c, 0x8f, 0xc1, 0x64, 0x4a,
	0xf6, 0xac, 0x06, 0xd9, 0x44, 0x20, 0x61, 0x78, 0x7c, 0x70, 0x5a, 0xc1, 0xeb, 0xb0, 0x6b, 0x7e,
	0xbd, 0x59, 0x3d, 0x7d, 0xa4, 0x8b, 0xc7, 0x9c, 0xec, 0x72, 0x89, 0xfb, 0xc6, 0x03, 0x9f, 0xec,
	0x52, 0x8d, 0xbb, 0x03, 0x6b, 0x1d, 0x1a, 0xc4, 0xa1, 0xe5, 0x45, 0xa4, 0x2f, 0x06, 0x67, 0xf1,
	0x3f, 0x21, 0x46, 0x19, 0x37, 0xf9, 0x4d, 0x8d, 0x4d, 0x2e, 0x09, 0x7c, 0x03, 0x51, 0x38, 0x4d,
	0xf3, 0x7f, 0x0e, 0x48, 0x84, 0x7b, 0x7e, 0x37, 0x18, 0x8c, 0xe0, 0x65, 0x16, 0x67, 0x34, 0x45,
	0xef, 0xb7, 0x34, 0xf4, 0xce, 0xa7, 0xb8, 0x5c, 0xa5, 0x03, 0xd7, 0x4a, 0x8e, 0x48, 0xb2, 0x3b,
	0x67, 0xfe, 0xb6, 0x4e, 0xbb, 0x2a, 0x78, 0x42, 0x66, 0xba, 0x5a, 0x47, 0xaf, 0xe5, 0xb9, 0xd8,
	0x25, 0x01, 0x61, 0x22, 0x99, 0x3a, 0x43, 0xcb, 0xb1, 0xfb, 0x03, 0x74, 0x47, 0x68, 0x7e, 0xa7,
	0x3a, 0x35, 0x6b, 0x19, 0xc7, 0x6e, 0x4a, 0xb1, 0x3d, 0xdc, 0x41, 0x82, 0x86, 0x1b, 0xa2, 0xb7,
	0x57, 0xd3, 0x03, 0xa5, 0x56, 0x6a, 0x79, 0x46, 0xbf, 0xab, 0xb1, 0x83, 0xe5, 0x04, 0x9e, 0x17,
	0x69, 0x79, 0x52, 0xf7, 0x00, 0xef, 0x6a, 0x7c, 0x22, 0x75, 0xf9, 0xc7, 0x05, 0x3b, 0x70, 0xad,
	0xc8, 0xeb, 0x13, 0xf3, 0x7b, 0x92, 0xf2, 0x6a, 0x89, 0x92, 0xbf, 0x0b, 0x23, 0xd4, 0x94, 0x1c,
	0x7c, 0x01, 0xbd, 0x85, 0xc8, 0xad, 0xc0, 0x3d, 0xc4, 0x77, 0x59, 0xe7, 0x53, 0x07, 0x8d, 0xe7,
	0x74, 0x3b, 0x9f, 0x32, 0x67, 0xec, 0xc2, 0x5c, 0x64, 0x7f, 0x14, 0x2f, 0x36, 0xfd, 0xd8, 0x8f,
	0xbc, 0x81, 0xef, 0x11, 0x66, 0x7e, 0x5f, 0x6b, 0x60, 0xe1, 0xa8, 0xbd, 0x0c, 0x64, 0xdc, 0xe5,
	0x57, 0xf4, 0xbc, 0x12, 0x8d, 0x6f, 0x73, 0xcf, 0x6b, 0x30, 0x5f, 0xcd, 0x8b, 0xd1, 0xb8, 0x46,
	0xf7, 0x0e, 0xb8, 0x2c, 0xf2, 0x1f, 0x6f, 0x8f, 0x78, 0xed, 0x88, 0x86, 0xe6, 0x0f, 0xaa, 0x23,
	0x7e, 0x89, 0x23, 0x5a, 0x09, 0x00, 0x2f, 0x8e, 0xd7, 0x46, 0x95, 0x16, 0x8b, 0xe6, 0x0f, 0x75,
	0x0e, 0x6d, 0x49, 0x67, 0xa1, 0x6a, 0x62, 0x33, 0xcc, 0x79, 0x65, 0x74, 0x7e, 0xa4, 0xc1, 0x79,
	0x39, 0x1d, 0x03, 0x65, 0x70, 0x9e, 0x80, 0xa9, 0x67, 0x62, 0x3b, 0x88, 0xf8, 0x07, 0xa5, 0x1f,
	0x6b, 0x1c, 0xf4, 0x6c, 0xb5, 0xf1, 0x16, 0x98, 0x16, 0xe9, 0x91, 0x34, 0xe2, 0x9f, 0x54, 0xfb,
	0x08, 0xf8, 0xfa, 0xa4, 0x09, 0x7b, 0xf0, 0x70, 0xca, 0xc4, 0xef, 0x76, 0x56, 0x27, 0x0e, 0x5c,
	0x9f, 0xa8, 0x75, 0xc7, 0xf2, 0x71, 0xc6, 0x33, 0x7f, 0x5a, 0x4d, 0xbb, 0x9e, 0x12, 0xe1, 0x25,
	0x70, 0x5b, 0xd0, 0x64, 0x05, 0xe8, 0x29, 0xa4, 0xc0, 0x0b, 0x4e, 0xde, 0x29, 0x2c, 0x81, 0x37,
	0x7f, 0xa6, 0x93, 0xc6, 0x19, 0x48, 0x3c, 0x1b, 0x6f, 0x85, 0xe9, 0x6c, 0xf8, 0xc0, 0xaa, 0xf8,
	0x73, 0x0d, 0x67, 0x41, 0x0a, 0xc0, 0x52, 0xf8, 0x28, 0x4c, 0xe0, 0xe0, 0x8a, 0x05, 0xcd, 0xfc,
	0x85, 0x46, 0xf5, 0x4f, 0xd6, 0x1a, 0x1f, 0x80, 0xda, 0xc8, 0x78, 0xab, 0x24, 0xd1, 0x0b, 0x1a,
	0xfb, 0x30, 0x4b, 0xc3, 0x6d, 0x9e, 0x41, 0x5b, 0x30, 0xd3, 0x2b, 0x36, 0xc7, 0x5f, 0x6a, 0x6c,
	0x6a, 0xba, 0xa7, 0xf4, 0x42, 0xb5, 0x39, 0xa9, 0x43, 0x5e, 0x2e, 0xf1, 0x57, 0x0f, 0xd2, 0x9c,
	0x8e, 0xb2, 0x81, 0x2f, 0x57, 0x39, 0x32, 0xe1, 0x97, 0x4f, 0xfc, 0xaf, 0x1f, 0x74, 0xc2, 0x2f,
	0x1d, 0xf7, 0x03, 0x58, 0x29, 0xd6, 0xe3, 0xfc, 0x40, 0xfd, 0x46, 0x83, 0x7a, 0x51, 0xad, 0xc6,
	0xd9, 0xb9, 0xe2, 0x5f, 0x4b, 0xb3, 0xa4, 0x4b, 0xaf, 0xd5, 0x2f, 0x6a, 0xb8, 0x37, 0xcf, 0xd5,
	0xe4, 0x62, 0xbd, 0x0f, 0xcb, 0x85, 0x71, 0x35, 0x57, 0xf7, 0x92, 0x86, 0xba, 0x05, 0x65, 0x58,
	0x55, 0xc5, 0x8d, 0x76, 0x9e, 0xdf, 0x6a, 0xdf, 0x21, 0x95, 0x96, 0xf3, 0x5e, 0xd1, 0xcb, 0x8a,
	0xdf, 0x00, 0x7d, 0x72, 0x4c, 0xd0, 0x89, 0xd4, 0x7c, 0xee, 0xfe, 0xb9, 0xea, 0xfd, 0xf2, 0xcd,
	0xa9, 0x5f, 0x08, 0x9f, 0xe2, 0xe8, 0x26, 0xe5, 0x61, 0x1f, 0x61, 0x2e, 0xe4, 0xea, 0xf3, 0x3a,
	0xec, 0xab, 0x25, 0x76, 0x25, 0x75, 0xa5, 0xf4, 0x53, 0xc8, 0x5f, 0xd4, 0x95, 0x3e, 0x8e, 0xf9,
	0x8e, 0xb8, 0x60, 0xe4, 0xcc, 0xea, 0x8d, 0xe0, 0xa5, 0xfb, 0xd5, 0xbf, 0x7e, 0xac, 0xa8, 0x68,
	0xf5, 0x6a, 0xb0, 0x0f, 0x4b, 0xe3, 0x3d, 0xfd, 0x3b, 0x1d, 0xb9, 0x0b, 0x83, 0x31, 0x6e, 0x7e,
	0x3b, 0x5c, 0x2a, 0x6c, 0xfc, 0xf7, 0x3a, 0x4c, 0x10, 0xe5, 0x9b, 0xfd, 0x30, 0xbf, 0xdf, 0x97,
	0xe2, 0xa4, 0x6e, 0xf8, 0x0f, 0x1a, 0x1b, 0x5e, 0x2b, 0x45, 0x49, 0xdd, 0xf3, 0x21, 0x98, 0x63,
	0x86, 0x1a, 0xf1, 0x21, 0xc1, 0x7c, 0xe1, 0xe5, 0x6a, 0xee, 0xc5, 0xf2, 0x5c, 0xc3, 0x3f, 0x21,
	0x6c, 0xef, 0x43, 0xcd, 0xa3, 0xa5, 0x8f, 0x33, 0xf9, 0xcf, 0x6c, 0xef, 0xbf, 0xd9, 0xa5, 0xa1,
	0x7b, 0x2f, 0x7d, 0xef, 0xea, 0xfc, 0x12, 0xd7, 0x99, 0x10, 0x3f, 0x7c, 0x3d, 0xf2, 0xff, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xed, 0x48, 0xe0, 0xed, 0xbd, 0x1b, 0x00, 0x00,
}
