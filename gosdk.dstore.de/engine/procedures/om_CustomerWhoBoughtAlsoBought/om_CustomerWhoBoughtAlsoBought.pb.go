// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/om_CustomerWhoBoughtAlsoBought.proto
// DO NOT EDIT!

/*
Package om_CustomerWhoBoughtAlsoBought is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/om_CustomerWhoBoughtAlsoBought.proto

It has these top-level messages:
	Parameters
	Response
*/
package om_CustomerWhoBoughtAlsoBought

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "gosdk.dstore.de/values"
import dstore_engine_error "gosdk.dstore.de/engine/error"
import dstore_engine_message "gosdk.dstore.de/engine/message"
import dstore_engine_metainformation "gosdk.dstore.de/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	VariantOrItemNo                 *dstore_values.StringValue    `protobuf:"bytes,1,opt,name=variant_or_item_no,json=variantOrItemNo" json:"variant_or_item_no,omitempty"`
	VariantOrItemNoNull             bool                          `protobuf:"varint,1001,opt,name=variant_or_item_no_null,json=variantOrItemNoNull" json:"variant_or_item_no_null,omitempty"`
	IncludeSiblingVariants          *dstore_values.BooleanValue   `protobuf:"bytes,2,opt,name=include_sibling_variants,json=includeSiblingVariants" json:"include_sibling_variants,omitempty"`
	IncludeSiblingVariantsNull      bool                          `protobuf:"varint,1002,opt,name=include_sibling_variants_null,json=includeSiblingVariantsNull" json:"include_sibling_variants_null,omitempty"`
	FromDate                        *dstore_values.TimestampValue `protobuf:"bytes,3,opt,name=from_date,json=fromDate" json:"from_date,omitempty"`
	FromDateNull                    bool                          `protobuf:"varint,1003,opt,name=from_date_null,json=fromDateNull" json:"from_date_null,omitempty"`
	ToDate                          *dstore_values.TimestampValue `protobuf:"bytes,4,opt,name=to_date,json=toDate" json:"to_date,omitempty"`
	ToDateNull                      bool                          `protobuf:"varint,1004,opt,name=to_date_null,json=toDateNull" json:"to_date_null,omitempty"`
	OnlyActive                      *dstore_values.BooleanValue   `protobuf:"bytes,5,opt,name=only_active,json=onlyActive" json:"only_active,omitempty"`
	OnlyActiveNull                  bool                          `protobuf:"varint,1005,opt,name=only_active_null,json=onlyActiveNull" json:"only_active_null,omitempty"`
	GetAdditionalInfo               *dstore_values.BooleanValue   `protobuf:"bytes,6,opt,name=get_additional_info,json=getAdditionalInfo" json:"get_additional_info,omitempty"`
	GetAdditionalInfoNull           bool                          `protobuf:"varint,1006,opt,name=get_additional_info_null,json=getAdditionalInfoNull" json:"get_additional_info_null,omitempty"`
	FilterByCharacteristicId        *dstore_values.IntegerValue   `protobuf:"bytes,7,opt,name=filter_by_characteristic_id,json=filterByCharacteristicId" json:"filter_by_characteristic_id,omitempty"`
	FilterByCharacteristicIdNull    bool                          `protobuf:"varint,1007,opt,name=filter_by_characteristic_id_null,json=filterByCharacteristicIdNull" json:"filter_by_characteristic_id_null,omitempty"`
	FilterByCharacValue             *dstore_values.StringValue    `protobuf:"bytes,8,opt,name=filter_by_charac_value,json=filterByCharacValue" json:"filter_by_charac_value,omitempty"`
	FilterByCharacValueNull         bool                          `protobuf:"varint,1008,opt,name=filter_by_charac_value_null,json=filterByCharacValueNull" json:"filter_by_charac_value_null,omitempty"`
	NegateFilterByParams            *dstore_values.BooleanValue   `protobuf:"bytes,9,opt,name=negate_filter_by_params,json=negateFilterByParams" json:"negate_filter_by_params,omitempty"`
	NegateFilterByParamsNull        bool                          `protobuf:"varint,1009,opt,name=negate_filter_by_params_null,json=negateFilterByParamsNull" json:"negate_filter_by_params_null,omitempty"`
	IncludeVariantOrItemNoNodes     *dstore_values.BooleanValue   `protobuf:"bytes,10,opt,name=include_variant_or_item_no_nodes,json=includeVariantOrItemNoNodes" json:"include_variant_or_item_no_nodes,omitempty"`
	IncludeVariantOrItemNoNodesNull bool                          `protobuf:"varint,1010,opt,name=include_variant_or_item_no_nodes_null,json=includeVariantOrItemNoNodesNull" json:"include_variant_or_item_no_nodes_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetVariantOrItemNo() *dstore_values.StringValue {
	if m != nil {
		return m.VariantOrItemNo
	}
	return nil
}

func (m *Parameters) GetIncludeSiblingVariants() *dstore_values.BooleanValue {
	if m != nil {
		return m.IncludeSiblingVariants
	}
	return nil
}

func (m *Parameters) GetFromDate() *dstore_values.TimestampValue {
	if m != nil {
		return m.FromDate
	}
	return nil
}

func (m *Parameters) GetToDate() *dstore_values.TimestampValue {
	if m != nil {
		return m.ToDate
	}
	return nil
}

func (m *Parameters) GetOnlyActive() *dstore_values.BooleanValue {
	if m != nil {
		return m.OnlyActive
	}
	return nil
}

func (m *Parameters) GetGetAdditionalInfo() *dstore_values.BooleanValue {
	if m != nil {
		return m.GetAdditionalInfo
	}
	return nil
}

func (m *Parameters) GetFilterByCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.FilterByCharacteristicId
	}
	return nil
}

func (m *Parameters) GetFilterByCharacValue() *dstore_values.StringValue {
	if m != nil {
		return m.FilterByCharacValue
	}
	return nil
}

func (m *Parameters) GetNegateFilterByParams() *dstore_values.BooleanValue {
	if m != nil {
		return m.NegateFilterByParams
	}
	return nil
}

func (m *Parameters) GetIncludeVariantOrItemNoNodes() *dstore_values.BooleanValue {
	if m != nil {
		return m.IncludeVariantOrItemNoNodes
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId              int32                       `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	Category           *dstore_values.StringValue  `protobuf:"bytes,10001,opt,name=category" json:"category,omitempty"`
	Counter            *dstore_values.IntegerValue `protobuf:"bytes,10002,opt,name=counter" json:"counter,omitempty"`
	NodeId             *dstore_values.IntegerValue `protobuf:"bytes,10003,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	TreeNodeId         *dstore_values.IntegerValue `protobuf:"bytes,10004,opt,name=tree_node_id,json=treeNodeId" json:"tree_node_id,omitempty"`
	Product            *dstore_values.StringValue  `protobuf:"bytes,10005,opt,name=product" json:"product,omitempty"`
	Domain             *dstore_values.StringValue  `protobuf:"bytes,10006,opt,name=domain" json:"domain,omitempty"`
	CategoryTreeNodeId *dstore_values.IntegerValue `protobuf:"bytes,20001,opt,name=category_tree_node_id,json=categoryTreeNodeId" json:"category_tree_node_id,omitempty"`
	Active             *dstore_values.BooleanValue `protobuf:"bytes,20002,opt,name=active" json:"active,omitempty"`
	LevelNo            *dstore_values.IntegerValue `protobuf:"bytes,20005,opt,name=level_no,json=levelNo" json:"level_no,omitempty"`
	DomainTreeNodeId   *dstore_values.IntegerValue `protobuf:"bytes,20006,opt,name=domain_tree_node_id,json=domainTreeNodeId" json:"domain_tree_node_id,omitempty"`
	LevelId            *dstore_values.IntegerValue `protobuf:"bytes,20011,opt,name=level_id,json=levelId" json:"level_id,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetCategory() *dstore_values.StringValue {
	if m != nil {
		return m.Category
	}
	return nil
}

func (m *Response_Row) GetCounter() *dstore_values.IntegerValue {
	if m != nil {
		return m.Counter
	}
	return nil
}

func (m *Response_Row) GetNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *Response_Row) GetTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.TreeNodeId
	}
	return nil
}

func (m *Response_Row) GetProduct() *dstore_values.StringValue {
	if m != nil {
		return m.Product
	}
	return nil
}

func (m *Response_Row) GetDomain() *dstore_values.StringValue {
	if m != nil {
		return m.Domain
	}
	return nil
}

func (m *Response_Row) GetCategoryTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.CategoryTreeNodeId
	}
	return nil
}

func (m *Response_Row) GetActive() *dstore_values.BooleanValue {
	if m != nil {
		return m.Active
	}
	return nil
}

func (m *Response_Row) GetLevelNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.LevelNo
	}
	return nil
}

func (m *Response_Row) GetDomainTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.DomainTreeNodeId
	}
	return nil
}

func (m *Response_Row) GetLevelId() *dstore_values.IntegerValue {
	if m != nil {
		return m.LevelId
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.om_CustomerWhoBoughtAlsoBought.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.om_CustomerWhoBoughtAlsoBought.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.om_CustomerWhoBoughtAlsoBought.Response.Row")
}

func init() {
	proto.RegisterFile("dstore/engine/procedures/om_CustomerWhoBoughtAlsoBought.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 943 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x96, 0x5b, 0x6f, 0x1c, 0x35,
	0x14, 0xc7, 0x15, 0xc2, 0x5e, 0x7a, 0x5a, 0xb5, 0xc1, 0x4b, 0x13, 0xb3, 0xdb, 0x42, 0x28, 0xaa,
	0x04, 0x12, 0xda, 0x20, 0x2a, 0x2e, 0xaa, 0x28, 0x90, 0x94, 0x8b, 0x56, 0xb4, 0xdb, 0x6a, 0x80,
	0x20, 0xfa, 0x62, 0xcd, 0xce, 0x38, 0x93, 0x11, 0xb3, 0xe3, 0xc8, 0xe3, 0x4d, 0x95, 0x6f, 0xc1,
	0xfd, 0x89, 0x17, 0x90, 0xe0, 0x85, 0xaf, 0xc0, 0xc7, 0xe0, 0x99, 0x77, 0xee, 0x97, 0x4f, 0xc0,
	0xb1, 0x8f, 0x27, 0xc9, 0x4e, 0x76, 0x33, 0x9b, 0x97, 0x36, 0x5e, 0x9f, 0xff, 0xff, 0xfc, 0x3c,
	0xf6, 0x39, 0x36, 0xdc, 0x8a, 0x0b, 0xa3, 0xb4, 0xdc, 0x90, 0x79, 0x92, 0xe6, 0x72, 0x63, 0x4f,
	0xab, 0x48, 0xc6, 0x13, 0x2d, 0x8b, 0x0d, 0x35, 0x16, 0xb7, 0x27, 0x38, 0x39, 0x96, 0xfa, 0xa3,
	0x5d, 0xb5, 0xa5, 0x26, 0xc9, 0xae, 0xd9, 0xcc, 0x0a, 0xff, 0x57, 0x1f, 0x23, 0x8d, 0x62, 0xcf,
	0x93, 0xbc, 0x4f, 0xf2, 0xfe, 0xe9, 0x9a, 0x6e, 0xc7, 0x27, 0xdb, 0x0f, 0xb3, 0x89, 0x2c, 0xc8,
	0xa2, 0xfb, 0xc4, 0x34, 0x81, 0xd4, 0x5a, 0x69, 0x3f, 0xd5, 0x9b, 0x9e, 0x1a, 0xcb, 0xa2, 0x08,
	0x13, 0xe9, 0x27, 0x9f, 0xa9, 0x4e, 0x9a, 0x30, 0xcd, 0x77, 0x94, 0x1e, 0x87, 0x26, 0x55, 0x39,
	0x05, 0x5d, 0xfb, 0x19, 0x00, 0xee, 0x87, 0x3a, 0xc4, 0x59, 0xa9, 0x0b, 0xf6, 0x2e, 0xb0, 0xfd,
	0x50, 0xa7, 0x61, 0x6e, 0x84, 0xd2, 0x22, 0x35, 0x72, 0x2c, 0x72, 0xc5, 0x97, 0xd6, 0x97, 0x9e,
	0x3d, 0xff, 0x62, 0xb7, 0xef, 0xd7, 0xe2, 0xe9, 0x0a, 0xa3, 0xd3, 0x3c, 0xd9, 0xb6, 0x83, 0xe0,
	0x92, 0x57, 0xdd, 0xd3, 0x03, 0xd4, 0x0c, 0x15, 0x7b, 0x09, 0xd6, 0x4e, 0x1a, 0x89, 0x7c, 0x92,
	0x65, 0xfc, 0xd7, 0x16, 0xda, 0xb5, 0x83, 0x4e, 0x45, 0x32, 0xc4, 0x39, 0xf6, 0x21, 0xf0, 0x34,
	0x8f, 0xb2, 0x49, 0x2c, 0x45, 0x91, 0x8e, 0x32, 0xf4, 0x17, 0x3e, 0xac, 0xe0, 0x8f, 0x38, 0x8a,
	0x5e, 0x85, 0x62, 0xa4, 0x54, 0x26, 0xc3, 0x9c, 0x30, 0x56, 0xbd, 0xf8, 0x7d, 0xd2, 0x6e, 0x7b,
	0x29, 0xdb, 0x82, 0xab, 0xf3, 0x6c, 0x89, 0xe9, 0x37, 0x62, 0xea, 0xce, 0xd6, 0x3b, 0xb4, 0x9b,
	0x70, 0x6e, 0x47, 0xe3, 0xfe, 0xc5, 0xa1, 0x91, 0x7c, 0xd9, 0xb1, 0x5c, 0xad, 0xb0, 0x98, 0x14,
	0x77, 0xc0, 0x84, 0xe3, 0x3d, 0xa2, 0x69, 0xdb, 0xf8, 0xb7, 0x30, 0x9c, 0x5d, 0x87, 0x8b, 0x87,
	0x5a, 0x4a, 0xf8, 0x3b, 0x25, 0xbc, 0x50, 0x86, 0xb8, 0x14, 0x2f, 0x43, 0xcb, 0x28, 0x4a, 0xf0,
	0xe8, 0x22, 0x09, 0x9a, 0x46, 0x39, 0xfb, 0xa7, 0xe1, 0x82, 0xd7, 0x91, 0xf9, 0x1f, 0x64, 0x0e,
	0x34, 0xed, 0xac, 0x5f, 0x83, 0xf3, 0x2a, 0xcf, 0x0e, 0x44, 0x18, 0x99, 0x74, 0x5f, 0xf2, 0x46,
	0xfd, 0xb7, 0x04, 0x1b, 0xbf, 0xe9, 0xc2, 0xd9, 0x73, 0xb0, 0x72, 0x4c, 0x4d, 0x49, 0xfe, 0xa4,
	0x24, 0x17, 0x8f, 0xc2, 0x5c, 0xa2, 0xf7, 0xa0, 0x93, 0x48, 0x23, 0xc2, 0x38, 0x4e, 0xed, 0x31,
	0x0b, 0x33, 0x61, 0x0f, 0x1d, 0x6f, 0xd6, 0x27, 0x7c, 0x0c, 0x75, 0x9b, 0x87, 0xb2, 0x01, 0xaa,
	0xd8, 0xab, 0xc0, 0x67, 0x98, 0x51, 0xfe, 0xbf, 0x28, 0xff, 0xe5, 0x13, 0x2a, 0x87, 0xf1, 0x00,
	0x7a, 0x3b, 0x69, 0x86, 0x67, 0x5a, 0x8c, 0x0e, 0x44, 0xb4, 0x8b, 0x27, 0x3c, 0xc2, 0x41, 0x5a,
	0x98, 0x34, 0x12, 0x69, 0xcc, 0x5b, 0x33, 0x71, 0xd2, 0xdc, 0xc8, 0x44, 0x6a, 0xc2, 0xe1, 0xa4,
	0xdf, 0x3a, 0xb8, 0x3d, 0xa5, 0x1e, 0xc4, 0x58, 0x24, 0xeb, 0xa7, 0x78, 0x13, 0xdd, 0xdf, 0x44,
	0x77, 0x65, 0x9e, 0x89, 0x83, 0xbc, 0x07, 0xab, 0x55, 0x23, 0xe1, 0x50, 0x78, 0xbb, 0xb6, 0xe2,
	0x3a, 0xd3, 0xce, 0xee, 0x47, 0x76, 0xeb, 0xe4, 0xaa, 0xc9, 0x90, 0xa0, 0xfe, 0x21, 0xa8, 0xb5,
	0x19, 0x52, 0xc7, 0x13, 0xc0, 0x5a, 0x2e, 0x13, 0x7b, 0x8c, 0x8e, 0x5c, 0xf6, 0x6c, 0x73, 0x28,
	0xf8, 0xb9, 0xfa, 0xfd, 0x7b, 0x9c, 0xb4, 0xef, 0x78, 0x73, 0xd7, 0x55, 0x0a, 0xf6, 0x06, 0x5c,
	0x99, 0xe3, 0x49, 0x4c, 0xff, 0x12, 0x13, 0x9f, 0x25, 0x76, 0x50, 0x23, 0x58, 0x2f, 0x6b, 0x77,
	0x56, 0x47, 0x51, 0xb1, 0x2c, 0x38, 0xd4, 0xd3, 0xf5, 0xbc, 0xc9, 0x76, 0xa5, 0xeb, 0x58, 0x3d,
	0x6e, 0xc4, 0xf5, 0xba, 0x1c, 0x44, 0xfb, 0x1f, 0xd1, 0x3e, 0x75, 0x8a, 0x99, 0x85, 0xbe, 0xf6,
	0x4b, 0x0b, 0xda, 0x81, 0x2c, 0xf6, 0x54, 0x5e, 0x48, 0xf6, 0x02, 0x34, 0x5c, 0xd3, 0xae, 0xf6,
	0x51, 0x7f, 0x27, 0x50, 0x43, 0x7f, 0xdb, 0xfe, 0x1b, 0x50, 0x20, 0xfb, 0x18, 0x56, 0x6c, 0xbb,
	0x16, 0xc7, 0xfa, 0x35, 0xb6, 0xbf, 0x65, 0x14, 0xf7, 0x2b, 0xe2, 0x6a, 0x57, 0xbf, 0x8b, 0xe3,
	0xc1, 0xd1, 0x38, 0xb8, 0x34, 0x9e, 0xfe, 0x01, 0x4b, 0xaa, 0xe5, 0xaf, 0x09, 0x6c, 0x62, 0xd6,
	0xf1, 0xc9, 0x13, 0x8e, 0x74, 0x89, 0xdc, 0xa5, 0xff, 0x83, 0x32, 0x9c, 0xdd, 0x81, 0x65, 0xad,
	0x1e, 0x62, 0x67, 0xb2, 0xaa, 0x9b, 0xfd, 0xb3, 0x5c, 0x6c, 0xfd, 0xf2, 0x5b, 0xf4, 0x03, 0xf5,
	0x30, 0xb0, 0x36, 0xdd, 0x9f, 0x1a, 0xb0, 0x8c, 0x03, 0xb6, 0x0a, 0x4d, 0x1c, 0xda, 0x9a, 0xfc,
	0x74, 0x88, 0x9f, 0xa7, 0x11, 0x34, 0x70, 0x88, 0x45, 0xf6, 0x0a, 0xb4, 0x23, 0x3c, 0x10, 0x89,
	0xd2, 0x07, 0xfc, 0xb3, 0x61, 0x6d, 0x39, 0x1c, 0x06, 0xdb, 0x26, 0x1a, 0xa9, 0x09, 0x56, 0xb2,
	0xe6, 0x9f, 0x0f, 0xeb, 0xcb, 0xbc, 0x0c, 0xc6, 0x1b, 0xab, 0x65, 0x37, 0xda, 0x92, 0x7c, 0xb1,
	0x80, 0xae, 0x69, 0x83, 0x91, 0xf3, 0x75, 0xec, 0xbd, 0x5a, 0x4a, 0x51, 0x6a, 0xbf, 0x5c, 0x40,
	0x0b, 0x56, 0x31, 0x24, 0x3d, 0xa6, 0xc5, 0x9b, 0x38, 0x9e, 0x44, 0x86, 0x7f, 0x55, 0xbf, 0xcc,
	0x32, 0x96, 0xdd, 0x80, 0x66, 0xac, 0xc6, 0xb8, 0xf5, 0xfc, 0xeb, 0x7a, 0x95, 0x0f, 0x65, 0xf7,
	0xe1, 0x72, 0xf9, 0x99, 0xc4, 0x14, 0xf4, 0xb7, 0xdf, 0x2c, 0xd5, 0x53, 0xb3, 0x52, 0xfb, 0xc1,
	0x71, 0xfa, 0xa6, 0xbf, 0x51, 0xbe, 0x9b, 0x63, 0x31, 0x55, 0x84, 0x3e, 0x18, 0x0f, 0x61, 0x3b,
	0x93, 0xfb, 0x32, 0xb3, 0x8f, 0x8b, 0xef, 0x17, 0xc9, 0xdd, 0x72, 0xe1, 0xf8, 0xae, 0xb8, 0x03,
	0x1d, 0x5a, 0xcc, 0xf4, 0x02, 0x7e, 0x58, 0xc4, 0x64, 0x85, 0x94, 0xc7, 0xf0, 0x0f, 0x39, 0xd0,
	0xe2, 0xc7, 0xc5, 0x39, 0x06, 0xf1, 0x96, 0x80, 0x5e, 0xaa, 0x2a, 0x35, 0x70, 0xf4, 0x36, 0x7c,
	0xf0, 0x66, 0xa2, 0x8a, 0xf8, 0x93, 0x72, 0x3e, 0x3e, 0xfb, 0xf3, 0x71, 0xd4, 0x74, 0xef, 0xb3,
	0x1b, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x9f, 0x83, 0x08, 0x80, 0x0a, 0x00, 0x00,
}
