// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/mi_SearchBinaries_Ad.proto
// DO NOT EDIT!

/*
Package mi_SearchBinaries_Ad is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/mi_SearchBinaries_Ad.proto

It has these top-level messages:
	Parameters
	Response
*/
package mi_SearchBinaries_Ad

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "gosdk.dstore.de/values"
import dstore_engine_error "gosdk.dstore.de/engine/error"
import dstore_engine_message "gosdk.dstore.de/engine/message"
import dstore_engine_metainformation "gosdk.dstore.de/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	InputNestLevelConds          *dstore_values.IntegerValue `protobuf:"bytes,1,opt,name=input_nest_level_conds,json=inputNestLevelConds" json:"input_nest_level_conds,omitempty"`
	InputNestLevelCondsNull      bool                        `protobuf:"varint,1001,opt,name=input_nest_level_conds_null,json=inputNestLevelCondsNull" json:"input_nest_level_conds_null,omitempty"`
	ValueSeparatorINOperator     *dstore_values.StringValue  `protobuf:"bytes,2,opt,name=value_separator_i_n_operator,json=valueSeparatorINOperator" json:"value_separator_i_n_operator,omitempty"`
	ValueSeparatorINOperatorNull bool                        `protobuf:"varint,1002,opt,name=value_separator_i_n_operator_null,json=valueSeparatorINOperatorNull" json:"value_separator_i_n_operator_null,omitempty"`
	StartAtRowNo                 *dstore_values.IntegerValue `protobuf:"bytes,3,opt,name=start_at_row_no,json=startAtRowNo" json:"start_at_row_no,omitempty"`
	StartAtRowNoNull             bool                        `protobuf:"varint,1003,opt,name=start_at_row_no_null,json=startAtRowNoNull" json:"start_at_row_no_null,omitempty"`
	RowCount                     *dstore_values.IntegerValue `protobuf:"bytes,4,opt,name=row_count,json=rowCount" json:"row_count,omitempty"`
	RowCountNull                 bool                        `protobuf:"varint,1004,opt,name=row_count_null,json=rowCountNull" json:"row_count_null,omitempty"`
	OnlyUsedInTableBitmap        *dstore_values.IntegerValue `protobuf:"bytes,5,opt,name=only_used_in_table_bitmap,json=onlyUsedInTableBitmap" json:"only_used_in_table_bitmap,omitempty"`
	OnlyUsedInTableBitmapNull    bool                        `protobuf:"varint,1005,opt,name=only_used_in_table_bitmap_null,json=onlyUsedInTableBitmapNull" json:"only_used_in_table_bitmap_null,omitempty"`
	IncludeBinaryCode            *dstore_values.BooleanValue `protobuf:"bytes,6,opt,name=include_binary_code,json=includeBinaryCode" json:"include_binary_code,omitempty"`
	IncludeBinaryCodeNull        bool                        `protobuf:"varint,1006,opt,name=include_binary_code_null,json=includeBinaryCodeNull" json:"include_binary_code_null,omitempty"`
	OutputBinaryCharacId1        *dstore_values.IntegerValue `protobuf:"bytes,7,opt,name=output_binary_charac_id1,json=outputBinaryCharacId1" json:"output_binary_charac_id1,omitempty"`
	OutputBinaryCharacId1Null    bool                        `protobuf:"varint,1007,opt,name=output_binary_charac_id1_null,json=outputBinaryCharacId1Null" json:"output_binary_charac_id1_null,omitempty"`
	OutputBinaryCharacId2        *dstore_values.IntegerValue `protobuf:"bytes,8,opt,name=output_binary_charac_id2,json=outputBinaryCharacId2" json:"output_binary_charac_id2,omitempty"`
	OutputBinaryCharacId2Null    bool                        `protobuf:"varint,1008,opt,name=output_binary_charac_id2_null,json=outputBinaryCharacId2Null" json:"output_binary_charac_id2_null,omitempty"`
	OutputBinaryCharacId3        *dstore_values.IntegerValue `protobuf:"bytes,9,opt,name=output_binary_charac_id3,json=outputBinaryCharacId3" json:"output_binary_charac_id3,omitempty"`
	OutputBinaryCharacId3Null    bool                        `protobuf:"varint,1009,opt,name=output_binary_charac_id3_null,json=outputBinaryCharacId3Null" json:"output_binary_charac_id3_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetInputNestLevelConds() *dstore_values.IntegerValue {
	if m != nil {
		return m.InputNestLevelConds
	}
	return nil
}

func (m *Parameters) GetValueSeparatorINOperator() *dstore_values.StringValue {
	if m != nil {
		return m.ValueSeparatorINOperator
	}
	return nil
}

func (m *Parameters) GetStartAtRowNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.StartAtRowNo
	}
	return nil
}

func (m *Parameters) GetRowCount() *dstore_values.IntegerValue {
	if m != nil {
		return m.RowCount
	}
	return nil
}

func (m *Parameters) GetOnlyUsedInTableBitmap() *dstore_values.IntegerValue {
	if m != nil {
		return m.OnlyUsedInTableBitmap
	}
	return nil
}

func (m *Parameters) GetIncludeBinaryCode() *dstore_values.BooleanValue {
	if m != nil {
		return m.IncludeBinaryCode
	}
	return nil
}

func (m *Parameters) GetOutputBinaryCharacId1() *dstore_values.IntegerValue {
	if m != nil {
		return m.OutputBinaryCharacId1
	}
	return nil
}

func (m *Parameters) GetOutputBinaryCharacId2() *dstore_values.IntegerValue {
	if m != nil {
		return m.OutputBinaryCharacId2
	}
	return nil
}

func (m *Parameters) GetOutputBinaryCharacId3() *dstore_values.IntegerValue {
	if m != nil {
		return m.OutputBinaryCharacId3
	}
	return nil
}

type Response struct {
	Error                    *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation          []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message                  []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row                      []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
	NumberOfElementsInResult *dstore_values.IntegerValue                      `protobuf:"bytes,101,opt,name=number_of_elements_in_result,json=numberOfElementsInResult" json:"number_of_elements_in_result,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

func (m *Response) GetNumberOfElementsInResult() *dstore_values.IntegerValue {
	if m != nil {
		return m.NumberOfElementsInResult
	}
	return nil
}

type Response_Row struct {
	RowId             int32                       `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	BinaryCodeId      *dstore_values.IntegerValue `protobuf:"bytes,10001,opt,name=binary_code_id,json=binaryCodeId" json:"binary_code_id,omitempty"`
	BinaryValue1      *dstore_values.StringValue  `protobuf:"bytes,10002,opt,name=binary_value1,json=binaryValue1" json:"binary_value1,omitempty"`
	BinaryValue3      *dstore_values.StringValue  `protobuf:"bytes,10003,opt,name=binary_value3,json=binaryValue3" json:"binary_value3,omitempty"`
	ThumbnailCode     *dstore_values.BytesValue   `protobuf:"bytes,10004,opt,name=thumbnail_code,json=thumbnailCode" json:"thumbnail_code,omitempty"`
	BinaryValue2      *dstore_values.StringValue  `protobuf:"bytes,10005,opt,name=binary_value2,json=binaryValue2" json:"binary_value2,omitempty"`
	UsedInTableBitmap *dstore_values.IntegerValue `protobuf:"bytes,10006,opt,name=used_in_table_bitmap,json=usedInTableBitmap" json:"used_in_table_bitmap,omitempty"`
	BinaryCode        *dstore_values.BytesValue   `protobuf:"bytes,10007,opt,name=binary_code,json=binaryCode" json:"binary_code,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetBinaryCodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.BinaryCodeId
	}
	return nil
}

func (m *Response_Row) GetBinaryValue1() *dstore_values.StringValue {
	if m != nil {
		return m.BinaryValue1
	}
	return nil
}

func (m *Response_Row) GetBinaryValue3() *dstore_values.StringValue {
	if m != nil {
		return m.BinaryValue3
	}
	return nil
}

func (m *Response_Row) GetThumbnailCode() *dstore_values.BytesValue {
	if m != nil {
		return m.ThumbnailCode
	}
	return nil
}

func (m *Response_Row) GetBinaryValue2() *dstore_values.StringValue {
	if m != nil {
		return m.BinaryValue2
	}
	return nil
}

func (m *Response_Row) GetUsedInTableBitmap() *dstore_values.IntegerValue {
	if m != nil {
		return m.UsedInTableBitmap
	}
	return nil
}

func (m *Response_Row) GetBinaryCode() *dstore_values.BytesValue {
	if m != nil {
		return m.BinaryCode
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.mi_SearchBinaries_Ad.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.mi_SearchBinaries_Ad.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.mi_SearchBinaries_Ad.Response.Row")
}

func init() {
	proto.RegisterFile("dstore/engine/procedures/mi_SearchBinaries_Ad.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 859 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x96, 0xdb, 0x4f, 0xf3, 0x36,
	0x18, 0xc6, 0xf5, 0xad, 0x6b, 0xe9, 0xe7, 0xef, 0xe3, 0x14, 0x0e, 0x73, 0x0b, 0x43, 0x1b, 0xd3,
	0xa4, 0x5d, 0xa5, 0xb4, 0x95, 0xa6, 0x49, 0xd3, 0xa4, 0x51, 0x84, 0xb4, 0x6a, 0xa3, 0xa0, 0x00,
	0x93, 0xc6, 0x2e, 0xac, 0xb4, 0x31, 0x25, 0x5a, 0x6a, 0x57, 0xb6, 0x03, 0xea, 0x3f, 0xb0, 0xeb,
	0x9d, 0xf7, 0x37, 0x6e, 0xec, 0x78, 0xb3, 0xeb, 0xbd, 0xb6, 0xd3, 0x52, 0x42, 0x68, 0x0a, 0x37,
	0x20, 0xf7, 0x7d, 0x9f, 0xe7, 0xfd, 0xc5, 0xb5, 0x9f, 0x06, 0x35, 0x03, 0xa9, 0xb8, 0xa0, 0x35,
	0xca, 0xfa, 0x21, 0xa3, 0xb5, 0xa1, 0xe0, 0x3d, 0x1a, 0xc4, 0x82, 0xca, 0xda, 0x20, 0x24, 0xa7,
	0xd4, 0x17, 0xbd, 0xab, 0x56, 0xc8, 0x7c, 0x11, 0x52, 0x49, 0xf6, 0x03, 0x17, 0xea, 0x8a, 0x3b,
	0xbb, 0x56, 0xe4, 0x5a, 0x91, 0x9b, 0xd5, 0x59, 0x5d, 0x4b, 0x8c, 0xaf, 0xfd, 0x28, 0xa6, 0xd2,
	0x0a, 0xab, 0x95, 0xfb, 0xd3, 0xa8, 0x10, 0x5c, 0x24, 0xa5, 0xad, 0xfb, 0xa5, 0x01, 0x95, 0xd2,
	0xef, 0xd3, 0xa4, 0xf8, 0x5e, 0xba, 0xa8, 0xfc, 0x90, 0x5d, 0x72, 0x31, 0xf0, 0x55, 0xc8, 0x99,
	0x6d, 0xda, 0xfd, 0x16, 0x21, 0x74, 0xe2, 0x0b, 0x1f, 0xaa, 0x54, 0x48, 0xe7, 0x04, 0x6d, 0x86,
	0x6c, 0x18, 0x2b, 0xc2, 0xa8, 0x54, 0x24, 0xa2, 0xd7, 0x34, 0x22, 0x3d, 0xce, 0x02, 0x89, 0x5f,
	0xbc, 0xf3, 0xe2, 0x83, 0x57, 0x8d, 0x2d, 0x37, 0x79, 0x8a, 0x84, 0x30, 0x64, 0x8a, 0xf6, 0xa9,
	0xf8, 0x52, 0xaf, 0xbc, 0x35, 0x23, 0xed, 0x80, 0xf2, 0x0b, 0x2d, 0x3c, 0xd0, 0x3a, 0xe7, 0x13,
	0xb4, 0x95, 0xed, 0x48, 0x58, 0x1c, 0x45, 0xf8, 0xb7, 0x05, 0xf0, 0x2d, 0x7b, 0x6f, 0x65, 0x48,
	0x3b, 0x50, 0x77, 0x2e, 0xd0, 0xb6, 0x19, 0x45, 0x24, 0x1d, 0x02, 0x26, 0xcc, 0x26, 0x21, 0x61,
	0x84, 0x0f, 0xa9, 0x59, 0xe0, 0x37, 0x0c, 0x56, 0x35, 0x85, 0x25, 0x95, 0x08, 0x59, 0xdf, 0x52,
	0x61, 0xf3, 0xd9, 0xe9, 0x58, 0xde, 0xee, 0x1c, 0x27, 0x5a, 0xe7, 0x33, 0xf4, 0xee, 0x2c, 0x6f,
	0x0b, 0xf8, 0xbb, 0x05, 0xdc, 0x7e, 0xcc, 0xc5, 0x50, 0xb6, 0xd0, 0xb2, 0x54, 0xbe, 0x50, 0xc4,
	0x57, 0x44, 0xf0, 0x1b, 0xc2, 0x38, 0x2e, 0xe4, 0xef, 0xd7, 0x6b, 0xa3, 0xd9, 0x57, 0x1e, 0xbf,
	0xe9, 0x70, 0xa7, 0x86, 0xd6, 0x53, 0x1e, 0x16, 0xe0, 0xd6, 0x02, 0xac, 0x4c, 0x37, 0x9b, 0xa1,
	0x1f, 0xa1, 0x97, 0xba, 0xaf, 0xc7, 0x63, 0xa6, 0xf0, 0x9b, 0xf9, 0xe3, 0xca, 0xd0, 0x7d, 0xa0,
	0x9b, 0x9d, 0xf7, 0xd1, 0xd2, 0x44, 0x69, 0x87, 0xfc, 0x61, 0x87, 0xbc, 0x1e, 0xb7, 0x98, 0x01,
	0xe7, 0xa8, 0xc2, 0x59, 0x34, 0x22, 0xb1, 0xa4, 0x01, 0x09, 0x19, 0x51, 0x7e, 0x37, 0xa2, 0xa4,
	0x1b, 0xaa, 0x81, 0x3f, 0xc4, 0xc5, 0xfc, 0x81, 0x1b, 0x5a, 0x7d, 0x0e, 0xe2, 0x36, 0x3b, 0xd3,
	0xd2, 0x96, 0x51, 0xc2, 0x66, 0xed, 0x3c, 0x6a, 0x6b, 0x69, 0xfe, 0xb4, 0x34, 0x95, 0x4c, 0xbd,
	0x41, 0xfb, 0x1c, 0xc1, 0x61, 0xeb, 0x45, 0x71, 0xa0, 0x85, 0x70, 0x7f, 0x46, 0xf0, 0x30, 0x01,
	0xc5, 0xa5, 0x4c, 0xa8, 0x2e, 0xe7, 0x11, 0xf5, 0x99, 0x85, 0x5a, 0x4d, 0x74, 0xe6, 0xda, 0x8d,
	0x0e, 0x40, 0x05, 0x1b, 0x89, 0x33, 0xcc, 0x2c, 0xca, 0x5f, 0x16, 0x65, 0xe3, 0x81, 0xca, 0x60,
	0x9c, 0x21, 0xcc, 0x63, 0xa5, 0x4f, 0xf7, 0x58, 0x78, 0x05, 0xe7, 0xa3, 0x47, 0xc2, 0xa0, 0x8e,
	0x17, 0xe6, 0xd9, 0x20, 0x23, 0x4e, 0x4c, 0x8d, 0xb4, 0x1d, 0xd4, 0x9d, 0x7d, 0xf4, 0xf6, 0x63,
	0xae, 0x16, 0xea, 0xef, 0xf1, 0xfe, 0x64, 0xc9, 0x73, 0xc0, 0x1a, 0xb8, 0xfc, 0x4c, 0xb0, 0xc6,
	0x0c, 0xb0, 0x86, 0x05, 0xfb, 0x67, 0x06, 0x58, 0x23, 0x07, 0xac, 0x89, 0x5f, 0x3e, 0x13, 0xac,
	0x39, 0x03, 0xac, 0x69, 0xc1, 0xfe, 0x9d, 0x01, 0xd6, 0xd4, 0x60, 0xbb, 0xb7, 0x25, 0x54, 0xf6,
	0xa8, 0x1c, 0x72, 0x26, 0xa9, 0xb3, 0x87, 0x8a, 0x26, 0x66, 0x93, 0xd4, 0x9b, 0xc4, 0x4b, 0x92,
	0xdd, 0x36, 0x82, 0x0f, 0xf5, 0x5f, 0xcf, 0x36, 0x3a, 0x5f, 0xa1, 0x15, 0x1d, 0xb0, 0x64, 0x2a,
	0x61, 0x21, 0x9b, 0x0a, 0x20, 0x76, 0x53, 0xe2, 0x74, 0x0e, 0x1f, 0xc1, 0xba, 0x7d, 0xb7, 0xf6,
	0x96, 0x07, 0xf7, 0x3f, 0x80, 0xe3, 0xb9, 0x90, 0x04, 0x3b, 0x84, 0x8a, 0x76, 0xdc, 0x79, 0xe0,
	0x68, 0x63, 0xff, 0xc8, 0xfe, 0xf7, 0xc6, 0xed, 0x70, 0xd3, 0x0a, 0x70, 0xa1, 0x21, 0x1b, 0xb4,
	0x6a, 0xcf, 0xcd, 0xff, 0x01, 0x72, 0xc7, 0x3b, 0xe0, 0x42, 0xcc, 0x78, 0x5a, 0xec, 0x7c, 0x8d,
	0xb6, 0x59, 0x3c, 0xe8, 0x52, 0x41, 0xf8, 0x25, 0xa1, 0x11, 0x1d, 0x50, 0xa6, 0xa4, 0xbe, 0xb6,
	0xf0, 0x73, 0x17, 0x47, 0x0a, 0xd3, 0xfc, 0x2f, 0x0d, 0x5b, 0x83, 0xe3, 0xcb, 0xc3, 0x44, 0xde,
	0x66, 0x9e, 0x11, 0x57, 0xff, 0x2b, 0xa0, 0x02, 0x4c, 0x72, 0x36, 0x51, 0x49, 0x07, 0x52, 0x18,
	0xe0, 0xef, 0x3a, 0xe0, 0x57, 0xf4, 0x8a, 0xb0, 0x6c, 0x07, 0xf0, 0x00, 0x4b, 0xd3, 0x37, 0x12,
	0xea, 0xdf, 0x77, 0xe6, 0xc8, 0xd5, 0xee, 0xe4, 0x96, 0x82, 0xc7, 0xa7, 0x68, 0x31, 0xf1, 0x30,
	0xbd, 0x75, 0xfc, 0x43, 0x27, 0xf7, 0x37, 0x23, 0x71, 0x30, 0x8b, 0x7a, 0xda, 0xa1, 0x89, 0x7f,
	0x7c, 0x9a, 0x83, 0x3e, 0x9f, 0x4b, 0xea, 0x0a, 0x36, 0x81, 0xf9, 0x61, 0x64, 0x93, 0xea, 0x27,
	0x6b, 0x51, 0x49, 0x47, 0xd5, 0x48, 0x51, 0x69, 0x1d, 0x16, 0x27, 0x0a, 0x13, 0x52, 0x29, 0x88,
	0x06, 0xfe, 0xf9, 0x69, 0x10, 0x0d, 0xe7, 0x08, 0xad, 0x67, 0x26, 0xf9, 0x2f, 0x73, 0x6c, 0xe9,
	0x6a, 0xfc, 0x20, 0xc6, 0x3f, 0x46, 0xaf, 0xa6, 0xa3, 0xf7, 0xd7, 0xdc, 0x07, 0x42, 0x77, 0x5f,
	0x4b, 0xeb, 0x1c, 0xde, 0x0a, 0x78, 0xea, 0x40, 0xde, 0xbd, 0x46, 0x5d, 0x7c, 0xd8, 0xe7, 0x32,
	0xf8, 0x66, 0x5c, 0x0f, 0xe6, 0x7d, 0xd3, 0xea, 0x96, 0xcc, 0x4b, 0x4d, 0xf3, 0xff, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x45, 0x26, 0xf5, 0xe7, 0xa1, 0x09, 0x00, 0x00,
}
