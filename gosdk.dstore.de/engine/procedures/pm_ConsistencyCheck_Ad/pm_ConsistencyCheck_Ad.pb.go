// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/pm_ConsistencyCheck_Ad.proto
// DO NOT EDIT!

/*
Package pm_ConsistencyCheck_Ad is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/pm_ConsistencyCheck_Ad.proto

It has these top-level messages:
	Parameters
	Response
*/
package pm_ConsistencyCheck_Ad

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "gosdk.dstore.de/values"
import dstore_engine_error "gosdk.dstore.de/engine/error"
import dstore_engine_message "gosdk.dstore.de/engine/message"
import dstore_engine_metainformation "gosdk.dstore.de/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	PersonCharacteristicId     *dstore_values.IntegerValue `protobuf:"bytes,1,opt,name=person_characteristic_id,json=personCharacteristicId" json:"person_characteristic_id,omitempty"`
	PersonCharacteristicIdNull bool                        `protobuf:"varint,1001,opt,name=person_characteristic_id_null,json=personCharacteristicIdNull" json:"person_characteristic_id_null,omitempty"`
	WhatToCheck                *dstore_values.IntegerValue `protobuf:"bytes,2,opt,name=what_to_check,json=whatToCheck" json:"what_to_check,omitempty"`
	WhatToCheckNull            bool                        `protobuf:"varint,1002,opt,name=what_to_check_null,json=whatToCheckNull" json:"what_to_check_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetPersonCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonCharacteristicId
	}
	return nil
}

func (m *Parameters) GetWhatToCheck() *dstore_values.IntegerValue {
	if m != nil {
		return m.WhatToCheck
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId                        int32                       `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	PersonCharacteristicId       *dstore_values.IntegerValue `protobuf:"bytes,10001,opt,name=person_characteristic_id,json=personCharacteristicId" json:"person_characteristic_id,omitempty"`
	Value                        *dstore_values.StringValue  `protobuf:"bytes,10002,opt,name=value" json:"value,omitempty"`
	ValueId                      *dstore_values.IntegerValue `protobuf:"bytes,10003,opt,name=value_id,json=valueId" json:"value_id,omitempty"`
	UsedByPersonTypeBitmap       *dstore_values.IntegerValue `protobuf:"bytes,10004,opt,name=used_by_person_type_bitmap,json=usedByPersonTypeBitmap" json:"used_by_person_type_bitmap,omitempty"`
	SortNo                       *dstore_values.IntegerValue `protobuf:"bytes,10005,opt,name=sort_no,json=sortNo" json:"sort_no,omitempty"`
	CorrectUsedByPersonTypeBtmp  *dstore_values.IntegerValue `protobuf:"bytes,20001,opt,name=correct_used_by_person_type_btmp,json=correctUsedByPersonTypeBtmp" json:"correct_used_by_person_type_btmp,omitempty"`
	WrongUsedByPersonTypeBtmp    *dstore_values.IntegerValue `protobuf:"bytes,20005,opt,name=wrong_used_by_person_type_btmp,json=wrongUsedByPersonTypeBtmp" json:"wrong_used_by_person_type_btmp,omitempty"`
	WrongCountValues             *dstore_values.IntegerValue `protobuf:"bytes,30001,opt,name=wrong_count_values,json=wrongCountValues" json:"wrong_count_values,omitempty"`
	FirstFourCharactersLowerCase *dstore_values.StringValue  `protobuf:"bytes,30002,opt,name=first_four_characters_lower_case,json=firstFourCharactersLowerCase" json:"first_four_characters_lower_case,omitempty"`
	CorrectCountValues           *dstore_values.IntegerValue `protobuf:"bytes,30004,opt,name=correct_count_values,json=correctCountValues" json:"correct_count_values,omitempty"`
	CorrectCountPersons          *dstore_values.IntegerValue `protobuf:"bytes,30005,opt,name=correct_count_persons,json=correctCountPersons" json:"correct_count_persons,omitempty"`
	InconsistenceType            *dstore_values.IntegerValue `protobuf:"bytes,30006,opt,name=inconsistence_type,json=inconsistenceType" json:"inconsistence_type,omitempty"`
	WrongCountPersons            *dstore_values.IntegerValue `protobuf:"bytes,30007,opt,name=wrong_count_persons,json=wrongCountPersons" json:"wrong_count_persons,omitempty"`
	PersonTypeId                 *dstore_values.IntegerValue `protobuf:"bytes,30008,opt,name=person_type_id,json=personTypeId" json:"person_type_id,omitempty"`
	Valuelowercase               *dstore_values.StringValue  `protobuf:"bytes,40001,opt,name=valuelowercase" json:"valuelowercase,omitempty"`
	PersonId                     *dstore_values.IntegerValue `protobuf:"bytes,40002,opt,name=person_id,json=personId" json:"person_id,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetPersonCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonCharacteristicId
	}
	return nil
}

func (m *Response_Row) GetValue() *dstore_values.StringValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Response_Row) GetValueId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ValueId
	}
	return nil
}

func (m *Response_Row) GetUsedByPersonTypeBitmap() *dstore_values.IntegerValue {
	if m != nil {
		return m.UsedByPersonTypeBitmap
	}
	return nil
}

func (m *Response_Row) GetSortNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.SortNo
	}
	return nil
}

func (m *Response_Row) GetCorrectUsedByPersonTypeBtmp() *dstore_values.IntegerValue {
	if m != nil {
		return m.CorrectUsedByPersonTypeBtmp
	}
	return nil
}

func (m *Response_Row) GetWrongUsedByPersonTypeBtmp() *dstore_values.IntegerValue {
	if m != nil {
		return m.WrongUsedByPersonTypeBtmp
	}
	return nil
}

func (m *Response_Row) GetWrongCountValues() *dstore_values.IntegerValue {
	if m != nil {
		return m.WrongCountValues
	}
	return nil
}

func (m *Response_Row) GetFirstFourCharactersLowerCase() *dstore_values.StringValue {
	if m != nil {
		return m.FirstFourCharactersLowerCase
	}
	return nil
}

func (m *Response_Row) GetCorrectCountValues() *dstore_values.IntegerValue {
	if m != nil {
		return m.CorrectCountValues
	}
	return nil
}

func (m *Response_Row) GetCorrectCountPersons() *dstore_values.IntegerValue {
	if m != nil {
		return m.CorrectCountPersons
	}
	return nil
}

func (m *Response_Row) GetInconsistenceType() *dstore_values.IntegerValue {
	if m != nil {
		return m.InconsistenceType
	}
	return nil
}

func (m *Response_Row) GetWrongCountPersons() *dstore_values.IntegerValue {
	if m != nil {
		return m.WrongCountPersons
	}
	return nil
}

func (m *Response_Row) GetPersonTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonTypeId
	}
	return nil
}

func (m *Response_Row) GetValuelowercase() *dstore_values.StringValue {
	if m != nil {
		return m.Valuelowercase
	}
	return nil
}

func (m *Response_Row) GetPersonId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonId
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.pm_ConsistencyCheck_Ad.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.pm_ConsistencyCheck_Ad.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.pm_ConsistencyCheck_Ad.Response.Row")
}

func init() {
	proto.RegisterFile("dstore/engine/procedures/pm_ConsistencyCheck_Ad.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 766 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0xcf, 0x4f, 0x13, 0x41,
	0x14, 0x0e, 0xd4, 0xd2, 0x32, 0x20, 0xe0, 0xa0, 0x64, 0x69, 0x95, 0x10, 0xf4, 0xe0, 0xc1, 0x2c,
	0x8a, 0x21, 0x12, 0x2f, 0xc6, 0x16, 0x4d, 0x88, 0x50, 0x71, 0x03, 0xf8, 0xe3, 0x32, 0x2e, 0xbb,
	0x43, 0xd9, 0xd0, 0xee, 0x6c, 0x66, 0xa6, 0x36, 0xfd, 0x2b, 0xfc, 0xed, 0xc9, 0x8b, 0x07, 0xff,
	0x00, 0x8d, 0x3f, 0xb8, 0xea, 0x7f, 0x23, 0x77, 0xef, 0xbe, 0x9d, 0xd9, 0x96, 0x6e, 0x2d, 0x76,
	0xe2, 0xa5, 0xdb, 0x99, 0xf7, 0xbe, 0xef, 0x7d, 0xfb, 0xbe, 0x37, 0x9d, 0xa2, 0x65, 0x5f, 0x48,
	0xc6, 0xe9, 0x22, 0x0d, 0xab, 0x41, 0x48, 0x17, 0x23, 0xce, 0x3c, 0xea, 0x37, 0x38, 0x15, 0x8b,
	0x51, 0x9d, 0x94, 0x59, 0x28, 0x02, 0x21, 0x69, 0xe8, 0xb5, 0xca, 0xfb, 0xd4, 0x3b, 0x20, 0xb7,
	0x7d, 0x1b, 0x32, 0x24, 0xc3, 0x97, 0x34, 0xcc, 0xd6, 0x30, 0xbb, 0x7f, 0x6e, 0x61, 0x3a, 0x21,
	0x7f, 0xe6, 0xd6, 0x1a, 0x54, 0x68, 0x68, 0x61, 0x36, 0x5d, 0x91, 0x72, 0xce, 0x78, 0x12, 0x2a,
	0xa6, 0x43, 0x75, 0x2a, 0x84, 0x5b, 0xa5, 0x49, 0xf0, 0x62, 0x6f, 0x50, 0xba, 0x41, 0xb8, 0xc7,
	0x78, 0xdd, 0x95, 0x01, 0x0b, 0x75, 0xd2, 0xc2, 0xbb, 0x61, 0x84, 0x36, 0x5d, 0xee, 0x42, 0x94,
	0x72, 0x81, 0xb7, 0x91, 0x15, 0xc1, 0x93, 0x85, 0xc4, 0xdb, 0x87, 0x5d, 0x0f, 0x36, 0x41, 0x63,
	0xe0, 0x91, 0xc0, 0xb7, 0x86, 0xe6, 0x87, 0x2e, 0x8f, 0x2d, 0x15, 0xed, 0xe4, 0x4d, 0x12, 0x8d,
	0x41, 0x28, 0x69, 0x95, 0xf2, 0x9d, 0x78, 0xe5, 0xcc, 0x68, 0x70, 0x39, 0x85, 0x5d, 0xf3, 0x71,
	0x09, 0x5d, 0x38, 0x89, 0x96, 0x84, 0x8d, 0x5a, 0xcd, 0xfa, 0x95, 0x03, 0xf2, 0xbc, 0x53, 0xe8,
	0x8f, 0xaf, 0x40, 0x0a, 0xbe, 0x85, 0x4e, 0x37, 0xf7, 0x5d, 0x49, 0x24, 0x03, 0x12, 0xe8, 0x97,
	0x35, 0x3c, 0x58, 0xcf, 0x58, 0x8c, 0xd8, 0x62, 0xaa, 0xbf, 0xf8, 0x0a, 0xc2, 0x29, 0x02, 0x5d,
	0xf9, 0x48, 0x57, 0x9e, 0xec, 0xca, 0x8c, 0xcb, 0x2d, 0x3c, 0x1f, 0x47, 0x79, 0x87, 0x8a, 0x08,
	0x5c, 0xa2, 0xf8, 0x2a, 0xca, 0xaa, 0xb6, 0x27, 0x3d, 0x28, 0xd8, 0x69, 0x37, 0xb5, 0x25, 0x77,
	0xe2, 0x4f, 0x47, 0x27, 0xe2, 0xc7, 0x68, 0x2a, 0x6e, 0x38, 0xe9, 0xea, 0x38, 0x08, 0xce, 0x00,
	0xd8, 0xee, 0x01, 0xf7, 0xfa, 0xb2, 0x01, 0xeb, 0xb5, 0xe3, 0xb5, 0x33, 0x59, 0x4f, 0x6f, 0xe0,
	0x15, 0x94, 0x4b, 0x8c, 0xb6, 0x32, 0x8a, 0x71, 0xee, 0x2f, 0x46, 0x3d, 0x06, 0x1b, 0xfa, 0xe9,
	0xb4, 0xd3, 0xf1, 0x2a, 0xca, 0x70, 0xd6, 0xb4, 0x4e, 0x29, 0xd4, 0x92, 0x6d, 0x32, 0x92, 0x76,
	0xbb, 0x07, 0xb6, 0xc3, 0x9a, 0x4e, 0x0c, 0x2f, 0xfc, 0x1e, 0x45, 0x19, 0x58, 0xe0, 0x19, 0x34,
	0x02, 0xcb, 0x78, 0x32, 0x5e, 0x54, 0xa0, 0x2d, 0x59, 0x27, 0x0b, 0x4b, 0x30, 0x7b, 0xe7, 0x1f,
	0x33, 0xf4, 0xb2, 0xf2, 0xff, 0x43, 0x74, 0x0d, 0x65, 0x55, 0xba, 0xf5, 0xaa, 0x92, 0x76, 0x21,
	0x21, 0x11, 0x92, 0x07, 0x61, 0x55, 0x73, 0xe8, 0x4c, 0x7c, 0x03, 0xe5, 0xd5, 0x97, 0xb8, 0xf4,
	0x6b, 0x83, 0xd2, 0x39, 0xb5, 0x09, 0xb5, 0x1e, 0xa1, 0x42, 0x43, 0x50, 0x9f, 0xec, 0xb6, 0x48,
	0xf2, 0x2e, 0xb2, 0x15, 0x51, 0xb2, 0x1b, 0xc8, 0xba, 0x1b, 0x59, 0x6f, 0x4c, 0xde, 0x22, 0xc6,
	0x97, 0x5a, 0x9b, 0x0a, 0xbd, 0x05, 0xe0, 0x92, 0xc2, 0xe2, 0x65, 0x94, 0x13, 0x8c, 0x4b, 0x12,
	0x32, 0xeb, 0xad, 0x01, 0xcd, 0x48, 0x9c, 0x5c, 0x61, 0xd8, 0x47, 0xf3, 0x1e, 0xe3, 0x9c, 0x7a,
	0x92, 0xf4, 0x15, 0x26, 0xeb, 0x91, 0xf5, 0xe1, 0xbd, 0xc1, 0x11, 0x2d, 0x26, 0x34, 0xdb, 0xbd,
	0xf2, 0x80, 0x01, 0x3f, 0x45, 0x73, 0x4d, 0xce, 0xc2, 0xea, 0xc9, 0x35, 0x3e, 0x9a, 0xd4, 0x98,
	0x55, 0x24, 0x7d, 0x2b, 0xdc, 0x83, 0x43, 0xa8, 0x2a, 0x78, 0xac, 0x11, 0x4a, 0xa2, 0xd1, 0xd6,
	0xa7, 0x23, 0x03, 0xd6, 0x29, 0x05, 0x2c, 0xc7, 0x38, 0xb5, 0x21, 0xe2, 0xa6, 0xec, 0x05, 0x5c,
	0x48, 0xb2, 0xc7, 0x1a, 0xfc, 0x78, 0xda, 0x04, 0xa9, 0xb1, 0x26, 0x85, 0x0d, 0x57, 0x50, 0xeb,
	0xf3, 0xd1, 0xd0, 0xc0, 0x69, 0x39, 0xaf, 0x58, 0xee, 0x02, 0x49, 0x67, 0xe8, 0xc4, 0x7a, 0x4c,
	0x51, 0x06, 0x06, 0x7c, 0x1f, 0x9d, 0x6d, 0xb7, 0x3e, 0x25, 0xfa, 0x8b, 0x89, 0x68, 0x9c, 0x40,
	0xbb, 0x65, 0x3f, 0x40, 0xe7, 0xd2, 0x84, 0xba, 0xcb, 0xc2, 0xfa, 0x6a, 0xc2, 0x38, 0xdd, 0xcd,
	0xa8, 0xbb, 0x2b, 0xf0, 0x3a, 0xc2, 0x41, 0xe8, 0x75, 0x8e, 0x2f, 0x55, 0x8e, 0x59, 0xdf, 0x4c,
	0xf8, 0xce, 0xa4, 0x80, 0xb1, 0x51, 0x78, 0x03, 0x4d, 0x77, 0x9b, 0xd4, 0x96, 0xf7, 0xdd, 0x88,
	0xee, 0xd8, 0xa5, 0xb6, 0xb8, 0x32, 0x9a, 0xe8, 0x9e, 0x23, 0x38, 0x8b, 0x87, 0x26, 0x4c, 0xe3,
	0x51, 0x67, 0x74, 0xe0, 0x44, 0xae, 0xa2, 0x09, 0x95, 0xa4, 0xac, 0x55, 0xce, 0xfe, 0x38, 0x1c,
	0x1e, 0xe8, 0x6c, 0x0f, 0x06, 0xdf, 0x44, 0xa3, 0x89, 0x14, 0x50, 0xf1, 0xf3, 0xd0, 0xe0, 0x0a,
	0xc9, 0xeb, 0xfc, 0x35, 0xbf, 0xf4, 0x10, 0x15, 0x03, 0xd6, 0xfb, 0xa3, 0xd9, 0xb9, 0xfe, 0x9f,
	0xac, 0x54, 0x99, 0xf0, 0x0f, 0xda, 0x71, 0xdf, 0xfc, 0x1f, 0xc2, 0xee, 0x88, 0xba, 0x8a, 0xaf,
	0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xa8, 0x19, 0xb7, 0x8d, 0x5b, 0x08, 0x00, 0x00,
}
