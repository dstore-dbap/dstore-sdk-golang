// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/pm_GetPersonCharacteristics_Ad.proto
// DO NOT EDIT!

/*
Package pm_GetPersonCharacteristics_Ad is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/pm_GetPersonCharacteristics_Ad.proto

It has these top-level messages:
	Parameters
	Response
*/
package pm_GetPersonCharacteristics_Ad

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "gosdk.dstore.de/values"
import dstore_engine_error "gosdk.dstore.de/engine/error"
import dstore_engine_message "gosdk.dstore.de/engine/message"
import dstore_engine_metainformation "gosdk.dstore.de/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	PersonTypeId                 *dstore_values.IntegerValue `protobuf:"bytes,1,opt,name=person_type_id,json=personTypeId" json:"person_type_id,omitempty"`
	PersonTypeIdNull             bool                        `protobuf:"varint,1001,opt,name=person_type_id_null,json=personTypeIdNull" json:"person_type_id_null,omitempty"`
	PersonCharacCategoryId       *dstore_values.IntegerValue `protobuf:"bytes,2,opt,name=person_charac_category_id,json=personCharacCategoryId" json:"person_charac_category_id,omitempty"`
	PersonCharacCategoryIdNull   bool                        `protobuf:"varint,1002,opt,name=person_charac_category_id_null,json=personCharacCategoryIdNull" json:"person_charac_category_id_null,omitempty"`
	NotInPersonCharacsInCats     *dstore_values.IntegerValue `protobuf:"bytes,3,opt,name=not_in_person_characs_in_cats,json=notInPersonCharacsInCats" json:"not_in_person_characs_in_cats,omitempty"`
	NotInPersonCharacsInCatsNull bool                        `protobuf:"varint,1003,opt,name=not_in_person_characs_in_cats_null,json=notInPersonCharacsInCatsNull" json:"not_in_person_characs_in_cats_null,omitempty"`
	PersonCharacteristicId       *dstore_values.IntegerValue `protobuf:"bytes,4,opt,name=person_characteristic_id,json=personCharacteristicId" json:"person_characteristic_id,omitempty"`
	PersonCharacteristicIdNull   bool                        `protobuf:"varint,1004,opt,name=person_characteristic_id_null,json=personCharacteristicIdNull" json:"person_characteristic_id_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetPersonTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonTypeId
	}
	return nil
}

func (m *Parameters) GetPersonCharacCategoryId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonCharacCategoryId
	}
	return nil
}

func (m *Parameters) GetNotInPersonCharacsInCats() *dstore_values.IntegerValue {
	if m != nil {
		return m.NotInPersonCharacsInCats
	}
	return nil
}

func (m *Parameters) GetPersonCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonCharacteristicId
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId                        int32                       `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	Description                  *dstore_values.StringValue  `protobuf:"bytes,10001,opt,name=description" json:"description,omitempty"`
	FieldTypeId                  *dstore_values.IntegerValue `protobuf:"bytes,10002,opt,name=field_type_id,json=fieldTypeId" json:"field_type_id,omitempty"`
	DescriptionForAdmin          *dstore_values.StringValue  `protobuf:"bytes,10003,opt,name=description_for_admin,json=descriptionForAdmin" json:"description_for_admin,omitempty"`
	PrecisionValue               *dstore_values.IntegerValue `protobuf:"bytes,10004,opt,name=precision_value,json=precisionValue" json:"precision_value,omitempty"`
	Modify                       *dstore_values.IntegerValue `protobuf:"bytes,10005,opt,name=modify" json:"modify,omitempty"`
	MaxLength                    *dstore_values.IntegerValue `protobuf:"bytes,10006,opt,name=max_length,json=maxLength" json:"max_length,omitempty"`
	SortNo                       *dstore_values.IntegerValue `protobuf:"bytes,10007,opt,name=sort_no,json=sortNo" json:"sort_no,omitempty"`
	RequiredCharacCategory       *dstore_values.BooleanValue `protobuf:"bytes,10008,opt,name=required_charac_category,json=requiredCharacCategory" json:"required_charac_category,omitempty"`
	PredefinedValues             *dstore_values.BooleanValue `protobuf:"bytes,10009,opt,name=predefined_values,json=predefinedValues" json:"predefined_values,omitempty"`
	ReadAccessRestrictionPattern *dstore_values.StringValue  `protobuf:"bytes,10010,opt,name=read_access_restriction_pattern,json=readAccessRestrictionPattern" json:"read_access_restriction_pattern,omitempty"`
	Format                       *dstore_values.StringValue  `protobuf:"bytes,10011,opt,name=format" json:"format,omitempty"`
	Required                     *dstore_values.BooleanValue `protobuf:"bytes,10012,opt,name=required" json:"required,omitempty"`
	BasicFieldType               *dstore_values.StringValue  `protobuf:"bytes,10013,opt,name=basic_field_type,json=basicFieldType" json:"basic_field_type,omitempty"`
	IsUnique                     *dstore_values.BooleanValue `protobuf:"bytes,10014,opt,name=is_unique,json=isUnique" json:"is_unique,omitempty"`
	FieldTypeDescription         *dstore_values.StringValue  `protobuf:"bytes,10015,opt,name=field_type_description,json=fieldTypeDescription" json:"field_type_description,omitempty"`
	Visible                      *dstore_values.BooleanValue `protobuf:"bytes,10016,opt,name=visible" json:"visible,omitempty"`
	BasicFieldTypeId             *dstore_values.IntegerValue `protobuf:"bytes,10017,opt,name=basic_field_type_id,json=basicFieldTypeId" json:"basic_field_type_id,omitempty"`
	Id                           *dstore_values.IntegerValue `protobuf:"bytes,10018,opt,name=id" json:"id,omitempty"`
	PersonCharacCategoryId       *dstore_values.IntegerValue `protobuf:"bytes,30010,opt,name=person_charac_category_id,json=personCharacCategoryId" json:"person_charac_category_id,omitempty"`
	CategoryDescription          *dstore_values.StringValue  `protobuf:"bytes,30019,opt,name=category_description,json=categoryDescription" json:"category_description,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetDescription() *dstore_values.StringValue {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *Response_Row) GetFieldTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.FieldTypeId
	}
	return nil
}

func (m *Response_Row) GetDescriptionForAdmin() *dstore_values.StringValue {
	if m != nil {
		return m.DescriptionForAdmin
	}
	return nil
}

func (m *Response_Row) GetPrecisionValue() *dstore_values.IntegerValue {
	if m != nil {
		return m.PrecisionValue
	}
	return nil
}

func (m *Response_Row) GetModify() *dstore_values.IntegerValue {
	if m != nil {
		return m.Modify
	}
	return nil
}

func (m *Response_Row) GetMaxLength() *dstore_values.IntegerValue {
	if m != nil {
		return m.MaxLength
	}
	return nil
}

func (m *Response_Row) GetSortNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.SortNo
	}
	return nil
}

func (m *Response_Row) GetRequiredCharacCategory() *dstore_values.BooleanValue {
	if m != nil {
		return m.RequiredCharacCategory
	}
	return nil
}

func (m *Response_Row) GetPredefinedValues() *dstore_values.BooleanValue {
	if m != nil {
		return m.PredefinedValues
	}
	return nil
}

func (m *Response_Row) GetReadAccessRestrictionPattern() *dstore_values.StringValue {
	if m != nil {
		return m.ReadAccessRestrictionPattern
	}
	return nil
}

func (m *Response_Row) GetFormat() *dstore_values.StringValue {
	if m != nil {
		return m.Format
	}
	return nil
}

func (m *Response_Row) GetRequired() *dstore_values.BooleanValue {
	if m != nil {
		return m.Required
	}
	return nil
}

func (m *Response_Row) GetBasicFieldType() *dstore_values.StringValue {
	if m != nil {
		return m.BasicFieldType
	}
	return nil
}

func (m *Response_Row) GetIsUnique() *dstore_values.BooleanValue {
	if m != nil {
		return m.IsUnique
	}
	return nil
}

func (m *Response_Row) GetFieldTypeDescription() *dstore_values.StringValue {
	if m != nil {
		return m.FieldTypeDescription
	}
	return nil
}

func (m *Response_Row) GetVisible() *dstore_values.BooleanValue {
	if m != nil {
		return m.Visible
	}
	return nil
}

func (m *Response_Row) GetBasicFieldTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.BasicFieldTypeId
	}
	return nil
}

func (m *Response_Row) GetId() *dstore_values.IntegerValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Response_Row) GetPersonCharacCategoryId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonCharacCategoryId
	}
	return nil
}

func (m *Response_Row) GetCategoryDescription() *dstore_values.StringValue {
	if m != nil {
		return m.CategoryDescription
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.pm_GetPersonCharacteristics_Ad.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.pm_GetPersonCharacteristics_Ad.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.pm_GetPersonCharacteristics_Ad.Response.Row")
}

func init() {
	proto.RegisterFile("dstore/engine/procedures/pm_GetPersonCharacteristics_Ad.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 906 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0xdb, 0x6e, 0xdc, 0x44,
	0x18, 0x56, 0x9a, 0xe6, 0xd0, 0x3f, 0x34, 0x5d, 0x26, 0x25, 0x9a, 0x6e, 0xda, 0x82, 0xc2, 0x0d,
	0x17, 0x95, 0x83, 0x28, 0x20, 0x0e, 0xaa, 0xd4, 0x34, 0xb4, 0x68, 0x45, 0xbb, 0x0d, 0x16, 0xad,
	0x00, 0x21, 0x8d, 0xbc, 0xf6, 0xec, 0x76, 0xc4, 0xee, 0x8c, 0x3b, 0xe3, 0x6d, 0xc8, 0x23, 0x70,
	0xc7, 0xf9, 0x7c, 0xbe, 0xe5, 0x0d, 0xb8, 0xe5, 0x45, 0xb8, 0x25, 0xf0, 0x10, 0xfc, 0x33, 0x63,
	0xef, 0xda, 0x4b, 0x12, 0x3b, 0xbd, 0xd9, 0xd5, 0x78, 0xfe, 0xef, 0x9b, 0x6f, 0xbe, 0xff, 0x60,
	0xc3, 0xb5, 0xc4, 0x64, 0x4a, 0xf3, 0x2d, 0x2e, 0x07, 0x42, 0xf2, 0xad, 0x54, 0xab, 0x98, 0x27,
	0x63, 0xcd, 0xcd, 0x56, 0x3a, 0x62, 0x6f, 0xf2, 0x6c, 0x97, 0x6b, 0xa3, 0xe4, 0xce, 0x83, 0x48,
	0x47, 0x71, 0xc6, 0xb5, 0x30, 0x99, 0x88, 0x0d, 0xdb, 0x4e, 0x02, 0x8c, 0xcc, 0x14, 0xb9, 0xe2,
	0xe1, 0x81, 0x87, 0x07, 0xc7, 0x63, 0xda, 0x6b, 0xf9, 0x61, 0x8f, 0xa2, 0xe1, 0x98, 0x1b, 0x4f,
	0xd1, 0xbe, 0x50, 0x55, 0xc0, 0xb5, 0x56, 0x3a, 0xdf, 0xda, 0xa8, 0x6e, 0x8d, 0xb8, 0x31, 0xd1,
	0x80, 0xe7, 0x9b, 0xcf, 0xce, 0x6e, 0x66, 0x91, 0x90, 0x7d, 0xa5, 0x47, 0x51, 0x26, 0x94, 0xf4,
	0x41, 0x9b, 0x7f, 0x9d, 0x06, 0xd8, 0x45, 0x1d, 0xb8, 0x8b, 0xa2, 0xc8, 0x36, 0xac, 0xa6, 0x4e,
	0x1c, 0xcb, 0xf6, 0x53, 0xce, 0x44, 0x42, 0xe7, 0x9e, 0x99, 0x7b, 0x6e, 0xe5, 0x85, 0x8d, 0x20,
	0xbf, 0x47, 0xae, 0x4c, 0xc8, 0x8c, 0x0f, 0xb8, 0xbe, 0x6f, 0x57, 0xe1, 0x13, 0x1e, 0xf2, 0x0e,
	0x22, 0x3a, 0x09, 0x09, 0x60, 0xad, 0x4a, 0xc1, 0xe4, 0x78, 0x38, 0xa4, 0x7f, 0x2f, 0x21, 0xd1,
	0x72, 0xd8, 0x2a, 0xc7, 0x76, 0x71, 0x83, 0xdc, 0x87, 0x0b, 0x79, 0x7c, 0xec, 0x0c, 0x61, 0x71,
	0x84, 0xdc, 0x4a, 0xef, 0xdb, 0xd3, 0x4f, 0xd5, 0x9f, 0xbe, 0x9e, 0x96, 0xdc, 0xdc, 0xc9, 0xb1,
	0xa8, 0x63, 0x07, 0x2e, 0x1f, 0xc9, 0xeb, 0x25, 0x1d, 0x78, 0x49, 0xed, 0xc3, 0x09, 0x9c, 0xb8,
	0x0f, 0xe0, 0x92, 0x54, 0x19, 0x13, 0x92, 0x55, 0xb8, 0x8c, 0x7d, 0x82, 0x7c, 0x86, 0xce, 0xd7,
	0x0b, 0xa4, 0xc8, 0xd0, 0x91, 0xe5, 0x9c, 0x9b, 0x8e, 0xc4, 0x73, 0x0c, 0xe9, 0xc0, 0xe6, 0xb1,
	0xec, 0x5e, 0xe6, 0x3f, 0x5e, 0xe6, 0xc5, 0xa3, 0x68, 0x9c, 0xd0, 0x7b, 0x40, 0x2b, 0x1c, 0x45,
	0x59, 0x59, 0x13, 0x4f, 0x9f, 0xd0, 0xc4, 0x02, 0x8b, 0x26, 0xde, 0x80, 0x4b, 0x47, 0xd1, 0x7a,
	0x71, 0xff, 0x1e, 0xe2, 0xe1, 0x14, 0x6f, 0xa5, 0x6d, 0xfe, 0x7e, 0x16, 0x96, 0x43, 0x6e, 0x52,
	0x25, 0x0d, 0x27, 0xcf, 0xc3, 0x82, 0x2b, 0xe0, 0xbc, 0xae, 0xda, 0x41, 0xb5, 0x3f, 0x7c, 0x71,
	0xdf, 0xb4, 0xbf, 0xa1, 0x0f, 0x24, 0xef, 0x41, 0xcb, 0x96, 0x2e, 0x2b, 0xd5, 0x2e, 0x96, 0xc5,
	0x3c, 0x82, 0x83, 0x19, 0xf0, 0x6c, 0x85, 0xdf, 0xc1, 0x75, 0x67, 0xba, 0x0e, 0xcf, 0x8d, 0xaa,
	0x0f, 0xc8, 0x2b, 0xb0, 0x94, 0xb7, 0x0c, 0xe6, 0xd1, 0x32, 0x5e, 0xfe, 0x1f, 0xa3, 0x6f, 0xa8,
	0x3b, 0xfe, 0x3f, 0x2c, 0xc2, 0xc9, 0x6d, 0x98, 0xd7, 0x6a, 0x0f, 0x9d, 0xb5, 0xa8, 0xd7, 0x82,
	0x93, 0x34, 0x79, 0x50, 0x78, 0x11, 0x84, 0x6a, 0x2f, 0xb4, 0x34, 0xed, 0x8f, 0x57, 0x60, 0x1e,
	0x17, 0x64, 0x1d, 0x16, 0x71, 0x69, 0x53, 0xf6, 0x49, 0x17, 0xed, 0x59, 0x08, 0x17, 0x70, 0x89,
	0x59, 0xb8, 0x06, 0x2b, 0x09, 0x37, 0xb1, 0x16, 0xa9, 0xbb, 0xfd, 0xa7, 0xdd, 0xaa, 0x77, 0x79,
	0x42, 0x4d, 0xa6, 0x85, 0x1c, 0xf8, 0x7c, 0x96, 0xe3, 0xc9, 0x75, 0x38, 0xdb, 0x17, 0x7c, 0x98,
	0x4c, 0x7a, 0xfa, 0xb3, 0x6e, 0x7d, 0x45, 0xac, 0x38, 0x48, 0xde, 0xd3, 0x77, 0xe1, 0xa9, 0x12,
	0x21, 0x43, 0x07, 0x59, 0x94, 0x8c, 0x84, 0xa4, 0x9f, 0xd7, 0x4b, 0x59, 0x2b, 0x21, 0x6f, 0x29,
	0xbd, 0x6d, 0x71, 0xe4, 0x26, 0x9c, 0x4b, 0x35, 0x8f, 0x85, 0xb1, 0x74, 0x0e, 0x44, 0xbf, 0x68,
	0x20, 0x6a, 0x75, 0x02, 0x72, 0x6b, 0xf2, 0x22, 0x2c, 0x8e, 0x54, 0x22, 0xfa, 0xfb, 0xf4, 0xcb,
	0x06, 0xe8, 0x3c, 0x96, 0xbc, 0x0e, 0x30, 0x8a, 0x3e, 0x62, 0x43, 0x4c, 0x57, 0xf6, 0x80, 0x7e,
	0xd5, 0x00, 0x79, 0x06, 0xe3, 0x6f, 0xbb, 0x70, 0xf2, 0x12, 0x2c, 0x19, 0xa5, 0x33, 0x26, 0x15,
	0xfd, 0xba, 0xc9, 0x99, 0x36, 0xb8, 0xab, 0x70, 0xca, 0x51, 0xcd, 0x1f, 0x8e, 0x85, 0xe6, 0xc9,
	0xec, 0x3c, 0xa2, 0xdf, 0x1c, 0xce, 0xd3, 0x53, 0x6a, 0xc8, 0x23, 0x99, 0x37, 0x68, 0x81, 0xae,
	0x8e, 0x29, 0x1c, 0x21, 0x4f, 0xa2, 0x27, 0x09, 0xef, 0x63, 0xe1, 0x25, 0xde, 0x49, 0x43, 0xbf,
	0x6d, 0x40, 0xd8, 0x9a, 0xc2, 0xdc, 0x03, 0x43, 0x7a, 0xf0, 0xb4, 0xe6, 0x51, 0xc2, 0xa2, 0x38,
	0xc6, 0x2a, 0x67, 0xf8, 0x8a, 0xc3, 0x2c, 0xc6, 0x2e, 0xe1, 0x69, 0x94, 0x61, 0x09, 0x4b, 0xfa,
	0x5d, 0x7d, 0xba, 0x2f, 0x5a, 0x8e, 0x6d, 0x47, 0x11, 0x4e, 0x19, 0x76, 0x3d, 0x01, 0xb9, 0x0a,
	0x8b, 0xbe, 0xfd, 0xe8, 0xf7, 0xf5, 0x54, 0x79, 0x28, 0xb6, 0xe9, 0x72, 0x71, 0x7b, 0xfa, 0x43,
	0x83, 0xab, 0x4d, 0xa2, 0xb1, 0xcc, 0x5a, 0xbd, 0xc8, 0xe0, 0xb8, 0x9a, 0xd6, 0x3f, 0xfd, 0xb1,
	0xfe, 0xe0, 0x55, 0x07, 0xba, 0x55, 0x34, 0x00, 0x79, 0x15, 0xce, 0x08, 0xc3, 0xc6, 0x52, 0x3c,
	0xc4, 0x3a, 0xfd, 0xa9, 0x89, 0x02, 0x61, 0xee, 0xb9, 0x68, 0xf2, 0x36, 0xac, 0x97, 0x7a, 0xaf,
	0xdc, 0xc5, 0x3f, 0xd7, 0xeb, 0x38, 0x3f, 0xe9, 0xc1, 0x37, 0x4a, 0xed, 0xfc, 0x32, 0x2c, 0x3d,
	0xc2, 0x1e, 0xe8, 0x0d, 0x39, 0xfd, 0xa5, 0x81, 0x96, 0x22, 0x98, 0xbc, 0x05, 0x6b, 0xb3, 0x66,
	0xd8, 0x61, 0xf0, 0x6b, 0x83, 0x2a, 0x6e, 0x55, 0x0d, 0xc1, 0x89, 0x70, 0x05, 0x4e, 0x21, 0xf6,
	0xb7, 0x06, 0x58, 0x8c, 0x23, 0xef, 0x1e, 0xf7, 0x8e, 0xff, 0xe3, 0x60, 0xee, 0xf1, 0xdf, 0xf2,
	0x77, 0xe1, 0xfc, 0x84, 0xab, 0xec, 0xee, 0x9f, 0x07, 0x73, 0xf5, 0x93, 0xa9, 0x40, 0x96, 0xdc,
	0xbd, 0xc1, 0x60, 0x43, 0xa8, 0xd9, 0x81, 0x3e, 0xf9, 0xe8, 0x7b, 0xff, 0xfa, 0x40, 0x99, 0xe4,
	0xc3, 0x62, 0x3f, 0x39, 0xf9, 0x77, 0x61, 0x6f, 0xd1, 0x7d, 0x78, 0x5d, 0xfd, 0x2f, 0x00, 0x00,
	0xff, 0xff, 0xe4, 0xc7, 0x2a, 0x4d, 0x59, 0x0a, 0x00, 0x00,
}
