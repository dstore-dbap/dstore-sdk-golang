// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/mi_GetExecuteRights_Ad.proto
// DO NOT EDIT!

/*
Package mi_GetExecuteRights_Ad is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/mi_GetExecuteRights_Ad.proto

It has these top-level messages:
	Parameters
	Response
*/
package mi_GetExecuteRights_Ad

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "gosdk.dstore.de/values"
import dstore_engine_error "gosdk.dstore.de/engine/error"
import dstore_engine_message "gosdk.dstore.de/engine/message"
import dstore_engine_metainformation "gosdk.dstore.de/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	ProcedureName                   *dstore_values.StringValue  `protobuf:"bytes,1,opt,name=procedure_name,json=procedureName" json:"procedure_name,omitempty"`
	ProcedureNameNull               bool                        `protobuf:"varint,1001,opt,name=procedure_name_null,json=procedureNameNull" json:"procedure_name_null,omitempty"`
	GetAdminProceduresForUserId     *dstore_values.IntegerValue `protobuf:"bytes,2,opt,name=get_admin_procedures_for_user_id,json=getAdminProceduresForUserId" json:"get_admin_procedures_for_user_id,omitempty"`
	GetAdminProceduresForUserIdNull bool                        `protobuf:"varint,1002,opt,name=get_admin_procedures_for_user_id_null,json=getAdminProceduresForUserIdNull" json:"get_admin_procedures_for_user_id_null,omitempty"`
	ProcedureCategoryId             *dstore_values.IntegerValue `protobuf:"bytes,3,opt,name=procedure_category_id,json=procedureCategoryId" json:"procedure_category_id,omitempty"`
	ProcedureCategoryIdNull         bool                        `protobuf:"varint,1003,opt,name=procedure_category_id_null,json=procedureCategoryIdNull" json:"procedure_category_id_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetProcedureName() *dstore_values.StringValue {
	if m != nil {
		return m.ProcedureName
	}
	return nil
}

func (m *Parameters) GetGetAdminProceduresForUserId() *dstore_values.IntegerValue {
	if m != nil {
		return m.GetAdminProceduresForUserId
	}
	return nil
}

func (m *Parameters) GetProcedureCategoryId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ProcedureCategoryId
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId                          int32                       `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	ProcedureExists                *dstore_values.BooleanValue `protobuf:"bytes,10001,opt,name=procedure_exists,json=procedureExists" json:"procedure_exists,omitempty"`
	UserExecRightOnDatabaseLevel   *dstore_values.IntegerValue `protobuf:"bytes,10002,opt,name=user_exec_right_on_database_level,json=userExecRightOnDatabaseLevel" json:"user_exec_right_on_database_level,omitempty"`
	PublicExecRightOnDatabaseLevel *dstore_values.IntegerValue `protobuf:"bytes,10003,opt,name=public_exec_right_on_database_level,json=publicExecRightOnDatabaseLevel" json:"public_exec_right_on_database_level,omitempty"`
	ProcedureId                    *dstore_values.IntegerValue `protobuf:"bytes,10004,opt,name=procedure_id,json=procedureId" json:"procedure_id,omitempty"`
	UserName                       *dstore_values.StringValue  `protobuf:"bytes,10005,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	GroupExecRightOndstoreLevel    *dstore_values.BooleanValue `protobuf:"bytes,10006,opt,name=group_exec_right_ondstore_level,json=groupExecRightOndstoreLevel" json:"group_exec_right_ondstore_level,omitempty"`
	ProcedureName                  *dstore_values.StringValue  `protobuf:"bytes,10007,opt,name=procedure_name,json=procedureName" json:"procedure_name,omitempty"`
	UserId                         *dstore_values.IntegerValue `protobuf:"bytes,10008,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	ExecuteRight                   *dstore_values.BooleanValue `protobuf:"bytes,10009,opt,name=execute_right,json=executeRight" json:"execute_right,omitempty"`
	ProcedureFunction              *dstore_values.StringValue  `protobuf:"bytes,10010,opt,name=procedure_function,json=procedureFunction" json:"procedure_function,omitempty"`
	UserExecRightOndstoreLevel     *dstore_values.IntegerValue `protobuf:"bytes,10011,opt,name=user_exec_right_ondstore_level,json=userExecRightOndstoreLevel" json:"user_exec_right_ondstore_level,omitempty"`
	GroupExecRightOnDatabaseLevel  *dstore_values.IntegerValue `protobuf:"bytes,10012,opt,name=group_exec_right_on_database_level,json=groupExecRightOnDatabaseLevel" json:"group_exec_right_on_database_level,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetProcedureExists() *dstore_values.BooleanValue {
	if m != nil {
		return m.ProcedureExists
	}
	return nil
}

func (m *Response_Row) GetUserExecRightOnDatabaseLevel() *dstore_values.IntegerValue {
	if m != nil {
		return m.UserExecRightOnDatabaseLevel
	}
	return nil
}

func (m *Response_Row) GetPublicExecRightOnDatabaseLevel() *dstore_values.IntegerValue {
	if m != nil {
		return m.PublicExecRightOnDatabaseLevel
	}
	return nil
}

func (m *Response_Row) GetProcedureId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ProcedureId
	}
	return nil
}

func (m *Response_Row) GetUserName() *dstore_values.StringValue {
	if m != nil {
		return m.UserName
	}
	return nil
}

func (m *Response_Row) GetGroupExecRightOndstoreLevel() *dstore_values.BooleanValue {
	if m != nil {
		return m.GroupExecRightOndstoreLevel
	}
	return nil
}

func (m *Response_Row) GetProcedureName() *dstore_values.StringValue {
	if m != nil {
		return m.ProcedureName
	}
	return nil
}

func (m *Response_Row) GetUserId() *dstore_values.IntegerValue {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *Response_Row) GetExecuteRight() *dstore_values.BooleanValue {
	if m != nil {
		return m.ExecuteRight
	}
	return nil
}

func (m *Response_Row) GetProcedureFunction() *dstore_values.StringValue {
	if m != nil {
		return m.ProcedureFunction
	}
	return nil
}

func (m *Response_Row) GetUserExecRightOndstoreLevel() *dstore_values.IntegerValue {
	if m != nil {
		return m.UserExecRightOndstoreLevel
	}
	return nil
}

func (m *Response_Row) GetGroupExecRightOnDatabaseLevel() *dstore_values.IntegerValue {
	if m != nil {
		return m.GroupExecRightOnDatabaseLevel
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.mi_GetExecuteRights_Ad.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.mi_GetExecuteRights_Ad.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.mi_GetExecuteRights_Ad.Response.Row")
}

func init() {
	proto.RegisterFile("dstore/engine/procedures/mi_GetExecuteRights_Ad.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 729 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x55, 0xdb, 0x6e, 0xd3, 0x4a,
	0x14, 0x55, 0x4f, 0x4e, 0x9b, 0x9e, 0xdd, 0xf6, 0xb4, 0x67, 0xaa, 0x03, 0x21, 0x81, 0xb6, 0xb4,
	0x20, 0xf1, 0xe4, 0xa0, 0xa2, 0x4a, 0x7d, 0x40, 0x42, 0x29, 0xbd, 0xa8, 0x88, 0xa6, 0x95, 0x25,
	0x40, 0xf0, 0x32, 0x38, 0xf1, 0xae, 0xb1, 0x70, 0x66, 0xa2, 0x19, 0xbb, 0x2d, 0x3f, 0xc0, 0x33,
	0xf7, 0xfb, 0xe7, 0xf0, 0x33, 0x5c, 0x3e, 0x82, 0x19, 0x8f, 0x13, 0xc7, 0x6e, 0x68, 0xcc, 0x4b,
	0xa2, 0xf1, 0xec, 0xb5, 0x66, 0xed, 0x35, 0xcb, 0xdb, 0xb0, 0xe6, 0xca, 0x90, 0x0b, 0xac, 0x23,
	0xf3, 0x7c, 0x86, 0xf5, 0xae, 0xe0, 0x6d, 0x74, 0x23, 0x81, 0xb2, 0xde, 0xf1, 0xe9, 0x0e, 0x86,
	0x5b, 0x27, 0xd8, 0x8e, 0x42, 0xb4, 0x7d, 0xef, 0x49, 0x28, 0x69, 0xc3, 0xb5, 0x54, 0x45, 0xc8,
	0xc9, 0x15, 0x03, 0xb3, 0x0c, 0xcc, 0x1a, 0x5e, 0x5b, 0x9d, 0x4f, 0xc8, 0x8f, 0x9c, 0x20, 0x42,
	0x69, 0xa0, 0xd5, 0x0b, 0xd9, 0x13, 0x51, 0x08, 0x2e, 0x92, 0xad, 0x5a, 0x76, 0xab, 0x83, 0x52,
	0x3a, 0x1e, 0x26, 0x9b, 0x2b, 0xf9, 0xcd, 0xd0, 0xf1, 0xd9, 0x21, 0x17, 0x1d, 0x27, 0xf4, 0x39,
	0x33, 0x45, 0xcb, 0x5f, 0x4b, 0x00, 0x07, 0x8e, 0x70, 0xd4, 0x2e, 0x0a, 0x49, 0x1a, 0xf0, 0x6f,
	0xbf, 0x23, 0xca, 0xd4, 0xd3, 0xca, 0xd8, 0xd2, 0xd8, 0xb5, 0xa9, 0xd5, 0xaa, 0x95, 0xe8, 0x4f,
	0x94, 0xc9, 0x50, 0xf8, 0xcc, 0xbb, 0xaf, 0x17, 0xf6, 0x4c, 0x1f, 0xd1, 0x54, 0x00, 0x52, 0x87,
	0xf9, 0x2c, 0x05, 0x65, 0x51, 0x10, 0x54, 0xbe, 0x95, 0x15, 0xd1, 0xa4, 0xfd, 0x5f, 0xa6, 0xb8,
	0xa9, 0x76, 0x48, 0x0b, 0x96, 0x3c, 0x0c, 0xa9, 0xe3, 0x76, 0x7c, 0x46, 0x53, 0x3f, 0xa9, 0x92,
	0x4a, 0x23, 0x89, 0x82, 0xfa, 0x6e, 0xe5, 0xaf, 0x58, 0x45, 0x2d, 0xa7, 0xc2, 0x67, 0x21, 0x7a,
	0x28, 0x8c, 0x8c, 0x9a, 0x22, 0x69, 0x68, 0x8e, 0x83, 0x3e, 0xc5, 0x36, 0x17, 0xf7, 0x14, 0xc1,
	0xae, 0x4b, 0xf6, 0xe1, 0xea, 0xa8, 0x33, 0x8c, 0xcc, 0xef, 0x46, 0xe6, 0xe2, 0x19, 0x64, 0xb1,
	0xe8, 0x7d, 0xf8, 0x3f, 0xed, 0xb2, 0xed, 0x28, 0x1d, 0x5c, 0x3c, 0xd3, 0x4a, 0x4b, 0xa3, 0x95,
	0xa6, 0xfe, 0xdc, 0x4e, 0x80, 0x4a, 0xe1, 0x4d, 0xa8, 0x0e, 0x25, 0x34, 0xb2, 0x7e, 0x18, 0x59,
	0xe7, 0x87, 0x20, 0xb5, 0x9c, 0xe5, 0xe7, 0x00, 0x93, 0x36, 0xca, 0x2e, 0x67, 0x12, 0xc9, 0x75,
	0x18, 0x8f, 0x43, 0x92, 0xbf, 0xbb, 0x24, 0x7b, 0x26, 0x40, 0x5b, 0xfa, 0xd7, 0x36, 0x85, 0xe4,
	0x21, 0xcc, 0xe9, 0x78, 0xd0, 0x81, 0x7c, 0x28, 0xcb, 0x4b, 0x0a, 0x6c, 0xe5, 0xc0, 0xf9, 0x14,
	0xed, 0xa9, 0xf5, 0x6e, 0xba, 0xb6, 0x67, 0x3b, 0xd9, 0x07, 0x64, 0x1d, 0xca, 0x49, 0x2c, 0x95,
	0x35, 0x9a, 0x71, 0xe1, 0x14, 0xa3, 0x09, 0xed, 0x9e, 0xf9, 0xb7, 0x7b, 0xe5, 0x64, 0x13, 0x4a,
	0x82, 0x1f, 0x57, 0xfe, 0x8e, 0x51, 0xab, 0x56, 0x91, 0x17, 0xc8, 0xea, 0x79, 0x60, 0xd9, 0xfc,
	0xd8, 0xd6, 0xf0, 0xea, 0xcf, 0x32, 0x94, 0xd4, 0x82, 0x9c, 0x83, 0x09, 0xb5, 0xd4, 0x37, 0xf4,
	0xa2, 0xa9, 0x6c, 0x19, 0xb7, 0xc7, 0xd5, 0x52, 0xf9, 0xbe, 0x03, 0x73, 0xa9, 0xef, 0x78, 0xe2,
	0xcb, 0x50, 0x56, 0x5e, 0x36, 0x87, 0x5e, 0x62, 0x8b, 0xf3, 0x00, 0x1d, 0x66, 0x2e, 0x71, 0xb6,
	0x8f, 0xda, 0x8a, 0x41, 0x04, 0xe1, 0x72, 0x9c, 0x24, 0x54, 0x9a, 0xa8, 0xd0, 0x8a, 0x28, 0x67,
	0xd4, 0x75, 0x42, 0xa7, 0xe5, 0x48, 0xa4, 0x01, 0x1e, 0x61, 0x50, 0x79, 0xd5, 0x1c, 0x1d, 0x8f,
	0x8b, 0x9a, 0x46, 0x77, 0x16, 0xb7, 0xb5, 0xcf, 0x36, 0x13, 0x8a, 0xbb, 0x9a, 0x81, 0xf8, 0xb0,
	0xd2, 0x8d, 0x5a, 0x81, 0xdf, 0x3e, 0xfb, 0xa0, 0xd7, 0x05, 0x0e, 0x5a, 0x30, 0x44, 0xbf, 0x3d,
	0xea, 0x16, 0x4c, 0xa7, 0xd6, 0x28, 0xe3, 0xde, 0x14, 0xe0, 0x9c, 0xea, 0x23, 0x94, 0xb7, 0xeb,
	0xf0, 0x4f, 0x6c, 0x49, 0x3c, 0x48, 0xde, 0x36, 0x47, 0x4e, 0x92, 0x49, 0x5d, 0x1d, 0x0f, 0x91,
	0x16, 0x2c, 0x7a, 0x82, 0x47, 0xdd, 0x6c, 0x93, 0x06, 0x99, 0x74, 0xf8, 0xae, 0xc0, 0x25, 0xd5,
	0x62, 0x92, 0x81, 0x06, 0x4d, 0xad, 0x69, 0x6f, 0xe3, 0xd4, 0xac, 0x7b, 0xdf, 0xfc, 0xd3, 0x61,
	0xb7, 0x06, 0xe5, 0xde, 0x88, 0xfa, 0x50, 0xc0, 0x9d, 0x89, 0xc8, 0x8c, 0xa3, 0x06, 0xcc, 0xa0,
	0x89, 0xae, 0xe9, 0xad, 0xf2, 0xb1, 0x40, 0x33, 0xd3, 0x38, 0x90, 0x76, 0x72, 0x07, 0x48, 0xaa,
	0xfe, 0x30, 0x62, 0xed, 0xf8, 0xa5, 0xfd, 0x34, 0xba, 0x83, 0x74, 0x02, 0x6f, 0x27, 0x28, 0xf2,
	0x18, 0x16, 0x4e, 0x47, 0x37, 0x63, 0xf6, 0xe7, 0x02, 0xcd, 0x55, 0x73, 0xb9, 0x1d, 0xf4, 0xda,
	0x83, 0xe5, 0x21, 0xf7, 0x99, 0x0f, 0xed, 0x97, 0x02, 0xa7, 0x5c, 0xca, 0x5f, 0x69, 0x26, 0xb3,
	0x1b, 0x0f, 0xa0, 0xe6, 0xf3, 0xdc, 0xac, 0x48, 0xe7, 0xfd, 0xa3, 0x75, 0x8f, 0x4b, 0xf7, 0x69,
	0x6f, 0xdf, 0x2d, 0xfe, 0x19, 0x6f, 0x4d, 0xc4, 0xdf, 0xcb, 0x1b, 0xbf, 0x02, 0x00, 0x00, 0xff,
	0xff, 0x31, 0x22, 0x37, 0xc2, 0x00, 0x08, 0x00, 0x00,
}
