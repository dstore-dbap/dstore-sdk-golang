// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/im_SearchBinaries_Ad.proto
// DO NOT EDIT!

/*
Package im_SearchBinaries_Ad is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/im_SearchBinaries_Ad.proto

It has these top-level messages:
	Parameters
	Response
*/
package im_SearchBinaries_Ad

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "gosdk.dstore.de/values"
import dstore_engine_error "gosdk.dstore.de/engine/error"
import dstore_engine_message "gosdk.dstore.de/engine/message"
import dstore_engine_metainformation "gosdk.dstore.de/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	AssignedToTable              *dstore_values.IntegerValue `protobuf:"bytes,1,opt,name=assigned_to_table,json=assignedToTable" json:"assigned_to_table,omitempty"`
	AssignedToTableNull          bool                        `protobuf:"varint,1001,opt,name=assigned_to_table_null,json=assignedToTableNull" json:"assigned_to_table_null,omitempty"`
	InputNestLevelConds          *dstore_values.IntegerValue `protobuf:"bytes,2,opt,name=input_nest_level_conds,json=inputNestLevelConds" json:"input_nest_level_conds,omitempty"`
	InputNestLevelCondsNull      bool                        `protobuf:"varint,1002,opt,name=input_nest_level_conds_null,json=inputNestLevelCondsNull" json:"input_nest_level_conds_null,omitempty"`
	ValueSeparatorINOperator     *dstore_values.StringValue  `protobuf:"bytes,3,opt,name=value_separator_i_n_operator,json=valueSeparatorINOperator" json:"value_separator_i_n_operator,omitempty"`
	ValueSeparatorINOperatorNull bool                        `protobuf:"varint,1003,opt,name=value_separator_i_n_operator_null,json=valueSeparatorINOperatorNull" json:"value_separator_i_n_operator_null,omitempty"`
	StartAtRowNo                 *dstore_values.IntegerValue `protobuf:"bytes,4,opt,name=start_at_row_no,json=startAtRowNo" json:"start_at_row_no,omitempty"`
	StartAtRowNoNull             bool                        `protobuf:"varint,1004,opt,name=start_at_row_no_null,json=startAtRowNoNull" json:"start_at_row_no_null,omitempty"`
	RowCount                     *dstore_values.IntegerValue `protobuf:"bytes,5,opt,name=row_count,json=rowCount" json:"row_count,omitempty"`
	RowCountNull                 bool                        `protobuf:"varint,1005,opt,name=row_count_null,json=rowCountNull" json:"row_count_null,omitempty"`
	OutputBinaryCharacId1        *dstore_values.IntegerValue `protobuf:"bytes,6,opt,name=output_binary_charac_id1,json=outputBinaryCharacId1" json:"output_binary_charac_id1,omitempty"`
	OutputBinaryCharacId1Null    bool                        `protobuf:"varint,1006,opt,name=output_binary_charac_id1_null,json=outputBinaryCharacId1Null" json:"output_binary_charac_id1_null,omitempty"`
	OutputBinaryCharacId2        *dstore_values.IntegerValue `protobuf:"bytes,7,opt,name=output_binary_charac_id2,json=outputBinaryCharacId2" json:"output_binary_charac_id2,omitempty"`
	OutputBinaryCharacId2Null    bool                        `protobuf:"varint,1007,opt,name=output_binary_charac_id2_null,json=outputBinaryCharacId2Null" json:"output_binary_charac_id2_null,omitempty"`
	OutputBinaryCharacId3        *dstore_values.IntegerValue `protobuf:"bytes,8,opt,name=output_binary_charac_id3,json=outputBinaryCharacId3" json:"output_binary_charac_id3,omitempty"`
	OutputBinaryCharacId3Null    bool                        `protobuf:"varint,1008,opt,name=output_binary_charac_id3_null,json=outputBinaryCharacId3Null" json:"output_binary_charac_id3_null,omitempty"`
	IncludeBinaryCode            *dstore_values.BooleanValue `protobuf:"bytes,9,opt,name=include_binary_code,json=includeBinaryCode" json:"include_binary_code,omitempty"`
	IncludeBinaryCodeNull        bool                        `protobuf:"varint,1009,opt,name=include_binary_code_null,json=includeBinaryCodeNull" json:"include_binary_code_null,omitempty"`
	NodeCharacteristicId1        *dstore_values.IntegerValue `protobuf:"bytes,10,opt,name=node_characteristic_id1,json=nodeCharacteristicId1" json:"node_characteristic_id1,omitempty"`
	NodeCharacteristicId1Null    bool                        `protobuf:"varint,1010,opt,name=node_characteristic_id1_null,json=nodeCharacteristicId1Null" json:"node_characteristic_id1_null,omitempty"`
	NodeCharacteristicId2        *dstore_values.IntegerValue `protobuf:"bytes,11,opt,name=node_characteristic_id2,json=nodeCharacteristicId2" json:"node_characteristic_id2,omitempty"`
	NodeCharacteristicId2Null    bool                        `protobuf:"varint,1011,opt,name=node_characteristic_id2_null,json=nodeCharacteristicId2Null" json:"node_characteristic_id2_null,omitempty"`
	NodeCharacteristicId3        *dstore_values.IntegerValue `protobuf:"bytes,12,opt,name=node_characteristic_id3,json=nodeCharacteristicId3" json:"node_characteristic_id3,omitempty"`
	NodeCharacteristicId3Null    bool                        `protobuf:"varint,1012,opt,name=node_characteristic_id3_null,json=nodeCharacteristicId3Null" json:"node_characteristic_id3_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetAssignedToTable() *dstore_values.IntegerValue {
	if m != nil {
		return m.AssignedToTable
	}
	return nil
}

func (m *Parameters) GetInputNestLevelConds() *dstore_values.IntegerValue {
	if m != nil {
		return m.InputNestLevelConds
	}
	return nil
}

func (m *Parameters) GetValueSeparatorINOperator() *dstore_values.StringValue {
	if m != nil {
		return m.ValueSeparatorINOperator
	}
	return nil
}

func (m *Parameters) GetStartAtRowNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.StartAtRowNo
	}
	return nil
}

func (m *Parameters) GetRowCount() *dstore_values.IntegerValue {
	if m != nil {
		return m.RowCount
	}
	return nil
}

func (m *Parameters) GetOutputBinaryCharacId1() *dstore_values.IntegerValue {
	if m != nil {
		return m.OutputBinaryCharacId1
	}
	return nil
}

func (m *Parameters) GetOutputBinaryCharacId2() *dstore_values.IntegerValue {
	if m != nil {
		return m.OutputBinaryCharacId2
	}
	return nil
}

func (m *Parameters) GetOutputBinaryCharacId3() *dstore_values.IntegerValue {
	if m != nil {
		return m.OutputBinaryCharacId3
	}
	return nil
}

func (m *Parameters) GetIncludeBinaryCode() *dstore_values.BooleanValue {
	if m != nil {
		return m.IncludeBinaryCode
	}
	return nil
}

func (m *Parameters) GetNodeCharacteristicId1() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeCharacteristicId1
	}
	return nil
}

func (m *Parameters) GetNodeCharacteristicId2() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeCharacteristicId2
	}
	return nil
}

func (m *Parameters) GetNodeCharacteristicId3() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeCharacteristicId3
	}
	return nil
}

type Response struct {
	Error                    *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation          []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message                  []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row                      []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
	NumberOfElementsInResult *dstore_values.IntegerValue                      `protobuf:"bytes,101,opt,name=number_of_elements_in_result,json=numberOfElementsInResult" json:"number_of_elements_in_result,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

func (m *Response) GetNumberOfElementsInResult() *dstore_values.IntegerValue {
	if m != nil {
		return m.NumberOfElementsInResult
	}
	return nil
}

type Response_Row struct {
	RowId                int32                       `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	BinaryCodeId         *dstore_values.IntegerValue `protobuf:"bytes,10001,opt,name=binary_code_id,json=binaryCodeId" json:"binary_code_id,omitempty"`
	NodeId               *dstore_values.IntegerValue `protobuf:"bytes,10002,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	ChosenTreeNodeId     *dstore_values.IntegerValue `protobuf:"bytes,10003,opt,name=chosen_tree_node_id,json=chosenTreeNodeId" json:"chosen_tree_node_id,omitempty"`
	Value3               *dstore_values.StringValue  `protobuf:"bytes,10004,opt,name=value3" json:"value3,omitempty"`
	BinaryValue1         *dstore_values.StringValue  `protobuf:"bytes,10005,opt,name=binary_value1,json=binaryValue1" json:"binary_value1,omitempty"`
	Value1               *dstore_values.StringValue  `protobuf:"bytes,10006,opt,name=value1" json:"value1,omitempty"`
	BinaryValue3         *dstore_values.StringValue  `protobuf:"bytes,10007,opt,name=binary_value3,json=binaryValue3" json:"binary_value3,omitempty"`
	Value2               *dstore_values.StringValue  `protobuf:"bytes,10008,opt,name=value2" json:"value2,omitempty"`
	BinaryValue2         *dstore_values.StringValue  `protobuf:"bytes,10009,opt,name=binary_value2,json=binaryValue2" json:"binary_value2,omitempty"`
	ThumbnailCode        *dstore_values.BytesValue   `protobuf:"bytes,20008,opt,name=thumbnail_code,json=thumbnailCode" json:"thumbnail_code,omitempty"`
	BinaryCode           *dstore_values.BytesValue   `protobuf:"bytes,20011,opt,name=binary_code,json=binaryCode" json:"binary_code,omitempty"`
	NodeCharacteristicId *dstore_values.IntegerValue `protobuf:"bytes,30002,opt,name=node_characteristic_id,json=nodeCharacteristicId" json:"node_characteristic_id,omitempty"`
	Value                *dstore_values.StringValue  `protobuf:"bytes,30003,opt,name=value" json:"value,omitempty"`
	ValueId              *dstore_values.IntegerValue `protobuf:"bytes,30005,opt,name=value_id,json=valueId" json:"value_id,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetBinaryCodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.BinaryCodeId
	}
	return nil
}

func (m *Response_Row) GetNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *Response_Row) GetChosenTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ChosenTreeNodeId
	}
	return nil
}

func (m *Response_Row) GetValue3() *dstore_values.StringValue {
	if m != nil {
		return m.Value3
	}
	return nil
}

func (m *Response_Row) GetBinaryValue1() *dstore_values.StringValue {
	if m != nil {
		return m.BinaryValue1
	}
	return nil
}

func (m *Response_Row) GetValue1() *dstore_values.StringValue {
	if m != nil {
		return m.Value1
	}
	return nil
}

func (m *Response_Row) GetBinaryValue3() *dstore_values.StringValue {
	if m != nil {
		return m.BinaryValue3
	}
	return nil
}

func (m *Response_Row) GetValue2() *dstore_values.StringValue {
	if m != nil {
		return m.Value2
	}
	return nil
}

func (m *Response_Row) GetBinaryValue2() *dstore_values.StringValue {
	if m != nil {
		return m.BinaryValue2
	}
	return nil
}

func (m *Response_Row) GetThumbnailCode() *dstore_values.BytesValue {
	if m != nil {
		return m.ThumbnailCode
	}
	return nil
}

func (m *Response_Row) GetBinaryCode() *dstore_values.BytesValue {
	if m != nil {
		return m.BinaryCode
	}
	return nil
}

func (m *Response_Row) GetNodeCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeCharacteristicId
	}
	return nil
}

func (m *Response_Row) GetValue() *dstore_values.StringValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Response_Row) GetValueId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ValueId
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.im_SearchBinaries_Ad.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.im_SearchBinaries_Ad.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.im_SearchBinaries_Ad.Response.Row")
}

func init() {
	proto.RegisterFile("dstore/engine/procedures/im_SearchBinaries_Ad.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 1027 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x97, 0x5b, 0x6f, 0x23, 0x35,
	0x14, 0xc7, 0xb5, 0x94, 0x5c, 0xd6, 0x6d, 0xb7, 0xdd, 0xe9, 0x6e, 0xd7, 0xbd, 0x80, 0xa0, 0x08,
	0x89, 0xa7, 0x74, 0x33, 0x03, 0x88, 0x07, 0x90, 0x68, 0xab, 0x15, 0x44, 0xb0, 0xd9, 0xd5, 0xb4,
	0x20, 0xb1, 0x3c, 0x58, 0x93, 0x8c, 0x9b, 0x8e, 0x98, 0xd8, 0xd1, 0xd8, 0xd9, 0x55, 0xdf, 0x79,
	0xe7, 0x7e, 0x93, 0xf8, 0x00, 0x48, 0x3c, 0x20, 0x81, 0xf8, 0x50, 0x94, 0xfb, 0xe5, 0x03, 0x70,
	0xec, 0xe3, 0xa4, 0xed, 0x34, 0xc9, 0xcc, 0xf6, 0xa5, 0x95, 0xc7, 0xe7, 0xff, 0x3f, 0x3f, 0x3b,
	0xf6, 0x39, 0x33, 0x24, 0x88, 0x95, 0x96, 0x19, 0xdf, 0xe6, 0xa2, 0x97, 0x08, 0xbe, 0x3d, 0xc8,
	0x64, 0x97, 0xc7, 0xc3, 0x8c, 0xab, 0xed, 0xa4, 0xcf, 0xf6, 0x79, 0x94, 0x75, 0x8f, 0x76, 0x13,
	0x11, 0x65, 0x09, 0x57, 0x6c, 0x27, 0x6e, 0xc0, 0xbc, 0x96, 0xde, 0x16, 0x8a, 0x1a, 0x28, 0x6a,
	0x4c, 0x8a, 0x5c, 0x5f, 0x71, 0xc6, 0x0f, 0xa3, 0x74, 0xc8, 0x15, 0x0a, 0xd7, 0xd7, 0xce, 0x67,
	0xe3, 0x59, 0x26, 0x33, 0x37, 0xb5, 0x71, 0x7e, 0xaa, 0xcf, 0x95, 0x8a, 0x7a, 0xdc, 0x4d, 0x3e,
	0x97, 0x9f, 0xd4, 0x51, 0x22, 0x0e, 0x65, 0xd6, 0x8f, 0x74, 0x22, 0x05, 0x06, 0x6d, 0xfd, 0xb0,
	0x48, 0xc8, 0xfd, 0x28, 0x8b, 0x60, 0x96, 0x67, 0xca, 0x7b, 0x83, 0x5c, 0x8f, 0x94, 0x4a, 0x7a,
	0x82, 0xc7, 0x4c, 0x4b, 0xa6, 0xa3, 0x4e, 0xca, 0xe9, 0x95, 0x67, 0xae, 0xbc, 0x30, 0xef, 0x6f,
	0x34, 0xdc, 0x02, 0x1c, 0x5c, 0x22, 0x34, 0xef, 0xf1, 0xec, 0x5d, 0x33, 0x0a, 0x97, 0x46, 0xaa,
	0x03, 0x79, 0x60, 0x34, 0xde, 0x8b, 0x64, 0xf5, 0x82, 0x11, 0x13, 0xc3, 0x34, 0xa5, 0xbf, 0xd4,
	0xc0, 0xae, 0x1e, 0xae, 0xe4, 0x14, 0x6d, 0x98, 0xf3, 0xee, 0x93, 0xd5, 0x44, 0x0c, 0x86, 0x9a,
	0x09, 0xae, 0x34, 0x4b, 0xf9, 0x43, 0x9e, 0xb2, 0xae, 0x14, 0xb1, 0xa2, 0x4f, 0x14, 0x33, 0xac,
	0x58, 0x69, 0x1b, 0x94, 0x6f, 0x1b, 0xe1, 0x9e, 0xd1, 0x79, 0xaf, 0x91, 0x8d, 0xc9, 0x8e, 0x08,
	0x73, 0x82, 0x30, 0xb7, 0x26, 0x48, 0x2d, 0xd0, 0x03, 0xb2, 0x69, 0x53, 0x31, 0xc5, 0x07, 0xb0,
	0x4b, 0x90, 0x9b, 0x25, 0x4c, 0x30, 0x39, 0xe0, 0x76, 0x40, 0xe7, 0x2c, 0xd6, 0x7a, 0x0e, 0x4b,
	0xe9, 0x2c, 0x11, 0x3d, 0xa4, 0xa2, 0xf6, 0xd9, 0xfe, 0x48, 0xde, 0x6a, 0xdf, 0x73, 0x5a, 0xef,
	0x4d, 0xf2, 0xec, 0x2c, 0x6f, 0x04, 0xfc, 0x15, 0x01, 0x37, 0xa7, 0xb9, 0x58, 0xca, 0x5d, 0xb2,
	0xa4, 0x74, 0x94, 0x69, 0x16, 0x69, 0x96, 0xc9, 0x47, 0x4c, 0x48, 0xfa, 0x64, 0xf1, 0x7e, 0x2d,
	0x58, 0xcd, 0x8e, 0x0e, 0xe5, 0xa3, 0xb6, 0xf4, 0xb6, 0xc9, 0x8d, 0x9c, 0x07, 0x02, 0xfc, 0x86,
	0x00, 0xcb, 0x67, 0x83, 0x6d, 0xd2, 0x57, 0xc8, 0x55, 0x13, 0xd7, 0x95, 0x43, 0xa1, 0x69, 0xa5,
	0x38, 0x5d, 0x1d, 0xa2, 0xf7, 0x4c, 0xb0, 0xf7, 0x3c, 0xb9, 0x36, 0x56, 0x62, 0x92, 0xdf, 0x31,
	0xc9, 0xc2, 0x28, 0xc4, 0x26, 0x38, 0x20, 0x54, 0x0e, 0xb5, 0xf9, 0xed, 0x3a, 0xe6, 0x8a, 0x1c,
	0xb3, 0xee, 0x11, 0xac, 0xbe, 0xcb, 0x92, 0xb8, 0x49, 0xab, 0xc5, 0xf9, 0x6e, 0xa2, 0xd8, 0x5e,
	0xaf, 0xe3, 0x3d, 0x2b, 0x6d, 0xc5, 0x4d, 0x6f, 0x87, 0x3c, 0x35, 0xcd, 0x15, 0x59, 0xfe, 0x40,
	0x96, 0xb5, 0x89, 0xf2, 0x02, 0x30, 0x9f, 0xd6, 0x2e, 0x09, 0xe6, 0xcf, 0x00, 0xf3, 0x11, 0xec,
	0xcf, 0x19, 0x60, 0x7e, 0x01, 0x58, 0x40, 0xeb, 0x97, 0x04, 0x0b, 0x66, 0x80, 0x05, 0x08, 0xf6,
	0xd7, 0x0c, 0xb0, 0xc0, 0x82, 0xbd, 0x45, 0xe0, 0x72, 0x76, 0xd3, 0x61, 0xcc, 0xc7, 0x1e, 0x32,
	0xe6, 0xf4, 0xea, 0x44, 0xa6, 0x8e, 0x94, 0x29, 0x8f, 0x04, 0x32, 0x5d, 0x77, 0x3a, 0xe7, 0x0a,
	0x2a, 0x38, 0x78, 0x74, 0x82, 0x19, 0xa2, 0xfc, 0x8d, 0x28, 0x37, 0x2f, 0xa8, 0x2c, 0xc6, 0x3e,
	0xb9, 0x25, 0x4c, 0x28, 0x2e, 0x00, 0x0a, 0x5e, 0xa2, 0x74, 0x82, 0x07, 0x8a, 0x94, 0xd8, 0x1e,
	0xa3, 0xdd, 0x3b, 0x27, 0x35, 0x07, 0xea, 0x75, 0xb2, 0x39, 0xc5, 0x14, 0x91, 0xfe, 0x71, 0xbb,
	0x33, 0x51, 0x3d, 0x1b, 0xcb, 0xa7, 0xf3, 0x97, 0xc4, 0xf2, 0xa7, 0x63, 0xb9, 0xd3, 0xf4, 0xef,
	0x0c, 0x2c, 0x7f, 0x36, 0x56, 0x40, 0x17, 0x2e, 0x89, 0x15, 0x4c, 0xc7, 0x72, 0x67, 0xe9, 0xbf,
	0x19, 0x58, 0xf6, 0x2c, 0x6d, 0x7d, 0x48, 0x48, 0x3d, 0xe4, 0x6a, 0x20, 0x85, 0xe2, 0xde, 0x6d,
	0x52, 0xb1, 0xfd, 0xd0, 0xf5, 0xa8, 0x71, 0x21, 0x76, 0x4d, 0x16, 0x7b, 0xe5, 0x1d, 0xf3, 0x37,
	0xc4, 0x40, 0xef, 0x3d, 0xb2, 0x6c, 0x3a, 0x21, 0x3b, 0xd3, 0x0a, 0xa1, 0xb9, 0xcc, 0x81, 0xb8,
	0x91, 0x13, 0xe7, 0x1b, 0xe6, 0x5d, 0x18, 0xb7, 0x4e, 0xc7, 0xe1, 0x52, 0xff, 0xfc, 0x03, 0x38,
	0x98, 0x35, 0xd7, 0x81, 0xa1, 0x2f, 0x18, 0xc7, 0xa7, 0x2f, 0x38, 0x62, 0x7f, 0xbe, 0x8b, 0xff,
	0xc3, 0x51, 0x38, 0x14, 0xf0, 0x39, 0x28, 0x7d, 0x50, 0xb4, 0x8d, 0xea, 0x76, 0xa3, 0xf8, 0x4d,
	0xa1, 0x31, 0xda, 0x81, 0x06, 0x14, 0xe4, 0xd0, 0x88, 0xbd, 0xf7, 0x61, 0x67, 0x87, 0xfd, 0x0e,
	0xcf, 0x98, 0x3c, 0x64, 0x3c, 0xe5, 0x7d, 0x2e, 0xb4, 0x82, 0x65, 0x32, 0x78, 0x2f, 0x19, 0xa6,
	0x9a, 0xf2, 0xe2, 0xdf, 0x8c, 0xa2, 0xc1, 0xbd, 0xc3, 0x3b, 0x4e, 0xde, 0x12, 0xa1, 0x15, 0xaf,
	0x7f, 0x54, 0x23, 0x73, 0x90, 0xc9, 0x5b, 0x25, 0x55, 0x53, 0xba, 0x93, 0x98, 0x7e, 0xdc, 0x06,
	0xbf, 0x4a, 0x58, 0x81, 0x61, 0x2b, 0x86, 0x05, 0x5c, 0x3b, 0x7b, 0x17, 0x61, 0xfe, 0x93, 0x76,
	0x89, 0x0e, 0xd4, 0x19, 0xdf, 0x4f, 0xf0, 0x78, 0x89, 0xd4, 0x84, 0x13, 0x7f, 0x5a, 0x42, 0x5c,
	0x15, 0x28, 0x83, 0xda, 0xd2, 0x3d, 0x92, 0x8a, 0x0b, 0xa6, 0x33, 0x0e, 0x65, 0xc0, 0x59, 0x7c,
	0x56, 0xc2, 0x62, 0x19, 0x85, 0x07, 0xa0, 0x6b, 0xa3, 0x59, 0x40, 0xaa, 0x36, 0x30, 0xa0, 0x9f,
	0xb7, 0x0b, 0x5b, 0xbb, 0x0b, 0x85, 0x33, 0xbd, 0xe8, 0x16, 0x6f, 0x1f, 0x34, 0xe9, 0x17, 0xc5,
	0x5a, 0xb7, 0x74, 0x3b, 0x68, 0x8e, 0xd3, 0x36, 0xe9, 0x97, 0x65, 0xd3, 0x36, 0xf3, 0x69, 0x03,
	0xfa, 0xd5, 0xe3, 0xa5, 0x0d, 0xc6, 0x69, 0x7d, 0xfa, 0x75, 0xd9, 0xb4, 0x7e, 0x3e, 0xad, 0x4f,
	0xbf, 0x79, 0xbc, 0xb4, 0xbe, 0x39, 0x2c, 0xfa, 0x08, 0x4e, 0x9a, 0x88, 0x92, 0x14, 0x1b, 0xc1,
	0x77, 0xdf, 0xe2, 0xfd, 0x5d, 0xcb, 0xb7, 0x82, 0x63, 0xcd, 0x15, 0x5a, 0x2c, 0x8e, 0x25, 0xb6,
	0x09, 0xbc, 0x4a, 0xe6, 0xcf, 0x76, 0x92, 0xef, 0x8b, 0x0d, 0xc8, 0xe9, 0x61, 0x83, 0xd2, 0xb6,
	0x3a, 0xb9, 0x0a, 0xd1, 0x1f, 0x4f, 0x4a, 0xbc, 0xed, 0xde, 0x98, 0x54, 0x9d, 0x3c, 0x9f, 0x54,
	0x6c, 0x30, 0xfd, 0xe9, 0xe4, 0x4a, 0xe1, 0x8e, 0x60, 0x28, 0x94, 0x8c, 0x3a, 0xbe, 0x03, 0x42,
	0xea, 0x9f, 0xcb, 0xa4, 0xae, 0xd9, 0x87, 0xad, 0x78, 0xf7, 0x1d, 0x78, 0xb1, 0x95, 0xb9, 0x4a,
	0x71, 0xfa, 0x21, 0xf2, 0xe0, 0xe5, 0x9e, 0x54, 0xf1, 0x07, 0xa3, 0xf9, 0xb8, 0xec, 0xb7, 0x4a,
	0xa7, 0x6a, 0x3f, 0x0b, 0x82, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x68, 0xf3, 0x88, 0x83, 0xe3,
	0x0c, 0x00, 0x00,
}
