// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/fo_GetPostingProperties_Pu.proto
// DO NOT EDIT!

/*
Package fo_GetPostingProperties_Pu is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/fo_GetPostingProperties_Pu.proto

It has these top-level messages:
	Parameters
	Response
*/
package fo_GetPostingProperties_Pu

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "gosdk.dstore.de/values"
import dstore_engine_error "gosdk.dstore.de/engine/error"
import dstore_engine_message "gosdk.dstore.de/engine/message"
import dstore_engine_metainformation "gosdk.dstore.de/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	PersonIdentificationValues      *dstore_values.StringValue  `protobuf:"bytes,1,opt,name=person_identification_values,json=personIdentificationValues" json:"person_identification_values,omitempty"`
	PersonIdentificationValuesNull  bool                        `protobuf:"varint,1001,opt,name=person_identification_values_null,json=personIdentificationValuesNull" json:"person_identification_values_null,omitempty"`
	PersonTypeId                    *dstore_values.IntegerValue `protobuf:"bytes,2,opt,name=person_type_id,json=personTypeId" json:"person_type_id,omitempty"`
	PersonTypeIdNull                bool                        `protobuf:"varint,1002,opt,name=person_type_id_null,json=personTypeIdNull" json:"person_type_id_null,omitempty"`
	UniqueId                        *dstore_values.StringValue  `protobuf:"bytes,3,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
	UniqueIdNull                    bool                        `protobuf:"varint,1003,opt,name=unique_id_null,json=uniqueIdNull" json:"unique_id_null,omitempty"`
	PostingId                       *dstore_values.IntegerValue `protobuf:"bytes,4,opt,name=posting_id,json=postingId" json:"posting_id,omitempty"`
	PostingIdNull                   bool                        `protobuf:"varint,1004,opt,name=posting_id_null,json=postingIdNull" json:"posting_id_null,omitempty"`
	PersonId                        *dstore_values.IntegerValue `protobuf:"bytes,5,opt,name=person_id,json=personId" json:"person_id,omitempty"`
	PersonIdNull                    bool                        `protobuf:"varint,1005,opt,name=person_id_null,json=personIdNull" json:"person_id_null,omitempty"`
	CharacteristicIdList            *dstore_values.StringValue  `protobuf:"bytes,6,opt,name=characteristic_id_list,json=characteristicIdList" json:"characteristic_id_list,omitempty"`
	CharacteristicIdListNull        bool                        `protobuf:"varint,1006,opt,name=characteristic_id_list_null,json=characteristicIdListNull" json:"characteristic_id_list_null,omitempty"`
	DateFormat                      *dstore_values.StringValue  `protobuf:"bytes,7,opt,name=date_format,json=dateFormat" json:"date_format,omitempty"`
	DateFormatNull                  bool                        `protobuf:"varint,1007,opt,name=date_format_null,json=dateFormatNull" json:"date_format_null,omitempty"`
	GetAdditionalInfosForCharac     *dstore_values.BooleanValue `protobuf:"bytes,8,opt,name=get_additional_infos_for_charac,json=getAdditionalInfosForCharac" json:"get_additional_infos_for_charac,omitempty"`
	GetAdditionalInfosForCharacNull bool                        `protobuf:"varint,1008,opt,name=get_additional_infos_for_charac_null,json=getAdditionalInfosForCharacNull" json:"get_additional_infos_for_charac_null,omitempty"`
	SeparatorInIdentVals            *dstore_values.StringValue  `protobuf:"bytes,9,opt,name=separator_in_ident_vals,json=separatorInIdentVals" json:"separator_in_ident_vals,omitempty"`
	SeparatorInIdentValsNull        bool                        `protobuf:"varint,1009,opt,name=separator_in_ident_vals_null,json=separatorInIdentValsNull" json:"separator_in_ident_vals_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetPersonIdentificationValues() *dstore_values.StringValue {
	if m != nil {
		return m.PersonIdentificationValues
	}
	return nil
}

func (m *Parameters) GetPersonTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonTypeId
	}
	return nil
}

func (m *Parameters) GetUniqueId() *dstore_values.StringValue {
	if m != nil {
		return m.UniqueId
	}
	return nil
}

func (m *Parameters) GetPostingId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PostingId
	}
	return nil
}

func (m *Parameters) GetPersonId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonId
	}
	return nil
}

func (m *Parameters) GetCharacteristicIdList() *dstore_values.StringValue {
	if m != nil {
		return m.CharacteristicIdList
	}
	return nil
}

func (m *Parameters) GetDateFormat() *dstore_values.StringValue {
	if m != nil {
		return m.DateFormat
	}
	return nil
}

func (m *Parameters) GetGetAdditionalInfosForCharac() *dstore_values.BooleanValue {
	if m != nil {
		return m.GetAdditionalInfosForCharac
	}
	return nil
}

func (m *Parameters) GetSeparatorInIdentVals() *dstore_values.StringValue {
	if m != nil {
		return m.SeparatorInIdentVals
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId                       int32                       `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	PostingId                   *dstore_values.IntegerValue `protobuf:"bytes,10001,opt,name=posting_id,json=postingId" json:"posting_id,omitempty"`
	Value                       *dstore_values.StringValue  `protobuf:"bytes,10002,opt,name=value" json:"value,omitempty"`
	CharacteristicId            *dstore_values.IntegerValue `protobuf:"bytes,10003,opt,name=characteristic_id,json=characteristicId" json:"characteristic_id,omitempty"`
	ValueId                     *dstore_values.IntegerValue `protobuf:"bytes,10004,opt,name=value_id,json=valueId" json:"value_id,omitempty"`
	CheckPostingVisibility      *dstore_values.BooleanValue `protobuf:"bytes,20002,opt,name=check_posting_visibility,json=checkPostingVisibility" json:"check_posting_visibility,omitempty"`
	CharacteristicDescription   *dstore_values.StringValue  `protobuf:"bytes,20003,opt,name=characteristic_description,json=characteristicDescription" json:"characteristic_description,omitempty"`
	FieldTypeId                 *dstore_values.IntegerValue `protobuf:"bytes,20004,opt,name=field_type_id,json=fieldTypeId" json:"field_type_id,omitempty"`
	CommonCharacteristic        *dstore_values.IntegerValue `protobuf:"bytes,20007,opt,name=common_characteristic,json=commonCharacteristic" json:"common_characteristic,omitempty"`
	PropertyModificationAllowed *dstore_values.IntegerValue `protobuf:"bytes,20009,opt,name=property_modification_allowed,json=propertyModificationAllowed" json:"property_modification_allowed,omitempty"`
	MaxNumberOfProperties       *dstore_values.IntegerValue `protobuf:"bytes,20010,opt,name=max_number_of_properties,json=maxNumberOfProperties" json:"max_number_of_properties,omitempty"`
	PredefinedValues            *dstore_values.BooleanValue `protobuf:"bytes,20011,opt,name=predefined_values,json=predefinedValues" json:"predefined_values,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetPostingId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PostingId
	}
	return nil
}

func (m *Response_Row) GetValue() *dstore_values.StringValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Response_Row) GetCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.CharacteristicId
	}
	return nil
}

func (m *Response_Row) GetValueId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ValueId
	}
	return nil
}

func (m *Response_Row) GetCheckPostingVisibility() *dstore_values.BooleanValue {
	if m != nil {
		return m.CheckPostingVisibility
	}
	return nil
}

func (m *Response_Row) GetCharacteristicDescription() *dstore_values.StringValue {
	if m != nil {
		return m.CharacteristicDescription
	}
	return nil
}

func (m *Response_Row) GetFieldTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.FieldTypeId
	}
	return nil
}

func (m *Response_Row) GetCommonCharacteristic() *dstore_values.IntegerValue {
	if m != nil {
		return m.CommonCharacteristic
	}
	return nil
}

func (m *Response_Row) GetPropertyModificationAllowed() *dstore_values.IntegerValue {
	if m != nil {
		return m.PropertyModificationAllowed
	}
	return nil
}

func (m *Response_Row) GetMaxNumberOfProperties() *dstore_values.IntegerValue {
	if m != nil {
		return m.MaxNumberOfProperties
	}
	return nil
}

func (m *Response_Row) GetPredefinedValues() *dstore_values.BooleanValue {
	if m != nil {
		return m.PredefinedValues
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.fo_GetPostingProperties_Pu.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.fo_GetPostingProperties_Pu.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.fo_GetPostingProperties_Pu.Response.Row")
}

func init() {
	proto.RegisterFile("dstore/engine/procedures/fo_GetPostingProperties_Pu.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 946 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x56, 0x5b, 0x6f, 0x1b, 0x45,
	0x14, 0x56, 0x08, 0x4e, 0xec, 0x93, 0x36, 0x75, 0xb7, 0x6d, 0x98, 0xda, 0xa5, 0x85, 0x02, 0xa2,
	0xbc, 0x6c, 0xb8, 0x48, 0xdc, 0x8a, 0x40, 0xa1, 0xdc, 0x8c, 0x88, 0x31, 0x2b, 0x14, 0x04, 0x45,
	0x5a, 0x6d, 0x3c, 0x63, 0x33, 0xea, 0x7a, 0x67, 0x99, 0x59, 0x37, 0xe4, 0x99, 0x3f, 0x50, 0x2e,
	0x8f, 0x7d, 0x02, 0x24, 0x04, 0xfc, 0x2e, 0x1e, 0xb8, 0xc3, 0x3f, 0xe0, 0xcc, 0x9c, 0xdd, 0x75,
	0xd6, 0x8d, 0xbb, 0xce, 0x4b, 0x9c, 0xd9, 0x39, 0xdf, 0x65, 0x66, 0xce, 0x39, 0x33, 0xf0, 0x12,
	0x37, 0x99, 0xd2, 0x62, 0x5b, 0x24, 0x63, 0x99, 0x88, 0xed, 0x54, 0xab, 0xa1, 0xe0, 0x53, 0x2d,
	0xcc, 0xf6, 0x48, 0x85, 0x6f, 0x8b, 0x6c, 0xa0, 0x4c, 0x26, 0x93, 0xf1, 0x40, 0xab, 0x54, 0xe8,
	0x4c, 0x0a, 0x13, 0x0e, 0xa6, 0x3e, 0x46, 0x65, 0xca, 0xbb, 0x46, 0x50, 0x9f, 0xa0, 0xfe, 0xe2,
	0xf8, 0xce, 0xb9, 0x5c, 0xe4, 0x76, 0x14, 0x4f, 0x85, 0x21, 0x78, 0xe7, 0x62, 0x55, 0x59, 0x68,
	0xad, 0x74, 0x3e, 0xd5, 0xad, 0x4e, 0x4d, 0x84, 0x31, 0xd1, 0x58, 0xe4, 0x93, 0x8f, 0xcd, 0x4f,
	0x66, 0x91, 0x4c, 0x46, 0x4a, 0x4f, 0xa2, 0x4c, 0xaa, 0x84, 0x82, 0xae, 0xde, 0x69, 0x01, 0x0c,
	0x22, 0x1d, 0xe1, 0xac, 0xd0, 0xc6, 0xfb, 0x14, 0x2e, 0xa1, 0x1d, 0xa3, 0x92, 0x50, 0x72, 0x91,
	0x64, 0x72, 0x24, 0x87, 0x2e, 0x3a, 0x24, 0x47, 0x6c, 0xe5, 0x91, 0x95, 0x6b, 0x1b, 0xcf, 0x76,
	0xfc, 0x7c, 0x45, 0xb9, 0x4f, 0x93, 0x69, 0x5c, 0xca, 0x9e, 0x1d, 0x04, 0x1d, 0xc2, 0xf7, 0x2a,
	0x70, 0x37, 0x65, 0xbc, 0x77, 0xe1, 0xd1, 0xfb, 0xb1, 0x87, 0xc9, 0x34, 0x8e, 0xd9, 0x6f, 0xeb,
	0xa8, 0xd1, 0x0c, 0x2e, 0x2f, 0xe6, 0xe9, 0x63, 0x98, 0xb7, 0x03, 0x9b, 0x39, 0x57, 0x76, 0x98,
	0x0a, 0x24, 0x64, 0x0f, 0x38, 0x6f, 0xdd, 0x39, 0x6f, 0x32, 0xc9, 0xc4, 0x58, 0x68, 0x32, 0x77,
	0x8a, 0x20, 0x1f, 0x22, 0xa2, 0xc7, 0x3d, 0x1f, 0xce, 0x55, 0x29, 0xc8, 0xc0, 0xef, 0x64, 0xa0,
	0x7d, 0x34, 0xd6, 0x49, 0xbe, 0x00, 0xad, 0x69, 0x22, 0x3f, 0x9f, 0x3a, 0xb5, 0xd5, 0xda, 0x9d,
	0x68, 0x52, 0x30, 0x0a, 0x3d, 0x01, 0x9b, 0x25, 0x90, 0x34, 0xfe, 0x20, 0x8d, 0x53, 0x45, 0x88,
	0xe3, 0x7f, 0x19, 0x20, 0xa5, 0xac, 0xb0, 0x02, 0x0f, 0xd6, 0x2f, 0xa7, 0x95, 0x87, 0xa3, 0xc4,
	0x93, 0x70, 0x66, 0x86, 0x25, 0x8d, 0x3f, 0x49, 0xe3, 0x74, 0x19, 0xe4, 0x44, 0x5e, 0x84, 0x56,
	0x79, 0x06, 0xac, 0x51, 0xaf, 0xd1, 0x2c, 0xce, 0xc1, 0xae, 0xa2, 0x44, 0x92, 0xc2, 0x5f, 0xf9,
	0x2a, 0x8a, 0x10, 0x27, 0x30, 0x80, 0xad, 0xe1, 0x67, 0x98, 0x51, 0x43, 0x4c, 0x28, 0x89, 0xca,
	0x43, 0x1b, 0x1e, 0xe3, 0x7f, 0x6c, 0xad, 0x76, 0xcb, 0xce, 0x57, 0x91, 0x3d, 0xfe, 0x1e, 0xfe,
	0x7a, 0xaf, 0x42, 0xf7, 0x78, 0x46, 0x72, 0xf1, 0x37, 0xb9, 0x60, 0xc7, 0x61, 0x9d, 0xa3, 0xeb,
	0xb0, 0xc1, 0xa3, 0x4c, 0x84, 0x94, 0xfb, 0x6c, 0xbd, 0xd6, 0x06, 0xd8, 0xf0, 0xb7, 0x5c, 0xb4,
	0xf7, 0x14, 0xb4, 0x8f, 0x80, 0x49, 0xf1, 0x1f, 0x52, 0xdc, 0x9c, 0x85, 0x39, 0x9d, 0x08, 0xae,
	0x8c, 0x45, 0x16, 0x46, 0x9c, 0x4b, 0x9b, 0xac, 0x51, 0x1c, 0xda, 0x7a, 0x33, 0x16, 0x1a, 0x92,
	0x39, 0xd6, 0x3c, 0x76, 0xc3, 0xf7, 0x95, 0x8a, 0x45, 0x44, 0xd9, 0x1d, 0x74, 0x91, 0x63, 0xa7,
	0xa4, 0xe8, 0x59, 0x06, 0xd4, 0xb8, 0xe1, 0xf0, 0x5e, 0x1f, 0x1e, 0xaf, 0x91, 0x20, 0x87, 0xff,
	0x92, 0xc3, 0x2b, 0xf7, 0xe1, 0x72, 0x96, 0x3f, 0x80, 0x87, 0x8c, 0x48, 0x71, 0x88, 0x76, 0x90,
	0x8a, 0xea, 0xd2, 0x96, 0xa3, 0x61, 0xad, 0xfa, 0xd3, 0x2a, 0xa1, 0x3d, 0xaa, 0x53, 0xfc, 0x6c,
	0xbc, 0xd7, 0xe0, 0xd2, 0x02, 0x4a, 0xb2, 0xf6, 0x5f, 0x7e, 0x5c, 0xc7, 0x81, 0xad, 0xa7, 0xab,
	0x5f, 0xb6, 0xa0, 0x19, 0x08, 0x93, 0xaa, 0xc4, 0x08, 0xef, 0x69, 0x68, 0xb8, 0x86, 0x37, 0xdf,
	0x79, 0xf2, 0x5e, 0x4a, 0xcd, 0xf0, 0x4d, 0xfb, 0x37, 0xa0, 0x40, 0xef, 0x63, 0x68, 0xdb, 0x56,
	0x17, 0x1e, 0xe9, 0x75, 0xd8, 0x1a, 0x56, 0x11, 0xec, 0xcf, 0x81, 0xe7, 0x3b, 0xe2, 0x2e, 0x8e,
	0x7b, 0xb3, 0x71, 0x70, 0x66, 0x52, 0xfd, 0x80, 0xb5, 0xb3, 0x9e, 0xb7, 0x58, 0x2c, 0x7f, 0xcb,
	0x78, 0xf9, 0x1e, 0x46, 0x6a, 0xc0, 0xbb, 0xf4, 0x1b, 0x14, 0xe1, 0xde, 0x3b, 0xb0, 0xaa, 0xd5,
	0x01, 0xd6, 0xb4, 0x45, 0x3d, 0xef, 0x2f, 0x7b, 0x21, 0xf8, 0xc5, 0x3e, 0xf8, 0x81, 0x3a, 0x08,
	0x2c, 0x45, 0xe7, 0xd7, 0x35, 0x58, 0xc5, 0x81, 0xb7, 0x05, 0x6b, 0x38, 0xb4, 0x45, 0x7c, 0xa7,
	0x8f, 0x5b, 0xd3, 0x08, 0x1a, 0x38, 0xc4, 0x2a, 0xbd, 0x5e, 0x69, 0x22, 0x5f, 0xf5, 0x4f, 0xd4,
	0x45, 0x9e, 0x81, 0x86, 0x8b, 0x60, 0x5f, 0xf7, 0x6b, 0x4f, 0x9f, 0x22, 0xbd, 0x1e, 0x9c, 0xbd,
	0xa7, 0x38, 0xd9, 0x37, 0x4b, 0xc8, 0xb6, 0xe7, 0xeb, 0x15, 0xfb, 0x6b, 0xd3, 0x05, 0x5a, 0x86,
	0x6f, 0x97, 0x60, 0x58, 0x77, 0x1f, 0x11, 0xf8, 0x11, 0x60, 0xf1, 0x8b, 0xe1, 0xad, 0xb0, 0x58,
	0xf9, 0x6d, 0x69, 0xe4, 0xbe, 0x8c, 0x65, 0x76, 0xc8, 0xbe, 0xbb, 0xbb, 0x52, 0x5f, 0x73, 0x5b,
	0x0e, 0x9e, 0x9f, 0xc0, 0x5e, 0x09, 0xf6, 0x6e, 0x42, 0x67, 0x6e, 0x71, 0x5c, 0x98, 0xa1, 0x96,
	0xa9, 0xcb, 0xaa, 0xef, 0xef, 0xd6, 0x5f, 0x87, 0x17, 0xab, 0xf8, 0x37, 0x66, 0x70, 0xbc, 0xc1,
	0x4e, 0x8f, 0xa4, 0x88, 0x79, 0x79, 0x81, 0xfd, 0xb0, 0xc0, 0x6a, 0x65, 0xd1, 0x1b, 0x0e, 0x93,
	0xdf, 0x60, 0x01, 0x5c, 0x18, 0xaa, 0xc9, 0x04, 0x5b, 0x72, 0x55, 0x86, 0xfd, 0xb8, 0x0c, 0xd5,
	0x79, 0xc2, 0xde, 0xa8, 0x40, 0xb1, 0x8b, 0x3d, 0x9c, 0x52, 0x0e, 0x1e, 0x86, 0x13, 0xc5, 0x67,
	0x97, 0x74, 0x14, 0xc7, 0xea, 0x40, 0x70, 0xf6, 0xd3, 0x32, 0xdc, 0xdd, 0x82, 0x63, 0xf7, 0x08,
	0xc5, 0x0e, 0x31, 0x78, 0x7b, 0xc0, 0x26, 0xd1, 0x17, 0xd8, 0x0e, 0x26, 0xfb, 0x42, 0x87, 0x6a,
	0x14, 0xa6, 0x65, 0xd2, 0xb3, 0x9f, 0x97, 0x61, 0xbf, 0x80, 0xf0, 0xbe, 0x43, 0xbf, 0x3f, 0x9a,
	0x15, 0x0c, 0xbe, 0x2f, 0xce, 0xa6, 0x5a, 0x70, 0x31, 0xc2, 0xaa, 0xe2, 0xc5, 0x93, 0xe5, 0x97,
	0x65, 0x12, 0xa0, 0x3d, 0xc3, 0xd1, 0x1b, 0xe3, 0xf5, 0x9b, 0xd0, 0x95, 0x6a, 0xae, 0x50, 0x67,
	0x8f, 0xbe, 0x4f, 0x5e, 0x19, 0x2b, 0xc3, 0x6f, 0x15, 0xf3, 0xfc, 0x64, 0xef, 0xc2, 0xfd, 0x35,
	0xf7, 0xf8, 0x7a, 0xee, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x46, 0xaa, 0xc3, 0xf7, 0x55, 0x0a,
	0x00, 0x00,
}
