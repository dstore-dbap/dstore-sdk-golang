// Code generated by protoc-gen-go.
// source: dstore/engine/engine.proto
// DO NOT EDIT!

/*
Package engine is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/engine.proto

It has these top-level messages:
*/
package engine

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_engine_procedure "gosdk.dstore.de/engine/procedure"
import dstore_values "gosdk.dstore.de/values"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for Engine service

type EngineClient interface {
	ExecProcedure(ctx context.Context, in *dstore_engine_procedure.Call, opts ...grpc.CallOption) (Engine_ExecProcedureClient, error)
	ExecBatch(ctx context.Context, opts ...grpc.CallOption) (Engine_ExecBatchClient, error)
	CreateUniqueID(ctx context.Context, in *dstore_values.StringValue, opts ...grpc.CallOption) (*dstore_values.StringValue, error)
	IsValidUniqueID(ctx context.Context, in *dstore_values.StringValue, opts ...grpc.CallOption) (*dstore_values.BooleanValue, error)
}

type engineClient struct {
	cc *grpc.ClientConn
}

func NewEngineClient(cc *grpc.ClientConn) EngineClient {
	return &engineClient{cc}
}

func (c *engineClient) ExecProcedure(ctx context.Context, in *dstore_engine_procedure.Call, opts ...grpc.CallOption) (Engine_ExecProcedureClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Engine_serviceDesc.Streams[0], c.cc, "/dstore.engine.Engine/execProcedure", opts...)
	if err != nil {
		return nil, err
	}
	x := &engineExecProcedureClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Engine_ExecProcedureClient interface {
	Recv() (*dstore_engine_procedure.Response, error)
	grpc.ClientStream
}

type engineExecProcedureClient struct {
	grpc.ClientStream
}

func (x *engineExecProcedureClient) Recv() (*dstore_engine_procedure.Response, error) {
	m := new(dstore_engine_procedure.Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *engineClient) ExecBatch(ctx context.Context, opts ...grpc.CallOption) (Engine_ExecBatchClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Engine_serviceDesc.Streams[1], c.cc, "/dstore.engine.Engine/execBatch", opts...)
	if err != nil {
		return nil, err
	}
	x := &engineExecBatchClient{stream}
	return x, nil
}

type Engine_ExecBatchClient interface {
	Send(*dstore_engine_procedure.Call) error
	Recv() (*dstore_engine_procedure.Response, error)
	grpc.ClientStream
}

type engineExecBatchClient struct {
	grpc.ClientStream
}

func (x *engineExecBatchClient) Send(m *dstore_engine_procedure.Call) error {
	return x.ClientStream.SendMsg(m)
}

func (x *engineExecBatchClient) Recv() (*dstore_engine_procedure.Response, error) {
	m := new(dstore_engine_procedure.Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *engineClient) CreateUniqueID(ctx context.Context, in *dstore_values.StringValue, opts ...grpc.CallOption) (*dstore_values.StringValue, error) {
	out := new(dstore_values.StringValue)
	err := grpc.Invoke(ctx, "/dstore.engine.Engine/createUniqueID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *engineClient) IsValidUniqueID(ctx context.Context, in *dstore_values.StringValue, opts ...grpc.CallOption) (*dstore_values.BooleanValue, error) {
	out := new(dstore_values.BooleanValue)
	err := grpc.Invoke(ctx, "/dstore.engine.Engine/isValidUniqueID", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Engine service

type EngineServer interface {
	ExecProcedure(*dstore_engine_procedure.Call, Engine_ExecProcedureServer) error
	ExecBatch(Engine_ExecBatchServer) error
	CreateUniqueID(context.Context, *dstore_values.StringValue) (*dstore_values.StringValue, error)
	IsValidUniqueID(context.Context, *dstore_values.StringValue) (*dstore_values.BooleanValue, error)
}

func RegisterEngineServer(s *grpc.Server, srv EngineServer) {
	s.RegisterService(&_Engine_serviceDesc, srv)
}

func _Engine_ExecProcedure_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(dstore_engine_procedure.Call)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(EngineServer).ExecProcedure(m, &engineExecProcedureServer{stream})
}

type Engine_ExecProcedureServer interface {
	Send(*dstore_engine_procedure.Response) error
	grpc.ServerStream
}

type engineExecProcedureServer struct {
	grpc.ServerStream
}

func (x *engineExecProcedureServer) Send(m *dstore_engine_procedure.Response) error {
	return x.ServerStream.SendMsg(m)
}

func _Engine_ExecBatch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(EngineServer).ExecBatch(&engineExecBatchServer{stream})
}

type Engine_ExecBatchServer interface {
	Send(*dstore_engine_procedure.Response) error
	Recv() (*dstore_engine_procedure.Call, error)
	grpc.ServerStream
}

type engineExecBatchServer struct {
	grpc.ServerStream
}

func (x *engineExecBatchServer) Send(m *dstore_engine_procedure.Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *engineExecBatchServer) Recv() (*dstore_engine_procedure.Call, error) {
	m := new(dstore_engine_procedure.Call)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Engine_CreateUniqueID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dstore_values.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).CreateUniqueID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dstore.engine.Engine/CreateUniqueID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).CreateUniqueID(ctx, req.(*dstore_values.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Engine_IsValidUniqueID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(dstore_values.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EngineServer).IsValidUniqueID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dstore.engine.Engine/IsValidUniqueID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EngineServer).IsValidUniqueID(ctx, req.(*dstore_values.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

var _Engine_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dstore.engine.Engine",
	HandlerType: (*EngineServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "createUniqueID",
			Handler:    _Engine_CreateUniqueID_Handler,
		},
		{
			MethodName: "isValidUniqueID",
			Handler:    _Engine_IsValidUniqueID_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "execProcedure",
			Handler:       _Engine_ExecProcedure_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "execBatch",
			Handler:       _Engine_ExecBatch_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
}

func init() { proto.RegisterFile("dstore/engine/engine.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0x92, 0x4a, 0x29, 0x2e, 0xc9,
	0x2f, 0x4a, 0xd5, 0x4f, 0xcd, 0x4b, 0xcf, 0xcc, 0x83, 0x51, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9,
	0x42, 0xbc, 0x10, 0x39, 0x3d, 0x88, 0xa0, 0x94, 0x2c, 0xaa, 0x52, 0xa0, 0x9a, 0xe4, 0xd4, 0x94,
	0xd2, 0x22, 0xa8, 0x6a, 0x29, 0x61, 0xa8, 0x74, 0x59, 0x62, 0x4e, 0x69, 0x6a, 0x31, 0x44, 0xd0,
	0xe8, 0x1c, 0x13, 0x17, 0x9b, 0x2b, 0x58, 0xbd, 0x50, 0x28, 0x17, 0x6f, 0x6a, 0x45, 0x6a, 0x72,
	0x00, 0x4c, 0x9b, 0x90, 0xac, 0x1e, 0x8a, 0xf9, 0x7a, 0x08, 0x03, 0x9d, 0x13, 0x73, 0x72, 0xa4,
	0x14, 0x71, 0x4a, 0x07, 0xa5, 0x16, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x2a, 0x31, 0x18, 0x30, 0x0a,
	0x05, 0x73, 0x71, 0x82, 0x8c, 0x75, 0x4a, 0x2c, 0x49, 0xce, 0xa0, 0x86, 0x91, 0x1a, 0x8c, 0x40,
	0x43, 0xbd, 0xb8, 0xf8, 0x92, 0x8b, 0x52, 0x13, 0x4b, 0x52, 0x43, 0xf3, 0x32, 0x0b, 0x4b, 0x53,
	0x3d, 0x5d, 0x84, 0xa4, 0x60, 0x5a, 0xa1, 0xde, 0x2b, 0x2e, 0x29, 0xca, 0xcc, 0x4b, 0x0f, 0x03,
	0x71, 0xa4, 0xf0, 0xc8, 0x29, 0x31, 0x08, 0xf9, 0x70, 0xf1, 0x67, 0x16, 0x03, 0x39, 0x99, 0x29,
	0x44, 0x19, 0x26, 0x8d, 0x26, 0x97, 0x94, 0x9f, 0x9f, 0x93, 0x9a, 0x98, 0x07, 0x35, 0xcd, 0x49,
	0x8b, 0x4b, 0x20, 0x33, 0x1f, 0xd5, 0x1b, 0x51, 0x62, 0xe9, 0xf9, 0xc5, 0x29, 0xd9, 0x30, 0xc1,
	0x14, 0x58, 0x0c, 0x25, 0xb1, 0x81, 0xe3, 0xc0, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0xf2, 0x81,
	0x7e, 0x0e, 0xe4, 0x01, 0x00, 0x00,
}
