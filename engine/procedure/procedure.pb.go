// Code generated by protoc-gen-go.
// source: dstore/engine/procedure.proto
// DO NOT EDIT!

/*
Package procedure is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedure.proto

It has these top-level messages:
	Call
	Parameter
	Response
*/
package procedure

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "gosdk.dstore.de/values"
import dstore_engine_error "gosdk.dstore.de/engine/error"
import dstore_engine_message "gosdk.dstore.de/engine/message"
import dstore_engine_metainformation "gosdk.dstore.de/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Call struct {
	ProcedureName string       `protobuf:"bytes,1,opt,name=procedure_name,json=procedureName" json:"procedure_name,omitempty"`
	Parameter     []*Parameter `protobuf:"bytes,2,rep,name=parameter" json:"parameter,omitempty"`
	CallId        int32        `protobuf:"varint,3,opt,name=call_id,json=callId" json:"call_id,omitempty"`
}

func (m *Call) Reset()                    { *m = Call{} }
func (m *Call) String() string            { return proto.CompactTextString(m) }
func (*Call) ProtoMessage()               {}
func (*Call) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Call) GetParameter() []*Parameter {
	if m != nil {
		return m.Parameter
	}
	return nil
}

type Parameter struct {
	Name   string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value  string `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	IsNull bool   `protobuf:"varint,3,opt,name=is_null,json=isNull" json:"is_null,omitempty"`
}

func (m *Parameter) Reset()                    { *m = Parameter{} }
func (m *Parameter) String() string            { return proto.CompactTextString(m) }
func (*Parameter) ProtoMessage()               {}
func (*Parameter) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type Response struct {
	Error            *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	Message          []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	CallId           int32                                            `protobuf:"varint,4,opt,name=call_id,json=callId" json:"call_id,omitempty"`
	Row              []*Response_Row                                  `protobuf:"bytes,5,rep,name=row" json:"row,omitempty"`
	OutputParameters map[string]*dstore_values.Value                  `protobuf:"bytes,6,rep,name=output_parameters,json=outputParameters" json:"output_parameters,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	MetaInformation  []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,7,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

func (m *Response) GetOutputParameters() map[string]*dstore_values.Value {
	if m != nil {
		return m.OutputParameters
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

type Response_Row struct {
	RowId   int32                           `protobuf:"varint,1,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	Columns map[string]*dstore_values.Value `protobuf:"bytes,2,rep,name=columns" json:"columns,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2, 1} }

func (m *Response_Row) GetColumns() map[string]*dstore_values.Value {
	if m != nil {
		return m.Columns
	}
	return nil
}

func init() {
	proto.RegisterType((*Call)(nil), "dstore.engine.procedure.Call")
	proto.RegisterType((*Parameter)(nil), "dstore.engine.procedure.Parameter")
	proto.RegisterType((*Response)(nil), "dstore.engine.procedure.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.procedure.Response.Row")
}

func init() { proto.RegisterFile("dstore/engine/procedure.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 500 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x54, 0xdd, 0x6a, 0xd4, 0x40,
	0x14, 0x26, 0xcd, 0x26, 0xdb, 0x3d, 0xeb, 0xcf, 0x3a, 0xb6, 0x34, 0x46, 0x94, 0x65, 0xa5, 0x50,
	0xbc, 0x48, 0x65, 0x15, 0x5a, 0xbc, 0x12, 0x4b, 0x2f, 0x0a, 0x76, 0x2d, 0x73, 0x21, 0xd4, 0x9b,
	0x10, 0x9b, 0x71, 0x09, 0x4d, 0x66, 0x96, 0x99, 0x89, 0xa5, 0x6f, 0xe0, 0x7b, 0xf8, 0x1a, 0x3e,
	0x9c, 0xf3, 0x97, 0x34, 0xd9, 0x5a, 0x14, 0x7a, 0xb3, 0x39, 0xbf, 0xdf, 0x39, 0xe7, 0x3b, 0x67,
	0x16, 0x5e, 0xe4, 0x42, 0x32, 0x4e, 0xf6, 0x09, 0x5d, 0x16, 0x94, 0xec, 0xaf, 0x38, 0xbb, 0x20,
	0x79, 0xcd, 0x49, 0xa2, 0x24, 0xc9, 0xd0, 0x8e, 0x75, 0x27, 0xd6, 0x9d, 0xb4, 0xee, 0xf8, 0xa9,
	0xcb, 0xfb, 0x91, 0x95, 0x35, 0x11, 0x36, 0x3a, 0x7e, 0xd6, 0x07, 0x23, 0x9c, 0x33, 0xee, 0x5c,
	0xcf, 0xfb, 0xae, 0x8a, 0x08, 0x91, 0x2d, 0x5d, 0x95, 0xf8, 0xd5, 0xba, 0x53, 0x66, 0x05, 0xfd,
	0xce, 0x78, 0x95, 0xc9, 0x82, 0x51, 0x1b, 0x34, 0xfb, 0xe9, 0xc1, 0xe0, 0x28, 0x2b, 0x4b, 0xb4,
	0x0b, 0x8f, 0xda, 0x3e, 0x52, 0x9a, 0x55, 0x24, 0xf2, 0xa6, 0xde, 0xde, 0x08, 0x3f, 0x6c, 0xad,
	0x0b, 0x65, 0x44, 0x1f, 0x60, 0xb4, 0xca, 0xb8, 0x92, 0x24, 0xe1, 0xd1, 0xc6, 0xd4, 0xdf, 0x1b,
	0xcf, 0x67, 0xc9, 0x1d, 0xe3, 0x24, 0x67, 0x4d, 0x24, 0xbe, 0x49, 0x42, 0x3b, 0x30, 0xbc, 0x50,
	0x05, 0xd3, 0x22, 0x8f, 0x7c, 0x55, 0x21, 0xc0, 0xa1, 0x56, 0x4f, 0xf2, 0xd9, 0x02, 0x46, 0x6d,
	0x02, 0x42, 0x30, 0xe8, 0x34, 0x61, 0x64, 0xb4, 0x05, 0x81, 0x21, 0x46, 0xd5, 0xd5, 0x46, 0xab,
	0x68, 0xbc, 0x42, 0xa4, 0xb4, 0x2e, 0x4b, 0x83, 0xb7, 0x89, 0xc3, 0x42, 0x2c, 0x94, 0x36, 0xfb,
	0x15, 0xc0, 0x26, 0x26, 0x62, 0xc5, 0xa8, 0x20, 0xe8, 0x0d, 0x04, 0x86, 0x38, 0x03, 0x38, 0x9e,
	0xc7, 0x6b, 0x3d, 0x5b, 0x52, 0x8f, 0xf5, 0x2f, 0xb6, 0x81, 0xe8, 0x10, 0x86, 0x8e, 0x4f, 0x85,
	0xab, 0xe7, 0x7c, 0xb9, 0x96, 0xd3, 0xb0, 0x7d, 0x6a, 0xbf, 0xb8, 0x09, 0xef, 0x4e, 0x38, 0xe8,
	0x4e, 0x88, 0x0e, 0xc0, 0xe7, 0xec, 0x2a, 0x0a, 0x0c, 0xdc, 0xee, 0x9d, 0xb4, 0x35, 0x4d, 0x27,
	0x98, 0x5d, 0x61, 0x9d, 0x81, 0x72, 0x78, 0xc2, 0x6a, 0xb9, 0xaa, 0x65, 0xda, 0xf2, 0x28, 0xa2,
	0xd0, 0xc0, 0x1c, 0xfc, 0x1b, 0xe6, 0xb3, 0x49, 0x6d, 0xb9, 0x15, 0xc7, 0x54, 0xf2, 0x6b, 0x3c,
	0x61, 0x6b, 0x66, 0x74, 0x0e, 0x13, 0x7d, 0x24, 0x69, 0xe7, 0x4a, 0xa2, 0xa1, 0x29, 0x92, 0xdc,
	0x1a, 0xbd, 0x7f, 0x4b, 0xa7, 0x4a, 0x3f, 0xb9, 0xd1, 0xf1, 0xe3, 0xaa, 0x6f, 0x88, 0xcf, 0x61,
	0xfb, 0xaf, 0x5d, 0xa0, 0x09, 0xf8, 0x97, 0xe4, 0xda, 0xad, 0x59, 0x8b, 0xe8, 0x75, 0x77, 0xcb,
	0xe3, 0xf9, 0x56, 0x53, 0xda, 0xbd, 0x89, 0x2f, 0xfa, 0xe3, 0x76, 0xff, 0x7e, 0xe3, 0xd0, 0x8b,
	0x7f, 0x7b, 0xe0, 0x2b, 0xa2, 0xd0, 0x36, 0x84, 0x8a, 0x2a, 0x4d, 0xba, 0x67, 0x48, 0x0f, 0x94,
	0xa6, 0x38, 0xff, 0xa4, 0x96, 0xc1, 0xca, 0xba, 0xa2, 0xc2, 0x9d, 0xeb, 0xfc, 0xbf, 0x78, 0x4f,
	0x8e, 0x6c, 0x92, 0xe5, 0xaa, 0x81, 0x88, 0xcf, 0xe0, 0x41, 0xd7, 0x71, 0xff, 0xf6, 0x3f, 0xbe,
	0x83, 0x49, 0xc1, 0xfa, 0x2d, 0x7d, 0x9d, 0x2e, 0x99, 0xc8, 0x2f, 0x1b, 0x63, 0x7e, 0xfb, 0x7f,
	0xe4, 0x5b, 0x68, 0x5e, 0xef, 0xdb, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x5f, 0xb9, 0x0f, 0x94,
	0x69, 0x04, 0x00, 0x00,
}
