// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/im_GetDirectSuccessors_Ad.proto
// DO NOT EDIT!

/*
Package im_GetDirectSuccessors_Ad is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/im_GetDirectSuccessors_Ad.proto

It has these top-level messages:
	Parameters
	Response
*/
package im_GetDirectSuccessors_Ad

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "gosdk.dstore.de/values"
import dstore_engine_error "gosdk.dstore.de/engine/error"
import dstore_engine_message "gosdk.dstore.de/engine/message"
import dstore_engine_metainformation "gosdk.dstore.de/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	TreeNodeId                      *dstore_values.IntegerValue `protobuf:"bytes,1,opt,name=tree_node_id,json=treeNodeId" json:"tree_node_id,omitempty"`
	TreeNodeIdNull                  bool                        `protobuf:"varint,1001,opt,name=tree_node_id_null,json=treeNodeIdNull" json:"tree_node_id_null,omitempty"`
	LanguageId                      *dstore_values.IntegerValue `protobuf:"bytes,2,opt,name=language_id,json=languageId" json:"language_id,omitempty"`
	LanguageIdNull                  bool                        `protobuf:"varint,1002,opt,name=language_id_null,json=languageIdNull" json:"language_id_null,omitempty"`
	OnlyActive                      *dstore_values.BooleanValue `protobuf:"bytes,3,opt,name=only_active,json=onlyActive" json:"only_active,omitempty"`
	OnlyActiveNull                  bool                        `protobuf:"varint,1003,opt,name=only_active_null,json=onlyActiveNull" json:"only_active_null,omitempty"`
	OnlyNotDeleted                  *dstore_values.BooleanValue `protobuf:"bytes,4,opt,name=only_not_deleted,json=onlyNotDeleted" json:"only_not_deleted,omitempty"`
	OnlyNotDeletedNull              bool                        `protobuf:"varint,1004,opt,name=only_not_deleted_null,json=onlyNotDeletedNull" json:"only_not_deleted_null,omitempty"`
	GroupByCharacteristicId         *dstore_values.IntegerValue `protobuf:"bytes,5,opt,name=group_by_characteristic_id,json=groupByCharacteristicId" json:"group_by_characteristic_id,omitempty"`
	GroupByCharacteristicIdNull     bool                        `protobuf:"varint,1005,opt,name=group_by_characteristic_id_null,json=groupByCharacteristicIdNull" json:"group_by_characteristic_id_null,omitempty"`
	BinaryCharacteristicValueId     *dstore_values.IntegerValue `protobuf:"bytes,6,opt,name=binary_characteristic_value_id,json=binaryCharacteristicValueId" json:"binary_characteristic_value_id,omitempty"`
	BinaryCharacteristicValueIdNull bool                        `protobuf:"varint,1006,opt,name=binary_characteristic_value_id_null,json=binaryCharacteristicValueIdNull" json:"binary_characteristic_value_id_null,omitempty"`
	FilterByCharacteristicId        *dstore_values.IntegerValue `protobuf:"bytes,7,opt,name=filter_by_characteristic_id,json=filterByCharacteristicId" json:"filter_by_characteristic_id,omitempty"`
	FilterByCharacteristicIdNull    bool                        `protobuf:"varint,1007,opt,name=filter_by_characteristic_id_null,json=filterByCharacteristicIdNull" json:"filter_by_characteristic_id_null,omitempty"`
	FilterByCharacValue             *dstore_values.StringValue  `protobuf:"bytes,8,opt,name=filter_by_charac_value,json=filterByCharacValue" json:"filter_by_charac_value,omitempty"`
	FilterByCharacValueNull         bool                        `protobuf:"varint,1008,opt,name=filter_by_charac_value_null,json=filterByCharacValueNull" json:"filter_by_charac_value_null,omitempty"`
	NegateFilterByParams            *dstore_values.BooleanValue `protobuf:"bytes,9,opt,name=negate_filter_by_params,json=negateFilterByParams" json:"negate_filter_by_params,omitempty"`
	NegateFilterByParamsNull        bool                        `protobuf:"varint,1009,opt,name=negate_filter_by_params_null,json=negateFilterByParamsNull" json:"negate_filter_by_params_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.TreeNodeId
	}
	return nil
}

func (m *Parameters) GetLanguageId() *dstore_values.IntegerValue {
	if m != nil {
		return m.LanguageId
	}
	return nil
}

func (m *Parameters) GetOnlyActive() *dstore_values.BooleanValue {
	if m != nil {
		return m.OnlyActive
	}
	return nil
}

func (m *Parameters) GetOnlyNotDeleted() *dstore_values.BooleanValue {
	if m != nil {
		return m.OnlyNotDeleted
	}
	return nil
}

func (m *Parameters) GetGroupByCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.GroupByCharacteristicId
	}
	return nil
}

func (m *Parameters) GetBinaryCharacteristicValueId() *dstore_values.IntegerValue {
	if m != nil {
		return m.BinaryCharacteristicValueId
	}
	return nil
}

func (m *Parameters) GetFilterByCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.FilterByCharacteristicId
	}
	return nil
}

func (m *Parameters) GetFilterByCharacValue() *dstore_values.StringValue {
	if m != nil {
		return m.FilterByCharacValue
	}
	return nil
}

func (m *Parameters) GetNegateFilterByParams() *dstore_values.BooleanValue {
	if m != nil {
		return m.NegateFilterByParams
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId           int32                       `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	NodeDescription *dstore_values.StringValue  `protobuf:"bytes,10001,opt,name=node_description,json=nodeDescription" json:"node_description,omitempty"`
	Active          *dstore_values.BooleanValue `protobuf:"bytes,10002,opt,name=active" json:"active,omitempty"`
	LevelNo         *dstore_values.IntegerValue `protobuf:"bytes,10003,opt,name=level_no,json=levelNo" json:"level_no,omitempty"`
	BinaryCodeId    *dstore_values.IntegerValue `protobuf:"bytes,10004,opt,name=binary_code_id,json=binaryCodeId" json:"binary_code_id,omitempty"`
	NodeId          *dstore_values.IntegerValue `protobuf:"bytes,10005,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	TreeNodeId      *dstore_values.IntegerValue `protobuf:"bytes,10006,opt,name=tree_node_id,json=treeNodeId" json:"tree_node_id,omitempty"`
	CountSuccessors *dstore_values.IntegerValue `protobuf:"bytes,10007,opt,name=count_successors,json=countSuccessors" json:"count_successors,omitempty"`
	SortNo          *dstore_values.IntegerValue `protobuf:"bytes,10008,opt,name=sort_no,json=sortNo" json:"sort_no,omitempty"`
	InheritsFrom    *dstore_values.IntegerValue `protobuf:"bytes,10009,opt,name=inherits_from,json=inheritsFrom" json:"inherits_from,omitempty"`
	SymbolId        *dstore_values.IntegerValue `protobuf:"bytes,10010,opt,name=symbol_id,json=symbolId" json:"symbol_id,omitempty"`
	ValueSortNo     *dstore_values.IntegerValue `protobuf:"bytes,20003,opt,name=value_sort_no,json=valueSortNo" json:"value_sort_no,omitempty"`
	ValueId         *dstore_values.IntegerValue `protobuf:"bytes,20004,opt,name=value_id,json=valueId" json:"value_id,omitempty"`
	Value           *dstore_values.StringValue  `protobuf:"bytes,20010,opt,name=value" json:"value,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetNodeDescription() *dstore_values.StringValue {
	if m != nil {
		return m.NodeDescription
	}
	return nil
}

func (m *Response_Row) GetActive() *dstore_values.BooleanValue {
	if m != nil {
		return m.Active
	}
	return nil
}

func (m *Response_Row) GetLevelNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.LevelNo
	}
	return nil
}

func (m *Response_Row) GetBinaryCodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.BinaryCodeId
	}
	return nil
}

func (m *Response_Row) GetNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *Response_Row) GetTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.TreeNodeId
	}
	return nil
}

func (m *Response_Row) GetCountSuccessors() *dstore_values.IntegerValue {
	if m != nil {
		return m.CountSuccessors
	}
	return nil
}

func (m *Response_Row) GetSortNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.SortNo
	}
	return nil
}

func (m *Response_Row) GetInheritsFrom() *dstore_values.IntegerValue {
	if m != nil {
		return m.InheritsFrom
	}
	return nil
}

func (m *Response_Row) GetSymbolId() *dstore_values.IntegerValue {
	if m != nil {
		return m.SymbolId
	}
	return nil
}

func (m *Response_Row) GetValueSortNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.ValueSortNo
	}
	return nil
}

func (m *Response_Row) GetValueId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ValueId
	}
	return nil
}

func (m *Response_Row) GetValue() *dstore_values.StringValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.im_GetDirectSuccessors_Ad.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.im_GetDirectSuccessors_Ad.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.im_GetDirectSuccessors_Ad.Response.Row")
}

func init() {
	proto.RegisterFile("dstore/engine/procedures/im_GetDirectSuccessors_Ad.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 915 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x56, 0x5b, 0x6f, 0xdc, 0x44,
	0x14, 0x56, 0x08, 0x7b, 0xc9, 0x49, 0x69, 0x82, 0x0b, 0x8d, 0xd9, 0xad, 0xda, 0xaa, 0x7d, 0xe0,
	0xf2, 0xb0, 0x41, 0x81, 0x8a, 0x20, 0x6e, 0x4a, 0xc8, 0x45, 0x7d, 0x88, 0x41, 0xae, 0x84, 0xa0,
	0x2f, 0xc6, 0x6b, 0x4f, 0xb6, 0x16, 0xde, 0x99, 0xd5, 0xcc, 0x6c, 0xaa, 0xfc, 0x0b, 0xee, 0x37,
	0xf5, 0x0d, 0x9e, 0xf8, 0x11, 0xfc, 0x11, 0x5e, 0x78, 0xe5, 0x0e, 0xff, 0x80, 0x33, 0x73, 0xc6,
	0xd9, 0x5d, 0x77, 0x37, 0x76, 0x5e, 0x76, 0x35, 0x9e, 0xf3, 0x5d, 0xe6, 0x78, 0xfc, 0xcd, 0xc0,
	0x76, 0xaa, 0xb4, 0x90, 0x6c, 0x93, 0xf1, 0x41, 0xc6, 0xd9, 0xe6, 0x48, 0x8a, 0x84, 0xa5, 0x63,
	0xc9, 0xd4, 0x66, 0x36, 0x8c, 0x0e, 0x99, 0xde, 0xcb, 0x24, 0x4b, 0xf4, 0xbd, 0x71, 0x92, 0x30,
	0xa5, 0x84, 0x54, 0xd1, 0x4e, 0xda, 0xc3, 0x22, 0x2d, 0xbc, 0xe7, 0x09, 0xd9, 0x23, 0x64, 0x6f,
	0x61, 0x79, 0xe7, 0x8a, 0x93, 0x38, 0x89, 0xf3, 0x31, 0x53, 0x84, 0xee, 0x3c, 0x37, 0xab, 0xcb,
	0xa4, 0x14, 0xd2, 0x4d, 0x75, 0x67, 0xa7, 0x86, 0xc8, 0x14, 0x0f, 0x98, 0x9b, 0xbc, 0x5d, 0x9e,
	0xd4, 0x71, 0xc6, 0x8f, 0x85, 0x1c, 0xc6, 0x3a, 0x13, 0x9c, 0x8a, 0x6e, 0xfd, 0xba, 0x02, 0xf0,
	0x7e, 0x2c, 0x63, 0x9c, 0x65, 0x52, 0x79, 0x6f, 0xc1, 0x25, 0x2d, 0x19, 0x8b, 0xb8, 0x48, 0x59,
	0x94, 0xa5, 0xfe, 0xd2, 0xcd, 0xa5, 0x17, 0x56, 0xb7, 0xba, 0x3d, 0xb7, 0x00, 0xe7, 0x2b, 0xe3,
	0x9a, 0x0d, 0x98, 0xfc, 0xc0, 0x8c, 0x42, 0x30, 0x80, 0x00, 0xeb, 0xef, 0xa6, 0xde, 0x4b, 0xf0,
	0xf4, 0x34, 0x3c, 0xe2, 0xe3, 0x3c, 0xf7, 0x7f, 0x6b, 0x21, 0x49, 0x3b, 0xbc, 0x3c, 0xa9, 0x0b,
	0xf0, 0xb1, 0xf7, 0x26, 0xac, 0xe6, 0x31, 0x1f, 0x8c, 0xd1, 0xb0, 0x51, 0x7a, 0xa2, 0x86, 0x52,
	0x51, 0x8f, 0x4a, 0x2f, 0xc2, 0xfa, 0x14, 0x9a, 0x84, 0x7e, 0x77, 0x42, 0x93, 0xb2, 0x42, 0x48,
	0xf0, 0xfc, 0x34, 0x8a, 0x13, 0x9d, 0x9d, 0x30, 0x7f, 0x79, 0xae, 0x50, 0x5f, 0x88, 0x9c, 0xc5,
	0xdc, 0x09, 0x99, 0xfa, 0x1d, 0x5b, 0x6e, 0x84, 0xa6, 0xd0, 0x24, 0xf4, 0x87, 0x13, 0x9a, 0x94,
	0x59, 0xa1, 0x7d, 0x57, 0xca, 0x85, 0x8e, 0x52, 0x96, 0x63, 0x47, 0x53, 0xff, 0xc9, 0x6a, 0x35,
	0x4b, 0x13, 0x08, 0xbd, 0x47, 0x10, 0x6f, 0x0b, 0x9e, 0x2d, 0xd3, 0x90, 0xec, 0x9f, 0x24, 0xeb,
	0xcd, 0xd6, 0x5b, 0xe9, 0x0f, 0xa1, 0x33, 0x90, 0x62, 0x3c, 0x8a, 0xfa, 0xa7, 0x51, 0xf2, 0x00,
	0xdf, 0x67, 0x82, 0xaf, 0x33, 0x53, 0x3a, 0x4b, 0x4c, 0x6f, 0x1b, 0xd5, 0xbd, 0xdd, 0xb0, 0xf0,
	0xdd, 0xd3, 0x77, 0x67, 0xc0, 0xd8, 0xe8, 0x7d, 0xb8, 0xb1, 0x98, 0x99, 0x7c, 0xfd, 0x45, 0xbe,
	0xba, 0x0b, 0x28, 0xac, 0xc1, 0x8f, 0xe1, 0x7a, 0x3f, 0xe3, 0xb1, 0x7c, 0x8c, 0xc4, 0x9a, 0x31,
	0x26, 0x9b, 0xd5, 0x26, 0xbb, 0x44, 0x31, 0x2b, 0x60, 0xa7, 0xd0, 0xe8, 0x11, 0xdc, 0x3e, 0x5f,
	0x81, 0xcc, 0xfe, 0x4d, 0x66, 0x6f, 0x9c, 0x43, 0x65, 0x0d, 0xdf, 0x87, 0xee, 0x71, 0x96, 0xe3,
	0xcc, 0xfc, 0x96, 0xb6, 0xaa, 0xdd, 0xfa, 0x84, 0x9f, 0xd3, 0xd3, 0x43, 0xb8, 0x79, 0x0e, 0x37,
	0xf9, 0xfc, 0x87, 0x7c, 0x5e, 0x5b, 0x44, 0x62, 0x4d, 0xbe, 0x07, 0x57, 0xcb, 0x44, 0xb4, 0x5c,
	0xbf, 0x6d, 0xfd, 0x75, 0x4a, 0xfe, 0x94, 0x96, 0x19, 0x1f, 0x90, 0xbd, 0x2b, 0xb3, 0xcc, 0xf6,
	0x21, 0x7e, 0xff, 0xdd, 0xf9, 0x84, 0x64, 0xea, 0x5f, 0x32, 0xb5, 0x31, 0x07, 0x6a, 0xfd, 0x84,
	0xb0, 0xc1, 0xd9, 0x20, 0xd6, 0x2c, 0x9a, 0xb0, 0x8c, 0x4c, 0xba, 0x28, 0x7f, 0xa5, 0xfa, 0x43,
	0x78, 0x86, 0xb0, 0x07, 0x8e, 0xdc, 0xc6, 0x92, 0xf2, 0xde, 0x81, 0x6b, 0x0b, 0x38, 0xc9, 0xd3,
	0x7f, 0xe4, 0xc9, 0x9f, 0x07, 0x36, 0xa6, 0x6e, 0xfd, 0xd2, 0x86, 0x76, 0xc8, 0xd4, 0x48, 0x70,
	0xc5, 0xbc, 0x97, 0xa1, 0x61, 0x03, 0xd4, 0x25, 0xdb, 0x59, 0x83, 0x5c, 0x34, 0x53, 0xb8, 0xee,
	0x9b, 0xdf, 0x90, 0x0a, 0xbd, 0x8f, 0x60, 0xdd, 0x44, 0x67, 0x34, 0x95, 0x9d, 0x18, 0x56, 0xcb,
	0x08, 0xee, 0x95, 0xc0, 0xe5, 0x84, 0x3d, 0xc2, 0xf1, 0xdd, 0xc9, 0x38, 0x5c, 0x1b, 0xce, 0x3e,
	0xf0, 0xb6, 0xa1, 0xe5, 0x22, 0x1b, 0x53, 0xc9, 0x30, 0x5e, 0x7f, 0x8c, 0x91, 0x02, 0xfd, 0x88,
	0xfe, 0xc3, 0xa2, 0x1c, 0x77, 0xd0, 0xb2, 0x14, 0x0f, 0x31, 0x5d, 0x0c, 0xea, 0x4e, 0xaf, 0xe6,
	0xf9, 0xd2, 0x2b, 0xda, 0xd0, 0x0b, 0xc5, 0xc3, 0xd0, 0x30, 0x74, 0x7e, 0x6e, 0xc2, 0x32, 0x0e,
	0xbc, 0xab, 0xd0, 0xc4, 0xa1, 0xd9, 0xd9, 0x9f, 0x06, 0xd8, 0x99, 0x46, 0xd8, 0xc0, 0x21, 0x6e,
	0xd5, 0x03, 0x58, 0xb7, 0x61, 0x9e, 0x32, 0x95, 0xc8, 0x6c, 0x64, 0x57, 0xff, 0x59, 0x50, 0xb9,
	0xb9, 0xd6, 0x0c, 0x68, 0x6f, 0x82, 0xf1, 0x5e, 0x85, 0xa6, 0xcb, 0xdf, 0xcf, 0x83, 0xea, 0x9d,
	0xe0, 0x6a, 0xbd, 0xd7, 0xa0, 0x9d, 0xb3, 0x13, 0x96, 0x63, 0x16, 0xfa, 0x5f, 0x04, 0xd5, 0x9f,
	0x5c, 0xcb, 0x56, 0x07, 0xc2, 0xdb, 0x85, 0xcb, 0x45, 0x18, 0xb8, 0x93, 0xec, 0xcb, 0x1a, 0xf0,
	0x4b, 0x2e, 0x14, 0xe8, 0x30, 0xbb, 0x03, 0xad, 0xe2, 0x18, 0xfc, 0xaa, 0x06, 0xb8, 0xc9, 0x09,
	0xf6, 0x76, 0xe9, 0x08, 0xfd, 0x3a, 0xb8, 0xd8, 0x19, 0x7a, 0x08, 0xeb, 0x89, 0x18, 0x73, 0x1d,
	0xa9, 0xb3, 0x57, 0xe7, 0x7f, 0x53, 0x83, 0x63, 0xcd, 0xa2, 0x26, 0xef, 0xdb, 0xf8, 0xc7, 0x7f,
	0x6d, 0x7a, 0xf7, 0x6d, 0x1d, 0xff, 0xa6, 0x18, 0x5b, 0xb7, 0x03, 0x4f, 0x65, 0xfc, 0x01, 0xe6,
	0x8c, 0x56, 0xd1, 0xb1, 0x14, 0x43, 0xff, 0xbb, 0x3a, 0x9d, 0x2b, 0x20, 0x07, 0x88, 0xf0, 0x5e,
	0x87, 0x15, 0x75, 0x3a, 0xec, 0x8b, 0xdc, 0xac, 0xff, 0xfb, 0x1a, 0xf0, 0x36, 0x95, 0xe3, 0xea,
	0x51, 0x9d, 0xf2, 0xa6, 0xb0, 0xfe, 0xc3, 0xa3, 0x1a, 0x77, 0x90, 0x55, 0xfb, 0xf0, 0x1e, 0x2d,
	0x60, 0x1b, 0xda, 0x67, 0x87, 0xca, 0x8f, 0x75, 0xd0, 0xad, 0x13, 0x77, 0x84, 0x6c, 0x41, 0x83,
	0xd2, 0xf3, 0xa7, 0x47, 0x4b, 0x95, 0x5b, 0x9c, 0x4a, 0x77, 0xf1, 0x9c, 0xc8, 0x44, 0xe9, 0x03,
	0x9c, 0x5c, 0x0d, 0xef, 0xbf, 0x31, 0x10, 0x2a, 0xfd, 0xa4, 0x98, 0x4f, 0x2f, 0x74, 0x7b, 0xec,
	0x37, 0xed, 0x1d, 0xed, 0x95, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0xf6, 0x78, 0x8f, 0x99, 0x7a,
	0x0a, 0x00, 0x00,
}
