// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/co_GetSentMessages_Pu.proto
// DO NOT EDIT!

/*
Package co_GetSentMessages_Pu is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/co_GetSentMessages_Pu.proto

It has these top-level messages:
	Parameters
	Response
*/
package co_GetSentMessages_Pu

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "gosdk.dstore.de/values"
import dstore_engine_error "gosdk.dstore.de/engine/error"
import dstore_engine_message "gosdk.dstore.de/engine/message"
import dstore_engine_metainformation "gosdk.dstore.de/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	MessageNo                      *dstore_values.IntegerValue `protobuf:"bytes,1,opt,name=message_no,json=messageNo" json:"message_no,omitempty"`
	MessageNoNull                  bool                        `protobuf:"varint,1001,opt,name=message_no_null,json=messageNoNull" json:"message_no_null,omitempty"`
	UniqueId                       *dstore_values.StringValue  `protobuf:"bytes,2,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
	UniqueIdNull                   bool                        `protobuf:"varint,1002,opt,name=unique_id_null,json=uniqueIdNull" json:"unique_id_null,omitempty"`
	PersonIdentificationValues     *dstore_values.StringValue  `protobuf:"bytes,3,opt,name=person_identification_values,json=personIdentificationValues" json:"person_identification_values,omitempty"`
	PersonIdentificationValuesNull bool                        `protobuf:"varint,1003,opt,name=person_identification_values_null,json=personIdentificationValuesNull" json:"person_identification_values_null,omitempty"`
	CommunityId                    *dstore_values.IntegerValue `protobuf:"bytes,4,opt,name=community_id,json=communityId" json:"community_id,omitempty"`
	CommunityIdNull                bool                        `protobuf:"varint,1004,opt,name=community_id_null,json=communityIdNull" json:"community_id_null,omitempty"`
	OnlyMessagesToMemberId         *dstore_values.IntegerValue `protobuf:"bytes,5,opt,name=only_messages_to_member_id,json=onlyMessagesToMemberId" json:"only_messages_to_member_id,omitempty"`
	OnlyMessagesToMemberIdNull     bool                        `protobuf:"varint,1005,opt,name=only_messages_to_member_id_null,json=onlyMessagesToMemberIdNull" json:"only_messages_to_member_id_null,omitempty"`
	DateAndTimeFormat              *dstore_values.IntegerValue `protobuf:"bytes,6,opt,name=date_and_time_format,json=dateAndTimeFormat" json:"date_and_time_format,omitempty"`
	DateAndTimeFormatNull          bool                        `protobuf:"varint,1006,opt,name=date_and_time_format_null,json=dateAndTimeFormatNull" json:"date_and_time_format_null,omitempty"`
	FromRowNumber                  *dstore_values.IntegerValue `protobuf:"bytes,7,opt,name=from_row_number,json=fromRowNumber" json:"from_row_number,omitempty"`
	FromRowNumberNull              bool                        `protobuf:"varint,1007,opt,name=from_row_number_null,json=fromRowNumberNull" json:"from_row_number_null,omitempty"`
	MaxNumberOfRows                *dstore_values.IntegerValue `protobuf:"bytes,8,opt,name=max_number_of_rows,json=maxNumberOfRows" json:"max_number_of_rows,omitempty"`
	MaxNumberOfRowsNull            bool                        `protobuf:"varint,1008,opt,name=max_number_of_rows_null,json=maxNumberOfRowsNull" json:"max_number_of_rows_null,omitempty"`
	FromMessageStatus              *dstore_values.IntegerValue `protobuf:"bytes,9,opt,name=from_message_status,json=fromMessageStatus" json:"from_message_status,omitempty"`
	FromMessageStatusNull          bool                        `protobuf:"varint,1009,opt,name=from_message_status_null,json=fromMessageStatusNull" json:"from_message_status_null,omitempty"`
	ToMessageStatus                *dstore_values.IntegerValue `protobuf:"bytes,10,opt,name=to_message_status,json=toMessageStatus" json:"to_message_status,omitempty"`
	ToMessageStatusNull            bool                        `protobuf:"varint,1010,opt,name=to_message_status_null,json=toMessageStatusNull" json:"to_message_status_null,omitempty"`
	OrderDesc                      *dstore_values.BooleanValue `protobuf:"bytes,11,opt,name=order_desc,json=orderDesc" json:"order_desc,omitempty"`
	OrderDescNull                  bool                        `protobuf:"varint,1011,opt,name=order_desc_null,json=orderDescNull" json:"order_desc_null,omitempty"`
	OrderByNick                    *dstore_values.BooleanValue `protobuf:"bytes,12,opt,name=order_by_nick,json=orderByNick" json:"order_by_nick,omitempty"`
	OrderByNickNull                bool                        `protobuf:"varint,1012,opt,name=order_by_nick_null,json=orderByNickNull" json:"order_by_nick_null,omitempty"`
	SeparatorInIdentVals           *dstore_values.StringValue  `protobuf:"bytes,13,opt,name=separator_in_ident_vals,json=separatorInIdentVals" json:"separator_in_ident_vals,omitempty"`
	SeparatorInIdentValsNull       bool                        `protobuf:"varint,1013,opt,name=separator_in_ident_vals_null,json=separatorInIdentValsNull" json:"separator_in_ident_vals_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetMessageNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.MessageNo
	}
	return nil
}

func (m *Parameters) GetUniqueId() *dstore_values.StringValue {
	if m != nil {
		return m.UniqueId
	}
	return nil
}

func (m *Parameters) GetPersonIdentificationValues() *dstore_values.StringValue {
	if m != nil {
		return m.PersonIdentificationValues
	}
	return nil
}

func (m *Parameters) GetCommunityId() *dstore_values.IntegerValue {
	if m != nil {
		return m.CommunityId
	}
	return nil
}

func (m *Parameters) GetOnlyMessagesToMemberId() *dstore_values.IntegerValue {
	if m != nil {
		return m.OnlyMessagesToMemberId
	}
	return nil
}

func (m *Parameters) GetDateAndTimeFormat() *dstore_values.IntegerValue {
	if m != nil {
		return m.DateAndTimeFormat
	}
	return nil
}

func (m *Parameters) GetFromRowNumber() *dstore_values.IntegerValue {
	if m != nil {
		return m.FromRowNumber
	}
	return nil
}

func (m *Parameters) GetMaxNumberOfRows() *dstore_values.IntegerValue {
	if m != nil {
		return m.MaxNumberOfRows
	}
	return nil
}

func (m *Parameters) GetFromMessageStatus() *dstore_values.IntegerValue {
	if m != nil {
		return m.FromMessageStatus
	}
	return nil
}

func (m *Parameters) GetToMessageStatus() *dstore_values.IntegerValue {
	if m != nil {
		return m.ToMessageStatus
	}
	return nil
}

func (m *Parameters) GetOrderDesc() *dstore_values.BooleanValue {
	if m != nil {
		return m.OrderDesc
	}
	return nil
}

func (m *Parameters) GetOrderByNick() *dstore_values.BooleanValue {
	if m != nil {
		return m.OrderByNick
	}
	return nil
}

func (m *Parameters) GetSeparatorInIdentVals() *dstore_values.StringValue {
	if m != nil {
		return m.SeparatorInIdentVals
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId                     int32                         `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	MessageStatus             *dstore_values.IntegerValue   `protobuf:"bytes,10001,opt,name=message_status,json=messageStatus" json:"message_status,omitempty"`
	ToCommunityMemberId       *dstore_values.IntegerValue   `protobuf:"bytes,10002,opt,name=to_community_member_id,json=toCommunityMemberId" json:"to_community_member_id,omitempty"`
	Message                   *dstore_values.StringValue    `protobuf:"bytes,10003,opt,name=message" json:"message,omitempty"`
	MessageNo                 *dstore_values.IntegerValue   `protobuf:"bytes,10004,opt,name=message_no,json=messageNo" json:"message_no,omitempty"`
	MessageDateAndTime        *dstore_values.TimestampValue `protobuf:"bytes,10005,opt,name=message_date_and_time,json=messageDateAndTime" json:"message_date_and_time,omitempty"`
	ToCommunityMemberNickname *dstore_values.StringValue    `protobuf:"bytes,10006,opt,name=to_community_member_nickname,json=toCommunityMemberNickname" json:"to_community_member_nickname,omitempty"`
	MessageDateAndTimeChar    *dstore_values.StringValue    `protobuf:"bytes,10007,opt,name=message_date_and_time_char,json=messageDateAndTimeChar" json:"message_date_and_time_char,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetMessageStatus() *dstore_values.IntegerValue {
	if m != nil {
		return m.MessageStatus
	}
	return nil
}

func (m *Response_Row) GetToCommunityMemberId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ToCommunityMemberId
	}
	return nil
}

func (m *Response_Row) GetMessage() *dstore_values.StringValue {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response_Row) GetMessageNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.MessageNo
	}
	return nil
}

func (m *Response_Row) GetMessageDateAndTime() *dstore_values.TimestampValue {
	if m != nil {
		return m.MessageDateAndTime
	}
	return nil
}

func (m *Response_Row) GetToCommunityMemberNickname() *dstore_values.StringValue {
	if m != nil {
		return m.ToCommunityMemberNickname
	}
	return nil
}

func (m *Response_Row) GetMessageDateAndTimeChar() *dstore_values.StringValue {
	if m != nil {
		return m.MessageDateAndTimeChar
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.co_GetSentMessages_Pu.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.co_GetSentMessages_Pu.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.co_GetSentMessages_Pu.Response.Row")
}

func init() {
	proto.RegisterFile("dstore/engine/procedures/co_GetSentMessages_Pu.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 972 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x56, 0x79, 0x6f, 0x1b, 0x45,
	0x14, 0x57, 0x49, 0x73, 0xbd, 0x24, 0x0d, 0x99, 0xa4, 0xe9, 0xc4, 0x29, 0x05, 0x5a, 0x21, 0x90,
	0x40, 0x0e, 0x47, 0xab, 0x72, 0x48, 0x20, 0x9a, 0x40, 0x09, 0x90, 0xa5, 0x71, 0xab, 0x22, 0x10,
	0xd2, 0x68, 0xe3, 0x1d, 0x9b, 0x55, 0xbd, 0x33, 0x66, 0x66, 0x4d, 0xc9, 0xb7, 0xe0, 0xe6, 0x83,
	0xf0, 0x35, 0xf8, 0x22, 0xdc, 0x37, 0x7f, 0xf3, 0x66, 0xde, 0xac, 0x9d, 0x5d, 0x3b, 0xac, 0xf9,
	0x27, 0xca, 0xee, 0xbc, 0xdf, 0xb1, 0xcf, 0xef, 0x18, 0xb8, 0x9a, 0xd8, 0x5c, 0x1b, 0xb9, 0x23,
	0x55, 0x37, 0x55, 0x72, 0xa7, 0x6f, 0x74, 0x5b, 0x26, 0x03, 0x23, 0xed, 0x4e, 0x5b, 0x8b, 0x9b,
	0x32, 0xbf, 0x2d, 0x55, 0x7e, 0x20, 0xad, 0x8d, 0xbb, 0xd2, 0x8a, 0x5b, 0x83, 0x26, 0x06, 0xe4,
	0x9a, 0x5d, 0x21, 0x54, 0x93, 0x50, 0xcd, 0x89, 0xa1, 0x8d, 0xf5, 0x40, 0xfd, 0x71, 0xdc, 0x1b,
	0x48, 0x4b, 0xc8, 0xc6, 0x56, 0x59, 0x4f, 0x1a, 0xa3, 0x4d, 0x38, 0xda, 0x2e, 0x1f, 0x65, 0x44,
	0x15, 0x0e, 0xaf, 0x54, 0x0f, 0xf3, 0x38, 0x55, 0x1d, 0x6d, 0xb2, 0x38, 0x4f, 0xb5, 0xa2, 0xa0,
	0xcb, 0xff, 0x2c, 0x03, 0xdc, 0x8a, 0x4d, 0x8c, 0xa7, 0xd2, 0x58, 0xf6, 0x22, 0x40, 0x20, 0x11,
	0x4a, 0xf3, 0x33, 0x8f, 0x9c, 0x79, 0x62, 0xe9, 0xd9, 0xed, 0x66, 0xb0, 0x1e, 0x5c, 0xa5, 0x2a,
	0x97, 0x5d, 0x69, 0xee, 0xba, 0xa7, 0xd6, 0x62, 0x08, 0x8f, 0x34, 0x7b, 0x1c, 0x56, 0x47, 0x58,
	0xa1, 0x06, 0xbd, 0x1e, 0xff, 0x7e, 0x1e, 0x19, 0x16, 0x5a, 0x2b, 0xc3, 0xa0, 0x08, 0xdf, 0xb2,
	0xeb, 0xb0, 0x38, 0x50, 0xe9, 0x47, 0x03, 0x29, 0xd2, 0x84, 0x3f, 0xe0, 0x35, 0x1a, 0x15, 0x0d,
	0x9b, 0x9b, 0x54, 0x75, 0x49, 0x62, 0x81, 0x82, 0xf7, 0x13, 0xf6, 0x18, 0x9c, 0x1b, 0x02, 0x49,
	0xe0, 0x07, 0x12, 0x58, 0x2e, 0x42, 0x3c, 0xff, 0x07, 0x70, 0xb1, 0x8f, 0x1f, 0xa3, 0x15, 0x86,
	0x61, 0x82, 0xd3, 0x4e, 0xda, 0xf6, 0x9f, 0x2c, 0x88, 0x9c, 0xcf, 0xd4, 0x4a, 0x36, 0x08, 0xbf,
	0x5f, 0x82, 0xfb, 0x23, 0xcb, 0xde, 0x84, 0x47, 0xff, 0x8b, 0x9d, 0x7c, 0xfd, 0x48, 0xbe, 0x2e,
	0x9d, 0xce, 0xe3, 0x9d, 0xbe, 0x0c, 0xcb, 0x6d, 0x9d, 0x65, 0xe8, 0x3e, 0x3f, 0x76, 0xc9, 0x38,
	0x5b, 0x9f, 0xf0, 0xa5, 0x21, 0x00, 0x13, 0xf2, 0x24, 0xac, 0x9d, 0xc4, 0x93, 0xf6, 0x4f, 0xa4,
	0xbd, 0x7a, 0x22, 0xd0, 0x8b, 0xbd, 0x0b, 0x0d, 0xad, 0x7a, 0xc7, 0x22, 0x2b, 0x0a, 0x2e, 0xd7,
	0xf8, 0x7f, 0x76, 0x24, 0x8d, 0x93, 0x9e, 0xad, 0x97, 0xde, 0x74, 0xf0, 0xa2, 0x5c, 0xef, 0xe8,
	0x03, 0x8f, 0x45, 0x17, 0x7b, 0xf0, 0xf0, 0xe9, 0xc4, 0xe4, 0xe9, 0x67, 0xf2, 0xd4, 0x98, 0xcc,
	0xe0, 0xed, 0xbd, 0x0d, 0x1b, 0x49, 0x9c, 0x4b, 0x11, 0xab, 0x44, 0xe4, 0x69, 0x26, 0x05, 0x95,
	0x2a, 0x9f, 0xab, 0x37, 0xb6, 0xe6, 0x80, 0xaf, 0xaa, 0xe4, 0x0e, 0xc2, 0x5e, 0xf7, 0x28, 0xf6,
	0x02, 0x6c, 0x4d, 0x62, 0x23, 0x37, 0xbf, 0x90, 0x9b, 0xf3, 0x63, 0x30, 0x6f, 0x64, 0x17, 0x56,
	0x3b, 0x46, 0x67, 0xc2, 0xe8, 0xfb, 0x18, 0xee, 0x1c, 0xf2, 0xf9, 0x7a, 0x0f, 0x2b, 0x0e, 0xd3,
	0xd2, 0xf7, 0x23, 0x8f, 0x60, 0x4f, 0xc3, 0x46, 0x85, 0x84, 0xa4, 0x7f, 0x25, 0xe9, 0xb5, 0x52,
	0xb4, 0x97, 0x7d, 0x03, 0x58, 0x16, 0x7f, 0x52, 0x04, 0xeb, 0x8e, 0x83, 0x5a, 0xbe, 0x50, 0xaf,
	0xbc, 0x8a, 0x30, 0xe2, 0x79, 0xa7, 0x83, 0x94, 0x96, 0x5d, 0x83, 0x0b, 0xe3, 0x4c, 0x24, 0xff,
	0x1b, 0xc9, 0xaf, 0x57, 0x20, 0xde, 0xc0, 0x5b, 0xb0, 0xee, 0x2d, 0x17, 0x4d, 0x6c, 0xf3, 0x38,
	0x1f, 0x58, 0xbe, 0x38, 0x45, 0xfe, 0x1d, 0x2e, 0xfc, 0xac, 0xb7, 0x3d, 0x8a, 0x3d, 0x0f, 0x7c,
	0x02, 0x19, 0x99, 0xf8, 0x3d, 0xa4, 0x7f, 0x0c, 0xe5, 0x6d, 0xdc, 0x84, 0x35, 0x5f, 0x3f, 0x25,
	0x13, 0x30, 0x45, 0x1a, 0x72, 0x5d, 0xb6, 0x70, 0x15, 0x36, 0xc7, 0x88, 0xc8, 0xc0, 0x1f, 0x21,
	0x0b, 0x15, 0x84, 0x97, 0xc7, 0x09, 0xa8, 0x4d, 0x82, 0x79, 0x4b, 0xa4, 0x6d, 0xf3, 0xa5, 0x89,
	0xba, 0x47, 0x5a, 0xf7, 0x64, 0xac, 0xc2, 0x04, 0xf4, 0xe1, 0x7b, 0x18, 0xed, 0x26, 0xe0, 0x08,
	0x4b, 0x52, 0x7f, 0x86, 0x09, 0x38, 0x0c, 0xf2, 0x22, 0xaf, 0x00, 0xbd, 0x10, 0x47, 0xc7, 0x42,
	0xa5, 0xed, 0x7b, 0x7c, 0xb9, 0x5e, 0x67, 0xc9, 0x23, 0x6e, 0x1c, 0x47, 0x18, 0xcf, 0x9e, 0x02,
	0x56, 0x22, 0x20, 0xb1, 0xbf, 0x42, 0xe7, 0x9f, 0x88, 0xf4, 0x72, 0x87, 0x70, 0xc1, 0xca, 0x3e,
	0x4e, 0x79, 0x24, 0x17, 0x69, 0x18, 0x5c, 0x6e, 0x5e, 0x59, 0xbe, 0x52, 0x3b, 0x0b, 0x37, 0x86,
	0xd0, 0x7d, 0x1a, 0x64, 0xf8, 0xda, 0xe2, 0x17, 0x5c, 0x3c, 0x85, 0x92, 0xac, 0xfc, 0x4d, 0x56,
	0xf8, 0x24, 0xb0, 0xf3, 0x74, 0xf9, 0xbb, 0x39, 0x58, 0x68, 0x49, 0xdb, 0xd7, 0xca, 0x4a, 0xec,
	0x96, 0x59, 0xbf, 0xd6, 0xc2, 0xc6, 0x19, 0xda, 0x09, 0xcb, 0x92, 0x56, 0xde, 0x6b, 0xee, 0x6f,
	0x8b, 0x02, 0xd9, 0x7b, 0xf0, 0xa0, 0x5b, 0x68, 0xe2, 0xc4, 0x46, 0xc3, 0x55, 0x32, 0x83, 0xe0,
	0x66, 0x05, 0x5c, 0xdd, 0x7b, 0x07, 0xf8, 0xbc, 0x3f, 0x7a, 0xc6, 0xf6, 0x29, 0xbf, 0xc0, 0xd2,
	0x9d, 0x0f, 0x45, 0x83, 0x9b, 0xc2, 0x31, 0x5e, 0x1a, 0x63, 0xa4, 0x35, 0x1b, 0x8a, 0xa7, 0x55,
	0x84, 0xe3, 0xe4, 0x98, 0xc1, 0x56, 0xc3, 0x29, 0xee, 0x50, 0xcf, 0x34, 0xa7, 0xd8, 0xf8, 0xcd,
	0x22, 0x05, 0x4d, 0x6c, 0xc3, 0x96, 0x43, 0x37, 0xbe, 0x3d, 0x0b, 0x33, 0xf8, 0xc0, 0x36, 0x61,
	0xce, 0x0d, 0x0f, 0x1c, 0xcd, 0x9f, 0x46, 0x98, 0x95, 0xd9, 0xd6, 0x2c, 0x3e, 0xe2, 0xb4, 0xdd,
	0x85, 0x73, 0x95, 0xe6, 0xf8, 0x2c, 0x9a, 0x62, 0x3c, 0x65, 0xa5, 0xde, 0x38, 0xf4, 0xbd, 0x31,
	0xda, 0x1d, 0xa3, 0x3d, 0xf0, 0xf9, 0x14, 0x64, 0xd8, 0x38, 0xbb, 0x05, 0x74, 0xb8, 0x05, 0xae,
	0x8d, 0xd2, 0xf6, 0x45, 0x54, 0x5b, 0x55, 0xc3, 0x9c, 0xbd, 0x54, 0xba, 0x71, 0x7c, 0x19, 0xfd,
	0xaf, 0x2b, 0xc7, 0x21, 0x9c, 0x2f, 0xc0, 0xa5, 0x69, 0xcf, 0xbf, 0x22, 0x9e, 0x87, 0x2a, 0x3c,
	0xee, 0x0c, 0x93, 0x96, 0xf5, 0x89, 0x89, 0x05, 0xf0, 0xde, 0x68, 0x0f, 0xb8, 0xcb, 0xc3, 0xa4,
	0xcc, 0xb8, 0x26, 0x53, 0x78, 0x4b, 0xe2, 0x5f, 0xd7, 0x7f, 0xdb, 0xd6, 0x58, 0x7a, 0xa2, 0x80,
	0x76, 0x3b, 0x78, 0xa2, 0x61, 0xd1, 0xfe, 0x30, 0x36, 0xfc, 0x9b, 0x7a, 0xee, 0xcd, 0x71, 0xcb,
	0xbb, 0x08, 0xbd, 0x71, 0x17, 0xb6, 0x53, 0x5d, 0xa9, 0xb8, 0xd1, 0xcd, 0xf4, 0xfd, 0xeb, 0x5d,
	0x6d, 0x93, 0x7b, 0xc5, 0x79, 0x32, 0xf5, 0xe5, 0xf5, 0x68, 0xce, 0x5f, 0x13, 0x9f, 0xfb, 0x37,
	0x00, 0x00, 0xff, 0xff, 0x50, 0x94, 0xed, 0xc1, 0xf5, 0x0a, 0x00, 0x00,
}
