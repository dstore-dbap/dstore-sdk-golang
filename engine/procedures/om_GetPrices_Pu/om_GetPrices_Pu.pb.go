// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/om_GetPrices_Pu.proto
// DO NOT EDIT!

/*
Package om_GetPrices_Pu is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/om_GetPrices_Pu.proto

It has these top-level messages:
	Parameters
	Response
*/
package om_GetPrices_Pu

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "gosdk.dstore.de/values"
import dstore_engine_error "gosdk.dstore.de/engine/error"
import dstore_engine_message "gosdk.dstore.de/engine/message"
import dstore_engine_metainformation "gosdk.dstore.de/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	NodeIds                       *dstore_values.StringValue  `protobuf:"bytes,1,opt,name=node_ids,json=nodeIds" json:"node_ids,omitempty"`
	NodeIdsNull                   bool                        `protobuf:"varint,1001,opt,name=node_ids_null,json=nodeIdsNull" json:"node_ids_null,omitempty"`
	Quantities                    *dstore_values.StringValue  `protobuf:"bytes,2,opt,name=quantities" json:"quantities,omitempty"`
	QuantitiesNull                bool                        `protobuf:"varint,1002,opt,name=quantities_null,json=quantitiesNull" json:"quantities_null,omitempty"`
	PersonId                      *dstore_values.IntegerValue `protobuf:"bytes,3,opt,name=person_id,json=personId" json:"person_id,omitempty"`
	PersonIdNull                  bool                        `protobuf:"varint,1003,opt,name=person_id_null,json=personIdNull" json:"person_id_null,omitempty"`
	CurrencyId                    *dstore_values.IntegerValue `protobuf:"bytes,4,opt,name=currency_id,json=currencyId" json:"currency_id,omitempty"`
	CurrencyIdNull                bool                        `protobuf:"varint,1004,opt,name=currency_id_null,json=currencyIdNull" json:"currency_id_null,omitempty"`
	IsTreeNodeId                  *dstore_values.BooleanValue `protobuf:"bytes,5,opt,name=is_tree_node_id,json=isTreeNodeId" json:"is_tree_node_id,omitempty"`
	IsTreeNodeIdNull              bool                        `protobuf:"varint,1005,opt,name=is_tree_node_id_null,json=isTreeNodeIdNull" json:"is_tree_node_id_null,omitempty"`
	PriceNodeCharacteristicId     *dstore_values.IntegerValue `protobuf:"bytes,6,opt,name=price_node_characteristic_id,json=priceNodeCharacteristicId" json:"price_node_characteristic_id,omitempty"`
	PriceNodeCharacteristicIdNull bool                        `protobuf:"varint,1006,opt,name=price_node_characteristic_id_null,json=priceNodeCharacteristicIdNull" json:"price_node_characteristic_id_null,omitempty"`
	ComputeSum                    *dstore_values.BooleanValue `protobuf:"bytes,7,opt,name=compute_sum,json=computeSum" json:"compute_sum,omitempty"`
	ComputeSumNull                bool                        `protobuf:"varint,1007,opt,name=compute_sum_null,json=computeSumNull" json:"compute_sum_null,omitempty"`
	UniqueId                      *dstore_values.StringValue  `protobuf:"bytes,8,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
	UniqueIdNull                  bool                        `protobuf:"varint,1008,opt,name=unique_id_null,json=uniqueIdNull" json:"unique_id_null,omitempty"`
	GetAdditionalPriceInfo        *dstore_values.BooleanValue `protobuf:"bytes,9,opt,name=get_additional_price_info,json=getAdditionalPriceInfo" json:"get_additional_price_info,omitempty"`
	GetAdditionalPriceInfoNull    bool                        `protobuf:"varint,1009,opt,name=get_additional_price_info_null,json=getAdditionalPriceInfoNull" json:"get_additional_price_info_null,omitempty"`
	DeliveryPersonId              *dstore_values.IntegerValue `protobuf:"bytes,10,opt,name=delivery_person_id,json=deliveryPersonId" json:"delivery_person_id,omitempty"`
	DeliveryPersonIdNull          bool                        `protobuf:"varint,1010,opt,name=delivery_person_id_null,json=deliveryPersonIdNull" json:"delivery_person_id_null,omitempty"`
	GetPricePerSingleNodeId       *dstore_values.BooleanValue `protobuf:"bytes,11,opt,name=get_price_per_single_node_id,json=getPricePerSingleNodeId" json:"get_price_per_single_node_id,omitempty"`
	GetPricePerSingleNodeIdNull   bool                        `protobuf:"varint,1011,opt,name=get_price_per_single_node_id_null,json=getPricePerSingleNodeIdNull" json:"get_price_per_single_node_id_null,omitempty"`
	PaymentTypeId                 *dstore_values.IntegerValue `protobuf:"bytes,12,opt,name=payment_type_id,json=paymentTypeId" json:"payment_type_id,omitempty"`
	PaymentTypeIdNull             bool                        `protobuf:"varint,1012,opt,name=payment_type_id_null,json=paymentTypeIdNull" json:"payment_type_id_null,omitempty"`
	ShippingTypeId                *dstore_values.IntegerValue `protobuf:"bytes,13,opt,name=shipping_type_id,json=shippingTypeId" json:"shipping_type_id,omitempty"`
	ShippingTypeIdNull            bool                        `protobuf:"varint,1013,opt,name=shipping_type_id_null,json=shippingTypeIdNull" json:"shipping_type_id_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetNodeIds() *dstore_values.StringValue {
	if m != nil {
		return m.NodeIds
	}
	return nil
}

func (m *Parameters) GetQuantities() *dstore_values.StringValue {
	if m != nil {
		return m.Quantities
	}
	return nil
}

func (m *Parameters) GetPersonId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonId
	}
	return nil
}

func (m *Parameters) GetCurrencyId() *dstore_values.IntegerValue {
	if m != nil {
		return m.CurrencyId
	}
	return nil
}

func (m *Parameters) GetIsTreeNodeId() *dstore_values.BooleanValue {
	if m != nil {
		return m.IsTreeNodeId
	}
	return nil
}

func (m *Parameters) GetPriceNodeCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PriceNodeCharacteristicId
	}
	return nil
}

func (m *Parameters) GetComputeSum() *dstore_values.BooleanValue {
	if m != nil {
		return m.ComputeSum
	}
	return nil
}

func (m *Parameters) GetUniqueId() *dstore_values.StringValue {
	if m != nil {
		return m.UniqueId
	}
	return nil
}

func (m *Parameters) GetGetAdditionalPriceInfo() *dstore_values.BooleanValue {
	if m != nil {
		return m.GetAdditionalPriceInfo
	}
	return nil
}

func (m *Parameters) GetDeliveryPersonId() *dstore_values.IntegerValue {
	if m != nil {
		return m.DeliveryPersonId
	}
	return nil
}

func (m *Parameters) GetGetPricePerSingleNodeId() *dstore_values.BooleanValue {
	if m != nil {
		return m.GetPricePerSingleNodeId
	}
	return nil
}

func (m *Parameters) GetPaymentTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PaymentTypeId
	}
	return nil
}

func (m *Parameters) GetShippingTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ShippingTypeId
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId                          int32                       `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	TotalNettoPrice                *dstore_values.DecimalValue `protobuf:"bytes,10001,opt,name=total_netto_price,json=totalNettoPrice" json:"total_netto_price,omitempty"`
	PreciseAbsUnitGrossSurcharge   *dstore_values.DecimalValue `protobuf:"bytes,10002,opt,name=precise_abs_unit_gross_surcharge,json=preciseAbsUnitGrossSurcharge" json:"precise_abs_unit_gross_surcharge,omitempty"`
	PriceNodeCharacteristicId      *dstore_values.IntegerValue `protobuf:"bytes,10003,opt,name=price_node_characteristic_id,json=priceNodeCharacteristicId" json:"price_node_characteristic_id,omitempty"`
	AbsoluteUnitNettoSurcharge     *dstore_values.DecimalValue `protobuf:"bytes,10004,opt,name=absolute_unit_netto_surcharge,json=absoluteUnitNettoSurcharge" json:"absolute_unit_netto_surcharge,omitempty"`
	UnitGrossPrice                 *dstore_values.DecimalValue `protobuf:"bytes,10005,opt,name=unit_gross_price,json=unitGrossPrice" json:"unit_gross_price,omitempty"`
	AbsoluteTotalNetSurcharge      *dstore_values.DecimalValue `protobuf:"bytes,10006,opt,name=absolute_total_net_surcharge,json=absoluteTotalNetSurcharge" json:"absolute_total_net_surcharge,omitempty"`
	AbsoluteTotalGrossSurcharge    *dstore_values.DecimalValue `protobuf:"bytes,10007,opt,name=absolute_total_gross_surcharge,json=absoluteTotalGrossSurcharge" json:"absolute_total_gross_surcharge,omitempty"`
	UnitBruttoPrice                *dstore_values.DecimalValue `protobuf:"bytes,10008,opt,name=unit_brutto_price,json=unitBruttoPrice" json:"unit_brutto_price,omitempty"`
	PreciseUnitGrossPrice          *dstore_values.DecimalValue `protobuf:"bytes,10009,opt,name=precise_unit_gross_price,json=preciseUnitGrossPrice" json:"precise_unit_gross_price,omitempty"`
	UnitNetPrice                   *dstore_values.DecimalValue `protobuf:"bytes,10010,opt,name=unit_net_price,json=unitNetPrice" json:"unit_net_price,omitempty"`
	TotalBruttoPrice               *dstore_values.DecimalValue `protobuf:"bytes,10011,opt,name=total_brutto_price,json=totalBruttoPrice" json:"total_brutto_price,omitempty"`
	PreciseAbsUnitNetSurcharge     *dstore_values.DecimalValue `protobuf:"bytes,10012,opt,name=precise_abs_unit_net_surcharge,json=preciseAbsUnitNetSurcharge" json:"precise_abs_unit_net_surcharge,omitempty"`
	SurchargeReason                *dstore_values.StringValue  `protobuf:"bytes,10013,opt,name=surcharge_reason,json=surchargeReason" json:"surcharge_reason,omitempty"`
	NodeId                         *dstore_values.IntegerValue `protobuf:"bytes,10014,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	TreeNodeId                     *dstore_values.IntegerValue `protobuf:"bytes,10015,opt,name=tree_node_id,json=treeNodeId" json:"tree_node_id,omitempty"`
	AbsoluteTotalNettoSurcharge    *dstore_values.DecimalValue `protobuf:"bytes,10016,opt,name=absolute_total_netto_surcharge,json=absoluteTotalNettoSurcharge" json:"absolute_total_netto_surcharge,omitempty"`
	RelativeSurcharge              *dstore_values.DecimalValue `protobuf:"bytes,10017,opt,name=relative_surcharge,json=relativeSurcharge" json:"relative_surcharge,omitempty"`
	AbsoluteTotalBruttoSurcharge   *dstore_values.DecimalValue `protobuf:"bytes,10018,opt,name=absolute_total_brutto_surcharge,json=absoluteTotalBruttoSurcharge" json:"absolute_total_brutto_surcharge,omitempty"`
	SurchargeGeneratedByCampIds    *dstore_values.StringValue  `protobuf:"bytes,10019,opt,name=surcharge_generated_by_camp_ids,json=surchargeGeneratedByCampIds" json:"surcharge_generated_by_camp_ids,omitempty"`
	PreciseTotalGrossPrice         *dstore_values.DecimalValue `protobuf:"bytes,10020,opt,name=precise_total_gross_price,json=preciseTotalGrossPrice" json:"precise_total_gross_price,omitempty"`
	UnitNettoPrice                 *dstore_values.DecimalValue `protobuf:"bytes,10021,opt,name=unit_netto_price,json=unitNettoPrice" json:"unit_netto_price,omitempty"`
	TaxesMultiplier                *dstore_values.DecimalValue `protobuf:"bytes,10022,opt,name=taxes_multiplier,json=taxesMultiplier" json:"taxes_multiplier,omitempty"`
	PreciseAbsTotalGrossSurcharge  *dstore_values.DecimalValue `protobuf:"bytes,10023,opt,name=precise_abs_total_gross_surcharge,json=preciseAbsTotalGrossSurcharge" json:"precise_abs_total_gross_surcharge,omitempty"`
	PreciseAbsTotalNetSurcharge    *dstore_values.DecimalValue `protobuf:"bytes,10024,opt,name=precise_abs_total_net_surcharge,json=preciseAbsTotalNetSurcharge" json:"precise_abs_total_net_surcharge,omitempty"`
	TotalNetPrice                  *dstore_values.DecimalValue `protobuf:"bytes,10025,opt,name=total_net_price,json=totalNetPrice" json:"total_net_price,omitempty"`
	Quantity                       *dstore_values.IntegerValue `protobuf:"bytes,10026,opt,name=quantity" json:"quantity,omitempty"`
	QuantityPerBundleItemSetIdList *dstore_values.StringValue  `protobuf:"bytes,10027,opt,name=quantity_per_bundle_item_set_id_list,json=quantityPerBundleItemSetIdList" json:"quantity_per_bundle_item_set_id_list,omitempty"`
	SurchargeValue                 *dstore_values.DecimalValue `protobuf:"bytes,10028,opt,name=surcharge_value,json=surchargeValue" json:"surcharge_value,omitempty"`
	AbsoluteUnitNetSurcharge       *dstore_values.DecimalValue `protobuf:"bytes,10029,opt,name=absolute_unit_net_surcharge,json=absoluteUnitNetSurcharge" json:"absolute_unit_net_surcharge,omitempty"`
	AbsoluteUnitBruttoSurcharge    *dstore_values.DecimalValue `protobuf:"bytes,10030,opt,name=absolute_unit_brutto_surcharge,json=absoluteUnitBruttoSurcharge" json:"absolute_unit_brutto_surcharge,omitempty"`
	AbsoluteUnitGrossSurcharge     *dstore_values.DecimalValue `protobuf:"bytes,10031,opt,name=absolute_unit_gross_surcharge,json=absoluteUnitGrossSurcharge" json:"absolute_unit_gross_surcharge,omitempty"`
	PreciseTotalNetPrice           *dstore_values.DecimalValue `protobuf:"bytes,10032,opt,name=precise_total_net_price,json=preciseTotalNetPrice" json:"precise_total_net_price,omitempty"`
	SurchargeTypeId                *dstore_values.IntegerValue `protobuf:"bytes,10033,opt,name=surcharge_type_id,json=surchargeTypeId" json:"surcharge_type_id,omitempty"`
	PreciseUnitNetPrice            *dstore_values.DecimalValue `protobuf:"bytes,10034,opt,name=precise_unit_net_price,json=preciseUnitNetPrice" json:"precise_unit_net_price,omitempty"`
	TotalGrossPrice                *dstore_values.DecimalValue `protobuf:"bytes,10035,opt,name=total_gross_price,json=totalGrossPrice" json:"total_gross_price,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetTotalNettoPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.TotalNettoPrice
	}
	return nil
}

func (m *Response_Row) GetPreciseAbsUnitGrossSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseAbsUnitGrossSurcharge
	}
	return nil
}

func (m *Response_Row) GetPriceNodeCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PriceNodeCharacteristicId
	}
	return nil
}

func (m *Response_Row) GetAbsoluteUnitNettoSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.AbsoluteUnitNettoSurcharge
	}
	return nil
}

func (m *Response_Row) GetUnitGrossPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.UnitGrossPrice
	}
	return nil
}

func (m *Response_Row) GetAbsoluteTotalNetSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.AbsoluteTotalNetSurcharge
	}
	return nil
}

func (m *Response_Row) GetAbsoluteTotalGrossSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.AbsoluteTotalGrossSurcharge
	}
	return nil
}

func (m *Response_Row) GetUnitBruttoPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.UnitBruttoPrice
	}
	return nil
}

func (m *Response_Row) GetPreciseUnitGrossPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseUnitGrossPrice
	}
	return nil
}

func (m *Response_Row) GetUnitNetPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.UnitNetPrice
	}
	return nil
}

func (m *Response_Row) GetTotalBruttoPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.TotalBruttoPrice
	}
	return nil
}

func (m *Response_Row) GetPreciseAbsUnitNetSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseAbsUnitNetSurcharge
	}
	return nil
}

func (m *Response_Row) GetSurchargeReason() *dstore_values.StringValue {
	if m != nil {
		return m.SurchargeReason
	}
	return nil
}

func (m *Response_Row) GetNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *Response_Row) GetTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.TreeNodeId
	}
	return nil
}

func (m *Response_Row) GetAbsoluteTotalNettoSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.AbsoluteTotalNettoSurcharge
	}
	return nil
}

func (m *Response_Row) GetRelativeSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.RelativeSurcharge
	}
	return nil
}

func (m *Response_Row) GetAbsoluteTotalBruttoSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.AbsoluteTotalBruttoSurcharge
	}
	return nil
}

func (m *Response_Row) GetSurchargeGeneratedByCampIds() *dstore_values.StringValue {
	if m != nil {
		return m.SurchargeGeneratedByCampIds
	}
	return nil
}

func (m *Response_Row) GetPreciseTotalGrossPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseTotalGrossPrice
	}
	return nil
}

func (m *Response_Row) GetUnitNettoPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.UnitNettoPrice
	}
	return nil
}

func (m *Response_Row) GetTaxesMultiplier() *dstore_values.DecimalValue {
	if m != nil {
		return m.TaxesMultiplier
	}
	return nil
}

func (m *Response_Row) GetPreciseAbsTotalGrossSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseAbsTotalGrossSurcharge
	}
	return nil
}

func (m *Response_Row) GetPreciseAbsTotalNetSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseAbsTotalNetSurcharge
	}
	return nil
}

func (m *Response_Row) GetTotalNetPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.TotalNetPrice
	}
	return nil
}

func (m *Response_Row) GetQuantity() *dstore_values.IntegerValue {
	if m != nil {
		return m.Quantity
	}
	return nil
}

func (m *Response_Row) GetQuantityPerBundleItemSetIdList() *dstore_values.StringValue {
	if m != nil {
		return m.QuantityPerBundleItemSetIdList
	}
	return nil
}

func (m *Response_Row) GetSurchargeValue() *dstore_values.DecimalValue {
	if m != nil {
		return m.SurchargeValue
	}
	return nil
}

func (m *Response_Row) GetAbsoluteUnitNetSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.AbsoluteUnitNetSurcharge
	}
	return nil
}

func (m *Response_Row) GetAbsoluteUnitBruttoSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.AbsoluteUnitBruttoSurcharge
	}
	return nil
}

func (m *Response_Row) GetAbsoluteUnitGrossSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.AbsoluteUnitGrossSurcharge
	}
	return nil
}

func (m *Response_Row) GetPreciseTotalNetPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseTotalNetPrice
	}
	return nil
}

func (m *Response_Row) GetSurchargeTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.SurchargeTypeId
	}
	return nil
}

func (m *Response_Row) GetPreciseUnitNetPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseUnitNetPrice
	}
	return nil
}

func (m *Response_Row) GetTotalGrossPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.TotalGrossPrice
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.om_GetPrices_Pu.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.om_GetPrices_Pu.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.om_GetPrices_Pu.Response.Row")
}

func init() { proto.RegisterFile("dstore/engine/procedures/om_GetPrices_Pu.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1504 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x58, 0xf9, 0x6f, 0xdc, 0xd4,
	0x13, 0x57, 0xbf, 0xf9, 0x26, 0xd9, 0x4e, 0x92, 0xee, 0xd6, 0x4d, 0x13, 0x27, 0xdb, 0xa4, 0x17,
	0x48, 0x45, 0x48, 0x1b, 0x28, 0x02, 0x2a, 0x04, 0x48, 0x4d, 0x28, 0x61, 0x81, 0xae, 0xc2, 0xa6,
	0x29, 0xa2, 0x80, 0x8c, 0x77, 0xfd, 0xba, 0xb5, 0xf0, 0xda, 0x5b, 0x1f, 0x2d, 0xfb, 0x5f, 0x70,
	0xdf, 0xf7, 0x51, 0xee, 0x5b, 0x42, 0xe2, 0x4f, 0xe2, 0xbe, 0x7f, 0x67, 0xde, 0x1b, 0xdb, 0xcf,
	0xf6, 0xa6, 0xf5, 0x8b, 0xf8, 0x05, 0xea, 0x78, 0x3e, 0x9f, 0xcf, 0xbc, 0x99, 0x79, 0x33, 0xe3,
	0x85, 0x86, 0x15, 0x84, 0x9e, 0xcf, 0x56, 0x98, 0xdb, 0xb3, 0x5d, 0xb6, 0x32, 0xf0, 0xbd, 0x2e,
	0xb3, 0x22, 0x9f, 0x05, 0x2b, 0x5e, 0xdf, 0x58, 0x67, 0xe1, 0x86, 0x6f, 0x77, 0x59, 0x60, 0x6c,
	0x44, 0x0d, 0x7c, 0x15, 0x7a, 0xda, 0x12, 0xd9, 0x37, 0xc8, 0xbe, 0x51, 0x30, 0x5a, 0xdc, 0x17,
	0xd3, 0x5d, 0x32, 0x9d, 0x88, 0x05, 0x84, 0x59, 0x5c, 0xc8, 0x6b, 0x30, 0xdf, 0xf7, 0xfc, 0xf8,
	0x55, 0x3d, 0xff, 0xaa, 0xcf, 0x82, 0xc0, 0xec, 0xb1, 0xf8, 0xe5, 0xd1, 0xe2, 0xcb, 0xd0, 0xb4,
	0xdd, 0xf3, 0x9e, 0xdf, 0x37, 0x43, 0xdb, 0x73, 0xc9, 0xe8, 0xc8, 0x77, 0xd3, 0x00, 0x1b, 0xa6,
	0x6f, 0xe2, 0x5b, 0xe6, 0x07, 0xda, 0xad, 0x50, 0x71, 0x3d, 0x8b, 0x19, 0xb6, 0x15, 0xe8, 0xbb,
	0x0e, 0xed, 0x3a, 0x36, 0x75, 0x7c, 0x31, 0x3e, 0x62, 0x23, 0xf6, 0x29, 0x08, 0x7d, 0xdb, 0xed,
	0x9d, 0xe5, 0x0f, 0xed, 0x49, 0x6e, 0xdb, 0xb4, 0x02, 0xed, 0x28, 0xcc, 0x24, 0x30, 0xc3, 0x8d,
	0x1c, 0x47, 0xff, 0x61, 0x12, 0xc1, 0x95, 0xf6, 0x54, 0x6c, 0xd0, 0xc2, 0xbf, 0x69, 0x77, 0x00,
	0x5c, 0x8c, 0x4c, 0x37, 0xb4, 0x43, 0x9b, 0x05, 0xfa, 0xff, 0x4a, 0xd9, 0x33, 0xd6, 0xda, 0x31,
	0xa8, 0xca, 0x27, 0x92, 0xf8, 0x91, 0x24, 0xf6, 0xc8, 0xbf, 0x0b, 0x95, 0x13, 0xb0, 0x7b, 0x80,
	0x27, 0xf1, 0x5c, 0x74, 0x46, 0x1f, 0x13, 0x22, 0xf5, 0x82, 0x88, 0xed, 0x86, 0xac, 0xc7, 0x7c,
	0x52, 0xa9, 0x90, 0x75, 0xd3, 0xd2, 0xae, 0x87, 0x3d, 0x29, 0x92, 0x24, 0x7e, 0x22, 0x89, 0xe9,
	0xc4, 0x44, 0x08, 0xdc, 0x09, 0x53, 0xdd, 0xc8, 0xf7, 0x99, 0xdb, 0x1d, 0x72, 0x89, 0xff, 0x97,
	0x4b, 0x40, 0x62, 0x8f, 0x22, 0x37, 0x40, 0x2d, 0x83, 0x26, 0x99, 0x9f, 0xe3, 0x93, 0x48, 0x33,
	0x21, 0xb4, 0x0a, 0x55, 0x3b, 0x30, 0x42, 0x9f, 0x31, 0x23, 0x0e, 0xae, 0x3e, 0xbe, 0xad, 0x58,
	0xc7, 0xf3, 0x1c, 0x66, 0xba, 0x24, 0x36, 0x6d, 0x07, 0x67, 0x10, 0xd2, 0x12, 0x81, 0xd7, 0x56,
	0x60, 0xb6, 0xc0, 0x41, 0x92, 0xbf, 0x90, 0x64, 0x2d, 0x6b, 0x2c, 0x44, 0x1f, 0x83, 0x03, 0x03,
	0x5e, 0x8e, 0x64, 0xde, 0xbd, 0x80, 0xa5, 0xd1, 0xc5, 0xca, 0xb0, 0x83, 0xd0, 0xee, 0x72, 0x0f,
	0x26, 0xca, 0x8f, 0xbb, 0x20, 0x08, 0x38, 0xe7, 0x5a, 0x0e, 0x8e, 0xee, 0x34, 0xe1, 0xf0, 0xb5,
	0xd8, 0xc9, 0xb7, 0x5f, 0xc9, 0xb7, 0xa5, 0xab, 0xd2, 0xa4, 0x69, 0xf0, 0xfa, 0x83, 0x28, 0x64,
	0x46, 0x10, 0xf5, 0xf5, 0xc9, 0xf2, 0xc8, 0x40, 0x6c, 0xbf, 0x19, 0xf5, 0x45, 0x1a, 0x24, 0x9a,
	0x74, 0x7f, 0x4b, 0xd2, 0x90, 0x9a, 0x09, 0xa1, 0xdb, 0x61, 0x77, 0xe4, 0xda, 0x17, 0x23, 0x91,
	0x80, 0x4a, 0x69, 0xd5, 0x56, 0xc8, 0x98, 0xea, 0x29, 0x05, 0x92, 0xc2, 0xef, 0x71, 0x3d, 0x25,
	0x26, 0x82, 0xff, 0x2c, 0x2c, 0xf4, 0x58, 0x68, 0x98, 0x96, 0x65, 0xf3, 0x7b, 0x69, 0x3a, 0x06,
	0x85, 0x88, 0xdf, 0x55, 0x7d, 0x77, 0xf9, 0xb1, 0xe6, 0x10, 0x7d, 0x32, 0x05, 0x8b, 0x5e, 0xd2,
	0x44, 0xa8, 0xb6, 0x06, 0xcb, 0x57, 0xe5, 0x25, 0x77, 0xfe, 0x20, 0x77, 0x16, 0xb7, 0x27, 0x10,
	0xce, 0x35, 0x41, 0xb3, 0x98, 0x63, 0x5f, 0x62, 0xfe, 0xd0, 0x90, 0xd7, 0x0a, 0xca, 0x8b, 0xa0,
	0x96, 0xc0, 0x36, 0x92, 0xeb, 0x75, 0x1b, 0xcc, 0x8f, 0x52, 0x91, 0x23, 0x7f, 0x92, 0x23, 0xb3,
	0x45, 0x8c, 0x70, 0xe1, 0x1c, 0x1c, 0xe0, 0xe7, 0x20, 0xe7, 0x11, 0x68, 0x04, 0x18, 0x6b, 0x47,
	0xde, 0x89, 0xa9, 0xf2, 0x10, 0xcd, 0xf7, 0xe2, 0x26, 0x8b, 0xc4, 0x9b, 0x02, 0x1d, 0x5f, 0x8f,
	0x75, 0x38, 0x7c, 0x2d, 0x6e, 0xf2, 0xee, 0x2f, 0xf2, 0xae, 0x7e, 0x15, 0x12, 0xe1, 0xe4, 0x1a,
	0x54, 0x07, 0xe6, 0xb0, 0xcf, 0xdc, 0xd0, 0x08, 0x87, 0x03, 0xe1, 0xd7, 0x74, 0x79, 0x90, 0x66,
	0x62, 0xcc, 0x19, 0x84, 0xa0, 0x37, 0x37, 0xc1, 0x6c, 0x81, 0x84, 0x1c, 0xf8, 0x9b, 0x1c, 0xd8,
	0x9b, 0xb3, 0x16, 0xb2, 0xa7, 0xa0, 0x16, 0x5c, 0xb0, 0x07, 0x03, 0x74, 0x27, 0xd5, 0x9d, 0x29,
	0xd7, 0xdd, 0x93, 0x80, 0x62, 0xe1, 0xe3, 0xb0, 0xbf, 0x48, 0x43, 0xca, 0xff, 0x90, 0xb2, 0x96,
	0xb7, 0xe7, 0xd2, 0x47, 0xbe, 0x5f, 0x80, 0x4a, 0x9b, 0x05, 0x03, 0xcf, 0x0d, 0x18, 0x7a, 0x3e,
	0x2e, 0xc6, 0x52, 0x71, 0x66, 0xc4, 0x63, 0x8e, 0x46, 0xd6, 0x29, 0xfe, 0xdf, 0x36, 0x19, 0x6a,
	0x8f, 0x40, 0x8d, 0x0f, 0x24, 0x23, 0x33, 0x91, 0x70, 0x24, 0x8c, 0x21, 0xb8, 0x51, 0x00, 0x17,
	0xe7, 0xd6, 0x69, 0x7c, 0x6e, 0xca, 0xe7, 0x76, 0xb5, 0x9f, 0xff, 0x03, 0x4e, 0x80, 0xc9, 0x78,
	0x10, 0x62, 0xff, 0xe7, 0x8c, 0xcb, 0x23, 0x8c, 0x34, 0x26, 0x4f, 0xd3, 0xff, 0xdb, 0x89, 0xb9,
	0x76, 0x17, 0x8c, 0xf9, 0xde, 0x65, 0x6c, 0xe9, 0x1c, 0x75, 0x63, 0xe3, 0x9a, 0xb3, 0xba, 0x91,
	0x1c, 0xbe, 0xd1, 0xf6, 0x2e, 0xb7, 0x39, 0x6e, 0xf1, 0xca, 0x3c, 0x8c, 0xe1, 0x83, 0x36, 0x07,
	0x13, 0xf8, 0xc8, 0x73, 0xf1, 0x74, 0x0b, 0xe3, 0x31, 0xde, 0x1e, 0xc7, 0x47, 0x0c, 0xf3, 0x7d,
	0xb0, 0x37, 0xf4, 0x42, 0xbc, 0x88, 0x2e, 0x0b, 0x43, 0x8f, 0xaa, 0x4e, 0x7f, 0xa6, 0xb5, 0x6d,
	0xbe, 0x2c, 0xd6, 0xb5, 0xfb, 0xa6, 0x43, 0xf9, 0xaa, 0x0a, 0x58, 0x8b, 0xa3, 0x84, 0xbe, 0x66,
	0xc1, 0xa1, 0x81, 0x8f, 0x16, 0x01, 0x33, 0xcc, 0x4e, 0x60, 0x60, 0x3f, 0x09, 0x8d, 0x9e, 0xef,
	0x05, 0x01, 0x76, 0x33, 0x9f, 0xb7, 0x55, 0x3c, 0xfb, 0xb3, 0x0a, 0xc4, 0x07, 0x62, 0x96, 0x93,
	0x9d, 0x60, 0x0b, 0x39, 0xd6, 0x39, 0xc5, 0x66, 0xc2, 0xa0, 0x3d, 0x5e, 0x32, 0x0b, 0x9e, 0x6b,
	0xfd, 0xa7, 0x61, 0x60, 0xc0, 0x12, 0x3a, 0xef, 0x39, 0xbc, 0x09, 0x8b, 0x13, 0x50, 0x58, 0xe4,
	0x09, 0x9e, 0x57, 0x38, 0xc1, 0x62, 0x42, 0xc1, 0xfd, 0x17, 0x11, 0x92, 0xfe, 0xdf, 0x0b, 0xb5,
	0x4c, 0x64, 0x28, 0xdc, 0x2f, 0x28, 0x70, 0xf2, 0xb6, 0x4d, 0xb1, 0xa0, 0x68, 0x63, 0x1c, 0x52,
	0x47, 0xd3, 0x04, 0x66, 0xfc, 0x7c, 0x51, 0x81, 0x73, 0x21, 0x61, 0x38, 0x13, 0xa7, 0x52, 0xba,
	0x69, 0xc2, 0x72, 0x81, 0xbe, 0x98, 0xca, 0x97, 0x14, 0x04, 0xea, 0x39, 0x81, 0x42, 0x26, 0xb1,
	0xf2, 0x44, 0x24, 0x3a, 0x7e, 0x24, 0x2b, 0xef, 0x65, 0x95, 0xca, 0xe3, 0xb0, 0x55, 0x81, 0xa2,
	0x58, 0x6c, 0x81, 0x9e, 0x54, 0xde, 0x48, 0x6c, 0x5f, 0x51, 0x20, 0xdc, 0x1f, 0xa3, 0xb7, 0xf2,
	0x21, 0x5e, 0x15, 0xb3, 0x52, 0x94, 0x40, 0x4c, 0xf6, 0xaa, 0x02, 0x19, 0x1f, 0xa4, 0x3c, 0xe9,
	0xc4, 0x71, 0x3f, 0x68, 0x14, 0xbe, 0xdc, 0x29, 0x5f, 0x53, 0xe0, 0xa9, 0x09, 0x5c, 0xf6, 0x98,
	0x4f, 0xc0, 0xf2, 0xc8, 0x05, 0xcb, 0x27, 0xfd, 0x75, 0x95, 0xe2, 0xcc, 0x5f, 0xaf, 0x5c, 0xd6,
	0xb1, 0x38, 0x53, 0x32, 0xc3, 0x67, 0x26, 0x0e, 0x3c, 0xfd, 0x8d, 0x56, 0xe9, 0x7a, 0x51, 0x4d,
	0x41, 0x6d, 0x81, 0xc1, 0x8d, 0x7d, 0x32, 0x99, 0x84, 0x6f, 0x2a, 0xdc, 0xc7, 0x09, 0xda, 0xc8,
	0xb5, 0xbb, 0x61, 0x3a, 0xb7, 0x59, 0xbe, 0xa5, 0x80, 0x85, 0x50, 0x2e, 0x96, 0xa3, 0x45, 0x5b,
	0xbc, 0xbd, 0x6f, 0xef, 0xb8, 0x68, 0x0b, 0xd7, 0xf7, 0x01, 0xd0, 0x7c, 0xe6, 0x60, 0x4f, 0xbf,
	0xc4, 0x32, 0xb4, 0xef, 0x28, 0xd0, 0xee, 0x4d, 0x70, 0x92, 0xac, 0x0b, 0x07, 0x0b, 0xfe, 0xc6,
	0x55, 0x22, 0x99, 0xdf, 0x55, 0x69, 0x98, 0x39, 0x87, 0xa9, 0x62, 0xb2, 0x37, 0xf9, 0xa0, 0xcc,
	0x69, 0x8f, 0xb9, 0xcc, 0x37, 0x43, 0x66, 0x19, 0x9d, 0xa1, 0xd1, 0x35, 0xfb, 0x03, 0xf1, 0x51,
	0xf5, 0x5e, 0x79, 0x8a, 0xeb, 0x29, 0xc7, 0x7a, 0x42, 0xb1, 0x3a, 0x5c, 0x43, 0x02, 0xfe, 0xa5,
	0xf5, 0x30, 0x2c, 0x24, 0x85, 0x99, 0xed, 0x15, 0x54, 0xeb, 0xef, 0x2b, 0x9c, 0x60, 0x2e, 0x86,
	0xcb, 0x36, 0x41, 0x15, 0x9f, 0x34, 0xcb, 0xec, 0x6c, 0xfa, 0x40, 0xb5, 0x59, 0x66, 0x46, 0xd3,
	0x3a, 0xd4, 0x42, 0xf3, 0x29, 0x1c, 0x91, 0xfd, 0xc8, 0x09, 0xed, 0x81, 0x63, 0x33, 0x5f, 0xbf,
	0xa2, 0x34, 0xe3, 0x38, 0xea, 0x74, 0x0a, 0xd2, 0xce, 0xf3, 0x6f, 0x05, 0x79, 0x05, 0xb7, 0xef,
	0x8c, 0x1f, 0x2a, 0x30, 0x2f, 0xc9, 0x5b, 0xb8, 0x5d, 0x6f, 0xec, 0xc0, 0xc1, 0x51, 0x9d, 0xfc,
	0x5d, 0xff, 0x48, 0xa5, 0x94, 0x0b, 0x2a, 0xb9, 0xcb, 0x7e, 0x0f, 0x54, 0x25, 0x2f, 0xc5, 0xf6,
	0x63, 0x05, 0xce, 0x99, 0x64, 0xee, 0x53, 0x68, 0x4f, 0x40, 0x25, 0xfe, 0xd8, 0x1d, 0xea, 0x9f,
	0x28, 0xdc, 0xd7, 0xd4, 0x5a, 0xb3, 0xe1, 0xba, 0xe4, 0xdf, 0x62, 0xcd, 0xed, 0x44, 0xae, 0x85,
	0x6b, 0xae, 0x1d, 0xb2, 0xbe, 0x11, 0xa0, 0x4b, 0xb8, 0xef, 0x39, 0x38, 0x96, 0xf5, 0x4f, 0xcb,
	0xab, 0x73, 0x39, 0x21, 0xc2, 0x35, 0x78, 0x55, 0xd0, 0x34, 0x91, 0x65, 0x93, 0x85, 0x4d, 0xeb,
	0x41, 0xa4, 0xc0, 0x95, 0x54, 0xb6, 0x28, 0x43, 0xe0, 0xf5, 0xcf, 0x54, 0xca, 0x28, 0x05, 0x89,
	0x67, 0xed, 0x51, 0xa8, 0x8f, 0x2c, 0x07, 0x99, 0x8c, 0x7c, 0xae, 0x40, 0xa9, 0x17, 0x56, 0x83,
	0xed, 0x27, 0x6e, 0x76, 0x2e, 0x4a, 0xfe, 0x2f, 0x76, 0xd2, 0xbc, 0xb6, 0xd2, 0x19, 0x29, 0x25,
	0x46, 0x96, 0x9b, 0x62, 0xe5, 0x7e, 0xb9, 0xd3, 0xe5, 0xa6, 0x50, 0xb6, 0x9b, 0x30, 0x9f, 0x6f,
	0x04, 0xb2, 0xb4, 0xbe, 0x52, 0xa0, 0x9e, 0xcd, 0xb6, 0x81, 0xb4, 0xc2, 0x70, 0x4f, 0x90, 0xc9,
	0x4b, 0x3e, 0x28, 0xbe, 0x56, 0x28, 0x35, 0x99, 0xf3, 0xf8, 0x93, 0xe2, 0x21, 0x98, 0xcb, 0xed,
	0x09, 0xd2, 0xbb, 0x6f, 0x14, 0xbc, 0xdb, 0x97, 0xd9, 0x12, 0xb2, 0xce, 0x8d, 0xb6, 0xbc, 0x6f,
	0x95, 0xd7, 0x67, 0xd9, 0xeb, 0x56, 0x37, 0xa0, 0x6e, 0x7b, 0x85, 0xf5, 0x5e, 0xfe, 0x74, 0x77,
	0xee, 0xe6, 0x9e, 0x17, 0x58, 0x4f, 0x26, 0xef, 0x2d, 0x85, 0x5f, 0xf7, 0x3a, 0x13, 0xe2, 0xd7,
	0xb4, 0x5b, 0xfe, 0x0d, 0x00, 0x00, 0xff, 0xff, 0xb0, 0x5f, 0xd2, 0x73, 0x10, 0x14, 0x00, 0x00,
}
