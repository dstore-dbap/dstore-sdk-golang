// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/st_GetDirectSuccessors_Tree_Ad.proto
// DO NOT EDIT!

/*
Package st_GetDirectSuccessors_Tree_Ad is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/st_GetDirectSuccessors_Tree_Ad.proto

It has these top-level messages:
	Parameters
	Response
*/
package st_GetDirectSuccessors_Tree_Ad

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "gosdk.dstore.de/values"
import dstore_engine_error "gosdk.dstore.de/engine/error"
import dstore_engine_message "gosdk.dstore.de/engine/message"
import dstore_engine_metainformation "gosdk.dstore.de/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	HTreeNodeId                      *dstore_values.IntegerValue   `protobuf:"bytes,1,opt,name=h_tree_node_id,json=hTreeNodeId" json:"h_tree_node_id,omitempty"`
	HTreeNodeIdNull                  bool                          `protobuf:"varint,1001,opt,name=h_tree_node_id_null,json=hTreeNodeIdNull" json:"h_tree_node_id_null,omitempty"`
	FromDate                         *dstore_values.TimestampValue `protobuf:"bytes,2,opt,name=from_date,json=fromDate" json:"from_date,omitempty"`
	FromDateNull                     bool                          `protobuf:"varint,1002,opt,name=from_date_null,json=fromDateNull" json:"from_date_null,omitempty"`
	ToDate                           *dstore_values.TimestampValue `protobuf:"bytes,3,opt,name=to_date,json=toDate" json:"to_date,omitempty"`
	ToDateNull                       bool                          `protobuf:"varint,1003,opt,name=to_date_null,json=toDateNull" json:"to_date_null,omitempty"`
	BasicCharacteristicNo1           *dstore_values.IntegerValue   `protobuf:"bytes,4,opt,name=basic_characteristic_no1,json=basicCharacteristicNo1" json:"basic_characteristic_no1,omitempty"`
	BasicCharacteristicNo1Null       bool                          `protobuf:"varint,1004,opt,name=basic_characteristic_no1_null,json=basicCharacteristicNo1Null" json:"basic_characteristic_no1_null,omitempty"`
	WeightBasicCharacteristicNo1     *dstore_values.DecimalValue   `protobuf:"bytes,5,opt,name=weight_basic_characteristic_no1,json=weightBasicCharacteristicNo1" json:"weight_basic_characteristic_no1,omitempty"`
	WeightBasicCharacteristicNo1Null bool                          `protobuf:"varint,1005,opt,name=weight_basic_characteristic_no1_null,json=weightBasicCharacteristicNo1Null" json:"weight_basic_characteristic_no1_null,omitempty"`
	BasicCharacteristicNo2           *dstore_values.IntegerValue   `protobuf:"bytes,6,opt,name=basic_characteristic_no2,json=basicCharacteristicNo2" json:"basic_characteristic_no2,omitempty"`
	BasicCharacteristicNo2Null       bool                          `protobuf:"varint,1006,opt,name=basic_characteristic_no2_null,json=basicCharacteristicNo2Null" json:"basic_characteristic_no2_null,omitempty"`
	WeightBasicCharacteristicNo2     *dstore_values.DecimalValue   `protobuf:"bytes,7,opt,name=weight_basic_characteristic_no2,json=weightBasicCharacteristicNo2" json:"weight_basic_characteristic_no2,omitempty"`
	WeightBasicCharacteristicNo2Null bool                          `protobuf:"varint,1007,opt,name=weight_basic_characteristic_no2_null,json=weightBasicCharacteristicNo2Null" json:"weight_basic_characteristic_no2_null,omitempty"`
	BasicCharacteristicNo3           *dstore_values.IntegerValue   `protobuf:"bytes,8,opt,name=basic_characteristic_no3,json=basicCharacteristicNo3" json:"basic_characteristic_no3,omitempty"`
	BasicCharacteristicNo3Null       bool                          `protobuf:"varint,1008,opt,name=basic_characteristic_no3_null,json=basicCharacteristicNo3Null" json:"basic_characteristic_no3_null,omitempty"`
	WeightBasicCharacteristicNo3     *dstore_values.DecimalValue   `protobuf:"bytes,9,opt,name=weight_basic_characteristic_no3,json=weightBasicCharacteristicNo3" json:"weight_basic_characteristic_no3,omitempty"`
	WeightBasicCharacteristicNo3Null bool                          `protobuf:"varint,1009,opt,name=weight_basic_characteristic_no3_null,json=weightBasicCharacteristicNo3Null" json:"weight_basic_characteristic_no3_null,omitempty"`
	SourceTableForStatistics         *dstore_values.IntegerValue   `protobuf:"bytes,10,opt,name=source_table_for_statistics,json=sourceTableForStatistics" json:"source_table_for_statistics,omitempty"`
	SourceTableForStatisticsNull     bool                          `protobuf:"varint,1010,opt,name=source_table_for_statistics_null,json=sourceTableForStatisticsNull" json:"source_table_for_statistics_null,omitempty"`
	DisplayOnlyActive                *dstore_values.BooleanValue   `protobuf:"bytes,11,opt,name=display_only_active,json=displayOnlyActive" json:"display_only_active,omitempty"`
	DisplayOnlyActiveNull            bool                          `protobuf:"varint,1011,opt,name=display_only_active_null,json=displayOnlyActiveNull" json:"display_only_active_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetHTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.HTreeNodeId
	}
	return nil
}

func (m *Parameters) GetFromDate() *dstore_values.TimestampValue {
	if m != nil {
		return m.FromDate
	}
	return nil
}

func (m *Parameters) GetToDate() *dstore_values.TimestampValue {
	if m != nil {
		return m.ToDate
	}
	return nil
}

func (m *Parameters) GetBasicCharacteristicNo1() *dstore_values.IntegerValue {
	if m != nil {
		return m.BasicCharacteristicNo1
	}
	return nil
}

func (m *Parameters) GetWeightBasicCharacteristicNo1() *dstore_values.DecimalValue {
	if m != nil {
		return m.WeightBasicCharacteristicNo1
	}
	return nil
}

func (m *Parameters) GetBasicCharacteristicNo2() *dstore_values.IntegerValue {
	if m != nil {
		return m.BasicCharacteristicNo2
	}
	return nil
}

func (m *Parameters) GetWeightBasicCharacteristicNo2() *dstore_values.DecimalValue {
	if m != nil {
		return m.WeightBasicCharacteristicNo2
	}
	return nil
}

func (m *Parameters) GetBasicCharacteristicNo3() *dstore_values.IntegerValue {
	if m != nil {
		return m.BasicCharacteristicNo3
	}
	return nil
}

func (m *Parameters) GetWeightBasicCharacteristicNo3() *dstore_values.DecimalValue {
	if m != nil {
		return m.WeightBasicCharacteristicNo3
	}
	return nil
}

func (m *Parameters) GetSourceTableForStatistics() *dstore_values.IntegerValue {
	if m != nil {
		return m.SourceTableForStatistics
	}
	return nil
}

func (m *Parameters) GetDisplayOnlyActive() *dstore_values.BooleanValue {
	if m != nil {
		return m.DisplayOnlyActive
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId                          int32                       `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	TreeLevel                      *dstore_values.IntegerValue `protobuf:"bytes,10001,opt,name=tree_level,json=treeLevel" json:"tree_level,omitempty"`
	Predecessor                    *dstore_values.IntegerValue `protobuf:"bytes,10002,opt,name=predecessor" json:"predecessor,omitempty"`
	LevelNo                        *dstore_values.IntegerValue `protobuf:"bytes,10003,opt,name=level_no,json=levelNo" json:"level_no,omitempty"`
	RelativeValueBasicCharacNo3    *dstore_values.DecimalValue `protobuf:"bytes,10004,opt,name=relative_value_basic_charac_no3,json=relativeValueBasicCharacNo3" json:"relative_value_basic_charac_no3,omitempty"`
	RelativeValueBasicCharacNo2    *dstore_values.DecimalValue `protobuf:"bytes,10005,opt,name=relative_value_basic_charac_no2,json=relativeValueBasicCharacNo2" json:"relative_value_basic_charac_no2,omitempty"`
	RelativeValueBasicCharacNo1    *dstore_values.DecimalValue `protobuf:"bytes,10006,opt,name=relative_value_basic_charac_no1,json=relativeValueBasicCharacNo1" json:"relative_value_basic_charac_no1,omitempty"`
	TotalValueIndex                *dstore_values.DecimalValue `protobuf:"bytes,10007,opt,name=total_value_index,json=totalValueIndex" json:"total_value_index,omitempty"`
	RelativeValueIndex             *dstore_values.DecimalValue `protobuf:"bytes,10008,opt,name=relative_value_index,json=relativeValueIndex" json:"relative_value_index,omitempty"`
	NodeDescription                *dstore_values.StringValue  `protobuf:"bytes,10009,opt,name=node_description,json=nodeDescription" json:"node_description,omitempty"`
	Active                         *dstore_values.BooleanValue `protobuf:"bytes,10010,opt,name=active" json:"active,omitempty"`
	HasNextSibling                 *dstore_values.BooleanValue `protobuf:"bytes,10011,opt,name=has_next_sibling,json=hasNextSibling" json:"has_next_sibling,omitempty"`
	TotalValueBasicCharacNo1       *dstore_values.DecimalValue `protobuf:"bytes,10012,opt,name=total_value_basic_charac_no1,json=totalValueBasicCharacNo1" json:"total_value_basic_charac_no1,omitempty"`
	HTreeNodeId                    *dstore_values.IntegerValue `protobuf:"bytes,10013,opt,name=h_tree_node_id,json=hTreeNodeId" json:"h_tree_node_id,omitempty"`
	TotalValueBasicCharacNo2       *dstore_values.DecimalValue `protobuf:"bytes,10014,opt,name=total_value_basic_charac_no2,json=totalValueBasicCharacNo2" json:"total_value_basic_charac_no2,omitempty"`
	TotalValueBasicCharacNo3       *dstore_values.DecimalValue `protobuf:"bytes,10015,opt,name=total_value_basic_charac_no3,json=totalValueBasicCharacNo3" json:"total_value_basic_charac_no3,omitempty"`
	MaxRelativeValuePerPredecessor *dstore_values.DecimalValue `protobuf:"bytes,10016,opt,name=max_relative_value_per_predecessor,json=maxRelativeValuePerPredecessor" json:"max_relative_value_per_predecessor,omitempty"`
	TreeNodeId                     *dstore_values.IntegerValue `protobuf:"bytes,10017,opt,name=tree_node_id,json=treeNodeId" json:"tree_node_id,omitempty"`
	NodeId                         *dstore_values.IntegerValue `protobuf:"bytes,10018,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	MaxRelativeValueIndexPerPred   *dstore_values.DecimalValue `protobuf:"bytes,10019,opt,name=max_relative_value_index_per_pred,json=maxRelativeValueIndexPerPred" json:"max_relative_value_index_per_pred,omitempty"`
	FromDate                       *dstore_values.StringValue  `protobuf:"bytes,10020,opt,name=from_date,json=fromDate" json:"from_date,omitempty"`
	ToDate                         *dstore_values.StringValue  `protobuf:"bytes,10021,opt,name=to_date,json=toDate" json:"to_date,omitempty"`
	HasSuccessors                  *dstore_values.BooleanValue `protobuf:"bytes,10022,opt,name=has_successors,json=hasSuccessors" json:"has_successors,omitempty"`
	Deleted                        *dstore_values.BooleanValue `protobuf:"bytes,10023,opt,name=deleted" json:"deleted,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetTreeLevel() *dstore_values.IntegerValue {
	if m != nil {
		return m.TreeLevel
	}
	return nil
}

func (m *Response_Row) GetPredecessor() *dstore_values.IntegerValue {
	if m != nil {
		return m.Predecessor
	}
	return nil
}

func (m *Response_Row) GetLevelNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.LevelNo
	}
	return nil
}

func (m *Response_Row) GetRelativeValueBasicCharacNo3() *dstore_values.DecimalValue {
	if m != nil {
		return m.RelativeValueBasicCharacNo3
	}
	return nil
}

func (m *Response_Row) GetRelativeValueBasicCharacNo2() *dstore_values.DecimalValue {
	if m != nil {
		return m.RelativeValueBasicCharacNo2
	}
	return nil
}

func (m *Response_Row) GetRelativeValueBasicCharacNo1() *dstore_values.DecimalValue {
	if m != nil {
		return m.RelativeValueBasicCharacNo1
	}
	return nil
}

func (m *Response_Row) GetTotalValueIndex() *dstore_values.DecimalValue {
	if m != nil {
		return m.TotalValueIndex
	}
	return nil
}

func (m *Response_Row) GetRelativeValueIndex() *dstore_values.DecimalValue {
	if m != nil {
		return m.RelativeValueIndex
	}
	return nil
}

func (m *Response_Row) GetNodeDescription() *dstore_values.StringValue {
	if m != nil {
		return m.NodeDescription
	}
	return nil
}

func (m *Response_Row) GetActive() *dstore_values.BooleanValue {
	if m != nil {
		return m.Active
	}
	return nil
}

func (m *Response_Row) GetHasNextSibling() *dstore_values.BooleanValue {
	if m != nil {
		return m.HasNextSibling
	}
	return nil
}

func (m *Response_Row) GetTotalValueBasicCharacNo1() *dstore_values.DecimalValue {
	if m != nil {
		return m.TotalValueBasicCharacNo1
	}
	return nil
}

func (m *Response_Row) GetHTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.HTreeNodeId
	}
	return nil
}

func (m *Response_Row) GetTotalValueBasicCharacNo2() *dstore_values.DecimalValue {
	if m != nil {
		return m.TotalValueBasicCharacNo2
	}
	return nil
}

func (m *Response_Row) GetTotalValueBasicCharacNo3() *dstore_values.DecimalValue {
	if m != nil {
		return m.TotalValueBasicCharacNo3
	}
	return nil
}

func (m *Response_Row) GetMaxRelativeValuePerPredecessor() *dstore_values.DecimalValue {
	if m != nil {
		return m.MaxRelativeValuePerPredecessor
	}
	return nil
}

func (m *Response_Row) GetTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.TreeNodeId
	}
	return nil
}

func (m *Response_Row) GetNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *Response_Row) GetMaxRelativeValueIndexPerPred() *dstore_values.DecimalValue {
	if m != nil {
		return m.MaxRelativeValueIndexPerPred
	}
	return nil
}

func (m *Response_Row) GetFromDate() *dstore_values.StringValue {
	if m != nil {
		return m.FromDate
	}
	return nil
}

func (m *Response_Row) GetToDate() *dstore_values.StringValue {
	if m != nil {
		return m.ToDate
	}
	return nil
}

func (m *Response_Row) GetHasSuccessors() *dstore_values.BooleanValue {
	if m != nil {
		return m.HasSuccessors
	}
	return nil
}

func (m *Response_Row) GetDeleted() *dstore_values.BooleanValue {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.st_GetDirectSuccessors_Tree_Ad.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.st_GetDirectSuccessors_Tree_Ad.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.st_GetDirectSuccessors_Tree_Ad.Response.Row")
}

func init() {
	proto.RegisterFile("dstore/engine/procedures/st_GetDirectSuccessors_Tree_Ad.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 1120 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x57, 0xeb, 0x6e, 0x1b, 0x45,
	0x14, 0x56, 0x09, 0xb1, 0xd3, 0x93, 0x34, 0x49, 0x27, 0x50, 0x0d, 0x71, 0x5a, 0xd2, 0x00, 0x12,
	0x3f, 0xc0, 0x21, 0xeb, 0x72, 0x51, 0x11, 0x55, 0x93, 0x86, 0x96, 0x88, 0x76, 0x1b, 0x6d, 0x0a,
	0x12, 0x15, 0xd2, 0x68, 0xbd, 0x3b, 0xb5, 0x57, 0xac, 0x77, 0xac, 0x99, 0x71, 0x92, 0xbe, 0x05,
	0x50, 0xee, 0xf7, 0x3b, 0x8f, 0xc4, 0x33, 0x70, 0xa7, 0xf0, 0x02, 0xcc, 0x65, 0x1d, 0xaf, 0x1d,
	0xc7, 0xbb, 0xa9, 0xff, 0x24, 0x1e, 0xcf, 0xf9, 0xbe, 0xf3, 0xcd, 0xe7, 0x3d, 0x73, 0xf6, 0xc0,
	0x2b, 0xa1, 0x90, 0x8c, 0xd3, 0x55, 0x9a, 0x34, 0xa2, 0x84, 0xae, 0xb6, 0x39, 0x0b, 0x68, 0xd8,
	0xe1, 0x54, 0xac, 0x0a, 0x49, 0xae, 0x51, 0xb9, 0x19, 0x71, 0x1a, 0xc8, 0x9d, 0x4e, 0x10, 0x50,
	0x21, 0x18, 0x17, 0xe4, 0x16, 0xa7, 0x94, 0xac, 0x87, 0x55, 0x15, 0x29, 0x19, 0x7a, 0xc6, 0xc2,
	0xab, 0x16, 0x5e, 0x1d, 0x8d, 0x59, 0x5c, 0x48, 0x93, 0xed, 0xfa, 0x71, 0x87, 0x0a, 0x4b, 0xb1,
	0xf8, 0x58, 0xbf, 0x02, 0xca, 0x39, 0xe3, 0xe9, 0x56, 0xa5, 0x7f, 0xab, 0xa5, 0xe8, 0xfc, 0x06,
	0x4d, 0x37, 0x9f, 0x18, 0xdc, 0x94, 0x7e, 0x94, 0xdc, 0x61, 0xbc, 0xe5, 0xcb, 0x88, 0x25, 0x36,
	0x68, 0xe5, 0x97, 0x19, 0x80, 0x6d, 0x9f, 0xfb, 0x6a, 0x97, 0x72, 0x81, 0x2e, 0xc3, 0x6c, 0x93,
	0x48, 0xad, 0x26, 0x61, 0x21, 0x25, 0x51, 0x88, 0x4f, 0x2c, 0x9f, 0x78, 0x7a, 0xda, 0xa9, 0x54,
	0xd3, 0x73, 0xa4, 0xca, 0xa2, 0x44, 0xd2, 0x06, 0xe5, 0x6f, 0xea, 0x95, 0x37, 0xdd, 0xd4, 0xfa,
	0x5d, 0x05, 0xd8, 0x0a, 0xd1, 0xb3, 0xb0, 0xd0, 0xcf, 0x40, 0x92, 0x4e, 0x1c, 0xe3, 0x5f, 0xcb,
	0x8a, 0x67, 0xca, 0x9b, 0xcb, 0x84, 0xba, 0xea, 0x7b, 0x74, 0x11, 0x4e, 0xde, 0xe1, 0xac, 0x45,
	0x42, 0x5f, 0x52, 0xfc, 0x90, 0xc9, 0x75, 0x76, 0x20, 0x97, 0x8c, 0xd4, 0xb9, 0xa4, 0xdf, 0x6a,
	0xdb, 0x6c, 0x53, 0x3a, 0x7e, 0x53, 0x85, 0xa3, 0xa7, 0x60, 0xf6, 0x00, 0x6b, 0xb3, 0xfc, 0x66,
	0xb3, 0xcc, 0x74, 0x43, 0x4c, 0x8a, 0x17, 0xa0, 0x2c, 0x99, 0x4d, 0x30, 0x51, 0x24, 0x41, 0x49,
	0x32, 0x43, 0x7f, 0x1e, 0x66, 0x52, 0x9c, 0x25, 0xff, 0xdd, 0x92, 0x83, 0xdd, 0x36, 0xd4, 0x6f,
	0x00, 0xae, 0xfb, 0x22, 0x0a, 0x48, 0xd0, 0x54, 0x1e, 0x06, 0xca, 0xc2, 0x48, 0x48, 0xb5, 0x4c,
	0xd8, 0x1a, 0x7e, 0x38, 0xdf, 0xb8, 0x33, 0x06, 0x7c, 0xa5, 0x0f, 0xeb, 0xb2, 0x35, 0xb4, 0x01,
	0x67, 0x8f, 0xa2, 0xb5, 0x52, 0xfe, 0xb0, 0x52, 0x16, 0x87, 0xe3, 0x8d, 0xb4, 0x3a, 0x3c, 0xbe,
	0x47, 0xa3, 0x46, 0x53, 0x92, 0x23, 0x15, 0x4e, 0x0e, 0x55, 0x18, 0xd2, 0x20, 0x6a, 0xf9, 0xb1,
	0x55, 0xb8, 0x64, 0x39, 0x36, 0x86, 0xeb, 0xbc, 0x09, 0x4f, 0xe6, 0xe4, 0xb0, 0x72, 0xff, 0xb4,
	0x72, 0x97, 0x47, 0x91, 0xe5, 0xf8, 0xe9, 0xe0, 0xd2, 0x83, 0xfa, 0xe9, 0x8c, 0xf0, 0xd3, 0xb1,
	0x02, 0xff, 0x1a, 0xe5, 0xa7, 0x53, 0xcc, 0x4f, 0x07, 0x97, 0xc7, 0xf3, 0xd3, 0xc9, 0xf7, 0x33,
	0x95, 0xfb, 0x77, 0xbe, 0x9f, 0x4e, 0x8e, 0x9f, 0x35, 0x3c, 0xf5, 0xa0, 0x7e, 0xd6, 0x46, 0xf8,
	0x59, 0xb3, 0x02, 0xff, 0x19, 0xe5, 0x67, 0xad, 0x98, 0x9f, 0x35, 0x7c, 0x72, 0x3c, 0x3f, 0x6b,
	0xf9, 0x7e, 0xa6, 0x72, 0xef, 0xe7, 0xfb, 0x69, 0x45, 0xdf, 0x86, 0x8a, 0x60, 0x1d, 0x1e, 0x50,
	0x22, 0xfd, 0x7a, 0x4c, 0x89, 0xba, 0x4d, 0x89, 0xba, 0x39, 0xa4, 0x09, 0x12, 0x18, 0xf2, 0x2d,
	0xc5, 0x16, 0x7f, 0x4b, 0xc3, 0xaf, 0x32, 0xbe, 0x73, 0x00, 0x46, 0xd7, 0x60, 0x79, 0x04, 0xb7,
	0x15, 0xfa, 0xaf, 0x15, 0xba, 0x74, 0x14, 0x89, 0x11, 0xf9, 0x3a, 0x2c, 0x84, 0x91, 0x68, 0xc7,
	0xfe, 0x5d, 0xc2, 0x92, 0xf8, 0x2e, 0x51, 0xc7, 0x88, 0x76, 0x29, 0x9e, 0x1e, 0x2a, 0xae, 0xce,
	0x58, 0x4c, 0xfd, 0xc4, 0x8a, 0x3b, 0x9d, 0xe2, 0x6e, 0x2a, 0xd8, 0xba, 0x41, 0xa1, 0x97, 0x00,
	0x0f, 0x21, 0xb3, 0x6a, 0xfe, 0xb3, 0x6a, 0x1e, 0x3d, 0x84, 0xd2, 0x32, 0x56, 0xee, 0xcd, 0xc3,
	0x94, 0x47, 0x45, 0x9b, 0x25, 0x82, 0xa2, 0xe7, 0x60, 0xd2, 0xf4, 0xad, 0xb4, 0x9d, 0x2c, 0x56,
	0xfb, 0xdb, 0xa2, 0xed, 0x69, 0xaf, 0xea, 0xbf, 0x9e, 0x0d, 0x44, 0x6f, 0xc1, 0xbc, 0xee, 0x58,
	0x24, 0xd3, 0xb2, 0x54, 0x7f, 0x98, 0x50, 0xe0, 0xea, 0x00, 0x78, 0xb0, 0xb1, 0xdd, 0x50, 0xeb,
	0xad, 0xde, 0xda, 0x9b, 0x6b, 0xf5, 0x7f, 0xa1, 0xce, 0x54, 0x4e, 0x3b, 0xa5, 0x6a, 0x08, 0x9a,
	0xf1, 0xdc, 0x21, 0x46, 0xdb, 0x47, 0x6f, 0xd8, 0xff, 0x5e, 0x37, 0x1c, 0x5d, 0x87, 0x09, 0xce,
	0xf6, 0xd4, 0xd5, 0xae, 0x51, 0x17, 0xab, 0xc7, 0xe9, 0xed, 0xd5, 0xae, 0x17, 0x55, 0x8f, 0xed,
	0x79, 0x9a, 0x66, 0xf1, 0xfe, 0x29, 0x98, 0x50, 0x0b, 0x74, 0x06, 0x4a, 0x6a, 0xa9, 0x9b, 0xed,
	0xbb, 0xae, 0xb2, 0x67, 0xd2, 0x9b, 0x54, 0x4b, 0xd5, 0x4a, 0x5f, 0x06, 0x30, 0x8d, 0x34, 0xa6,
	0xbb, 0x34, 0xc6, 0xef, 0xb9, 0xf9, 0x4f, 0xd7, 0x49, 0x1d, 0x7f, 0x5d, 0x87, 0xa3, 0x4b, 0x30,
	0xdd, 0xe6, 0x54, 0x15, 0x8b, 0x91, 0x81, 0xdf, 0x2f, 0x80, 0xce, 0x02, 0xd0, 0x8b, 0x30, 0x65,
	0xf2, 0xaa, 0x2a, 0xc1, 0xf7, 0x0a, 0x80, 0xcb, 0x26, 0xda, 0x65, 0xba, 0xb0, 0x39, 0x8d, 0x7d,
	0xf3, 0x98, 0x98, 0xc0, 0xbe, 0xe2, 0x33, 0x85, 0xfd, 0x81, 0x9b, 0x5f, 0xd9, 0x95, 0x2e, 0x89,
	0x59, 0x66, 0x6a, 0x52, 0x17, 0x76, 0x6e, 0x0e, 0x07, 0x7f, 0x38, 0x5e, 0x0e, 0x27, 0x3f, 0xc7,
	0x1a, 0xfe, 0x68, 0xbc, 0x1c, 0x6b, 0xe8, 0x35, 0x38, 0x2d, 0x99, 0xf4, 0xe3, 0x34, 0x41, 0x94,
	0x84, 0x74, 0x1f, 0x7f, 0x5c, 0x80, 0x75, 0xce, 0xc0, 0xcc, 0xe7, 0x2d, 0x0d, 0x42, 0x2e, 0x3c,
	0x32, 0xa0, 0xd6, 0x92, 0x7d, 0x52, 0x80, 0x0c, 0xf5, 0x49, 0xb4, 0x7c, 0x57, 0x61, 0xde, 0xbc,
	0xbf, 0x85, 0x54, 0x04, 0x3c, 0x6a, 0x9b, 0xf2, 0xfb, 0xd4, 0xed, 0x2f, 0xde, 0x94, 0x4b, 0x48,
	0x1e, 0x25, 0x8d, 0x54, 0x97, 0x06, 0x6d, 0xf6, 0x30, 0xe8, 0x02, 0x94, 0xd2, 0xfb, 0xe7, 0x33,
	0x37, 0xff, 0x02, 0x4a, 0x63, 0x75, 0xf6, 0xa6, 0xaf, 0xee, 0x3c, 0xba, 0x2f, 0x89, 0x88, 0xea,
	0xb1, 0xe2, 0xc7, 0x9f, 0x17, 0xc0, 0xcf, 0x2a, 0x94, 0xab, 0x40, 0x3b, 0x16, 0x83, 0xde, 0x86,
	0xa5, 0xac, 0xbf, 0x87, 0x7e, 0xc0, 0x2f, 0x0a, 0xb8, 0x83, 0x7b, 0x56, 0x0f, 0xfc, 0x7a, 0xeb,
	0x87, 0x5e, 0x96, 0xbf, 0x74, 0x8f, 0xf9, 0xb6, 0x3c, 0x5a, 0xa0, 0x83, 0xbf, 0x1a, 0x43, 0xa0,
	0x93, 0xc3, 0x5e, 0xc3, 0x5f, 0x8f, 0xc1, 0x5e, 0x43, 0x4d, 0x58, 0x69, 0xf9, 0xfb, 0x64, 0xe0,
	0xb1, 0x6b, 0x53, 0x4e, 0xb2, 0x17, 0xcf, 0x37, 0x05, 0x72, 0x9c, 0x53, 0x3c, 0x5e, 0xf6, 0x19,
	0xdc, 0xa6, 0x7c, 0x3b, 0x73, 0x17, 0x5d, 0x52, 0x6f, 0xe2, 0x59, 0x9b, 0xbf, 0x2d, 0x60, 0xb3,
	0xb9, 0x3a, 0x53, 0x97, 0x9f, 0x87, 0x72, 0x17, 0xfa, 0x5d, 0x01, 0x68, 0x29, 0xb1, 0x30, 0x0a,
	0xe7, 0x87, 0x1c, 0xd0, 0xd4, 0xd5, 0xc1, 0x31, 0xf1, 0xf7, 0x05, 0xce, 0xb7, 0x34, 0x78, 0x3e,
	0x53, 0x63, 0xe9, 0x21, 0x55, 0x3b, 0xca, 0x8c, 0x40, 0x3f, 0xe4, 0xd7, 0x58, 0x6f, 0x00, 0xba,
	0xd0, 0x9b, 0x6c, 0x7e, 0xcc, 0xc7, 0x75, 0xe7, 0x9a, 0x2b, 0xa0, 0xcb, 0x84, 0x88, 0x83, 0x16,
	0x85, 0x7f, 0x2a, 0x50, 0x5a, 0xa7, 0x14, 0xa6, 0xd7, 0xd5, 0xf4, 0x50, 0x15, 0xd2, 0x58, 0x0d,
	0x8d, 0x21, 0xfe, 0xb9, 0x00, 0xba, 0x1b, 0xbc, 0x41, 0xa0, 0x12, 0xb1, 0x81, 0xc6, 0xd9, 0x9b,
	0xa9, 0x6f, 0x5f, 0x6e, 0x30, 0x11, 0xbe, 0xd3, 0xdd, 0x0f, 0x8f, 0x3f, 0x76, 0xd7, 0x4b, 0x66,
	0xae, 0xad, 0xfd, 0x1f, 0x00, 0x00, 0xff, 0xff, 0xf4, 0x55, 0xc7, 0xad, 0xb8, 0x0f, 0x00, 0x00,
}
