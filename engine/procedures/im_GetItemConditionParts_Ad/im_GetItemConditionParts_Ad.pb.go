// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/im_GetItemConditionParts_Ad.proto
// DO NOT EDIT!

/*
Package im_GetItemConditionParts_Ad is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/im_GetItemConditionParts_Ad.proto

It has these top-level messages:
	Parameters
	Response
*/
package im_GetItemConditionParts_Ad

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "gosdk.dstore.de/values"
import dstore_engine_error "gosdk.dstore.de/engine/error"
import dstore_engine_message "gosdk.dstore.de/engine/message"
import dstore_engine_metainformation "gosdk.dstore.de/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	ConditionPartId                   *dstore_values.IntegerValue `protobuf:"bytes,1,opt,name=condition_part_id,json=conditionPartId" json:"condition_part_id,omitempty"`
	ConditionPartIdNull               bool                        `protobuf:"varint,1001,opt,name=condition_part_id_null,json=conditionPartIdNull" json:"condition_part_id_null,omitempty"`
	ConditionPartDescriptionLike      *dstore_values.StringValue  `protobuf:"bytes,2,opt,name=condition_part_description_like,json=conditionPartDescriptionLike" json:"condition_part_description_like,omitempty"`
	ConditionPartDescriptionLikeNull  bool                        `protobuf:"varint,1002,opt,name=condition_part_description_like_null,json=conditionPartDescriptionLikeNull" json:"condition_part_description_like_null,omitempty"`
	GetUnusedConditionParts           *dstore_values.BooleanValue `protobuf:"bytes,3,opt,name=get_unused_condition_parts,json=getUnusedConditionParts" json:"get_unused_condition_parts,omitempty"`
	GetUnusedConditionPartsNull       bool                        `protobuf:"varint,1003,opt,name=get_unused_condition_parts_null,json=getUnusedConditionPartsNull" json:"get_unused_condition_parts_null,omitempty"`
	OrderBy                           *dstore_values.IntegerValue `protobuf:"bytes,4,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	OrderByNull                       bool                        `protobuf:"varint,1004,opt,name=order_by_null,json=orderByNull" json:"order_by_null,omitempty"`
	RowCount                          *dstore_values.IntegerValue `protobuf:"bytes,5,opt,name=row_count,json=rowCount" json:"row_count,omitempty"`
	RowCountNull                      bool                        `protobuf:"varint,1005,opt,name=row_count_null,json=rowCountNull" json:"row_count_null,omitempty"`
	OnlyCondPartsWithNodeCharacId     *dstore_values.IntegerValue `protobuf:"bytes,6,opt,name=only_cond_parts_with_node_charac_id,json=onlyCondPartsWithNodeCharacId" json:"only_cond_parts_with_node_charac_id,omitempty"`
	OnlyCondPartsWithNodeCharacIdNull bool                        `protobuf:"varint,1006,opt,name=only_cond_parts_with_node_charac_id_null,json=onlyCondPartsWithNodeCharacIdNull" json:"only_cond_parts_with_node_charac_id_null,omitempty"`
	OnlyCondPartsWithDomTNodeId1      *dstore_values.IntegerValue `protobuf:"bytes,7,opt,name=only_cond_parts_with_dom_t_node_id1,json=onlyCondPartsWithDomTNodeId1" json:"only_cond_parts_with_dom_t_node_id1,omitempty"`
	OnlyCondPartsWithDomTNodeId1Null  bool                        `protobuf:"varint,1007,opt,name=only_cond_parts_with_dom_t_node_id1_null,json=onlyCondPartsWithDomTNodeId1Null" json:"only_cond_parts_with_dom_t_node_id1_null,omitempty"`
	OnlyCondPartsWithDomTNodeId2      *dstore_values.IntegerValue `protobuf:"bytes,8,opt,name=only_cond_parts_with_dom_t_node_id2,json=onlyCondPartsWithDomTNodeId2" json:"only_cond_parts_with_dom_t_node_id2,omitempty"`
	OnlyCondPartsWithDomTNodeId2Null  bool                        `protobuf:"varint,1008,opt,name=only_cond_parts_with_dom_t_node_id2_null,json=onlyCondPartsWithDomTNodeId2Null" json:"only_cond_parts_with_dom_t_node_id2_null,omitempty"`
	OnlyCondPartsWithDomTNodeId3      *dstore_values.IntegerValue `protobuf:"bytes,9,opt,name=only_cond_parts_with_dom_t_node_id3,json=onlyCondPartsWithDomTNodeId3" json:"only_cond_parts_with_dom_t_node_id3,omitempty"`
	OnlyCondPartsWithDomTNodeId3Null  bool                        `protobuf:"varint,1009,opt,name=only_cond_parts_with_dom_t_node_id3_null,json=onlyCondPartsWithDomTNodeId3Null" json:"only_cond_parts_with_dom_t_node_id3_null,omitempty"`
	OutputIntoOneId                   *dstore_values.IntegerValue `protobuf:"bytes,10,opt,name=output_into_one_id,json=outputIntoOneId" json:"output_into_one_id,omitempty"`
	OutputIntoOneIdNull               bool                        `protobuf:"varint,1010,opt,name=output_into_one_id_null,json=outputIntoOneIdNull" json:"output_into_one_id_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetConditionPartId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ConditionPartId
	}
	return nil
}

func (m *Parameters) GetConditionPartDescriptionLike() *dstore_values.StringValue {
	if m != nil {
		return m.ConditionPartDescriptionLike
	}
	return nil
}

func (m *Parameters) GetGetUnusedConditionParts() *dstore_values.BooleanValue {
	if m != nil {
		return m.GetUnusedConditionParts
	}
	return nil
}

func (m *Parameters) GetOrderBy() *dstore_values.IntegerValue {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *Parameters) GetRowCount() *dstore_values.IntegerValue {
	if m != nil {
		return m.RowCount
	}
	return nil
}

func (m *Parameters) GetOnlyCondPartsWithNodeCharacId() *dstore_values.IntegerValue {
	if m != nil {
		return m.OnlyCondPartsWithNodeCharacId
	}
	return nil
}

func (m *Parameters) GetOnlyCondPartsWithDomTNodeId1() *dstore_values.IntegerValue {
	if m != nil {
		return m.OnlyCondPartsWithDomTNodeId1
	}
	return nil
}

func (m *Parameters) GetOnlyCondPartsWithDomTNodeId2() *dstore_values.IntegerValue {
	if m != nil {
		return m.OnlyCondPartsWithDomTNodeId2
	}
	return nil
}

func (m *Parameters) GetOnlyCondPartsWithDomTNodeId3() *dstore_values.IntegerValue {
	if m != nil {
		return m.OnlyCondPartsWithDomTNodeId3
	}
	return nil
}

func (m *Parameters) GetOutputIntoOneId() *dstore_values.IntegerValue {
	if m != nil {
		return m.OutputIntoOneId
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId                       int32                         `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	UsedInAnItemConditionGroup  *dstore_values.BooleanValue   `protobuf:"bytes,10001,opt,name=used_in_an_item_condition_group,json=usedInAnItemConditionGroup" json:"used_in_an_item_condition_group,omitempty"`
	UsedInCampaignItemCondParts *dstore_values.BooleanValue   `protobuf:"bytes,10002,opt,name=used_in_campaign_item_cond_parts,json=usedInCampaignItemCondParts" json:"used_in_campaign_item_cond_parts,omitempty"`
	ConditionPartId             *dstore_values.IntegerValue   `protobuf:"bytes,10003,opt,name=condition_part_id,json=conditionPartId" json:"condition_part_id,omitempty"`
	EditedAtDateAndTime         *dstore_values.TimestampValue `protobuf:"bytes,10004,opt,name=edited_at_date_and_time,json=editedAtDateAndTime" json:"edited_at_date_and_time,omitempty"`
	CreatedAtDateAndTime        *dstore_values.TimestampValue `protobuf:"bytes,10005,opt,name=created_at_date_and_time,json=createdAtDateAndTime" json:"created_at_date_and_time,omitempty"`
	ConditionPartDescription    *dstore_values.StringValue    `protobuf:"bytes,10006,opt,name=condition_part_description,json=conditionPartDescription" json:"condition_part_description,omitempty"`
	Operator1                   *dstore_values.StringValue    `protobuf:"bytes,30001,opt,name=operator1" json:"operator1,omitempty"`
	Condition1                  *dstore_values.StringValue    `protobuf:"bytes,30002,opt,name=condition1" json:"condition1,omitempty"`
	Condition2                  *dstore_values.StringValue    `protobuf:"bytes,30003,opt,name=condition2" json:"condition2,omitempty"`
	Operator2                   *dstore_values.StringValue    `protobuf:"bytes,30004,opt,name=operator2" json:"operator2,omitempty"`
	RecursiveEvaluation         *dstore_values.IntegerValue   `protobuf:"bytes,30006,opt,name=recursive_evaluation,json=recursiveEvaluation" json:"recursive_evaluation,omitempty"`
	DomainTreeNodeIds           *dstore_values.StringValue    `protobuf:"bytes,30007,opt,name=domain_tree_node_ids,json=domainTreeNodeIds" json:"domain_tree_node_ids,omitempty"`
	NodeCharacteristicId        *dstore_values.IntegerValue   `protobuf:"bytes,30008,opt,name=node_characteristic_id,json=nodeCharacteristicId" json:"node_characteristic_id,omitempty"`
	LevelIds                    *dstore_values.StringValue    `protobuf:"bytes,30011,opt,name=level_ids,json=levelIds" json:"level_ids,omitempty"`
	InheritDepth                *dstore_values.IntegerValue   `protobuf:"bytes,30014,opt,name=inherit_depth,json=inheritDepth" json:"inherit_depth,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetUsedInAnItemConditionGroup() *dstore_values.BooleanValue {
	if m != nil {
		return m.UsedInAnItemConditionGroup
	}
	return nil
}

func (m *Response_Row) GetUsedInCampaignItemCondParts() *dstore_values.BooleanValue {
	if m != nil {
		return m.UsedInCampaignItemCondParts
	}
	return nil
}

func (m *Response_Row) GetConditionPartId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ConditionPartId
	}
	return nil
}

func (m *Response_Row) GetEditedAtDateAndTime() *dstore_values.TimestampValue {
	if m != nil {
		return m.EditedAtDateAndTime
	}
	return nil
}

func (m *Response_Row) GetCreatedAtDateAndTime() *dstore_values.TimestampValue {
	if m != nil {
		return m.CreatedAtDateAndTime
	}
	return nil
}

func (m *Response_Row) GetConditionPartDescription() *dstore_values.StringValue {
	if m != nil {
		return m.ConditionPartDescription
	}
	return nil
}

func (m *Response_Row) GetOperator1() *dstore_values.StringValue {
	if m != nil {
		return m.Operator1
	}
	return nil
}

func (m *Response_Row) GetCondition1() *dstore_values.StringValue {
	if m != nil {
		return m.Condition1
	}
	return nil
}

func (m *Response_Row) GetCondition2() *dstore_values.StringValue {
	if m != nil {
		return m.Condition2
	}
	return nil
}

func (m *Response_Row) GetOperator2() *dstore_values.StringValue {
	if m != nil {
		return m.Operator2
	}
	return nil
}

func (m *Response_Row) GetRecursiveEvaluation() *dstore_values.IntegerValue {
	if m != nil {
		return m.RecursiveEvaluation
	}
	return nil
}

func (m *Response_Row) GetDomainTreeNodeIds() *dstore_values.StringValue {
	if m != nil {
		return m.DomainTreeNodeIds
	}
	return nil
}

func (m *Response_Row) GetNodeCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeCharacteristicId
	}
	return nil
}

func (m *Response_Row) GetLevelIds() *dstore_values.StringValue {
	if m != nil {
		return m.LevelIds
	}
	return nil
}

func (m *Response_Row) GetInheritDepth() *dstore_values.IntegerValue {
	if m != nil {
		return m.InheritDepth
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.im_GetItemConditionParts_Ad.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.im_GetItemConditionParts_Ad.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.im_GetItemConditionParts_Ad.Response.Row")
}

func init() {
	proto.RegisterFile("dstore/engine/procedures/im_GetItemConditionParts_Ad.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 1058 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x97, 0xeb, 0x6e, 0x1b, 0x45,
	0x14, 0xc7, 0x15, 0x42, 0x12, 0x7b, 0x92, 0x52, 0x3a, 0x89, 0x92, 0xc1, 0x6e, 0x69, 0x68, 0x40,
	0x2a, 0x5f, 0x1c, 0x62, 0x73, 0xad, 0xe0, 0x43, 0x6e, 0x4a, 0x2d, 0x11, 0xb7, 0x32, 0xa6, 0x50,
	0x84, 0xb4, 0xda, 0xec, 0x4e, 0x9d, 0x51, 0xed, 0x19, 0x6b, 0x66, 0x36, 0x51, 0xde, 0x82, 0x5b,
	0xf9, 0xce, 0x23, 0x70, 0x11, 0x20, 0x21, 0x21, 0x5e, 0x87, 0x70, 0xe7, 0x09, 0x38, 0x33, 0xb3,
	0xeb, 0x78, 0x37, 0x71, 0x76, 0x43, 0xbe, 0x24, 0x9a, 0x3d, 0xe7, 0xff, 0x3f, 0xbf, 0x1d, 0x8f,
	0xce, 0x99, 0x45, 0x77, 0x42, 0xa5, 0x85, 0xa4, 0xab, 0x94, 0x77, 0x19, 0xa7, 0xab, 0x03, 0x29,
	0x02, 0x1a, 0x46, 0x92, 0xaa, 0x55, 0xd6, 0xf7, 0x76, 0xa8, 0x6e, 0x6a, 0xda, 0xdf, 0x14, 0x3c,
	0x64, 0x9a, 0x09, 0x7e, 0xdf, 0x97, 0x5a, 0x79, 0xeb, 0x61, 0x0d, 0xd2, 0xb4, 0xc0, 0x2f, 0x3b,
	0x6d, 0xcd, 0x69, 0x6b, 0xe7, 0x08, 0x2a, 0xf3, 0x71, 0x99, 0x03, 0xbf, 0x17, 0x51, 0xe5, 0xf4,
	0x95, 0xe7, 0xd2, 0xb5, 0xa9, 0x94, 0x42, 0xc6, 0xa1, 0x6a, 0x3a, 0xd4, 0xa7, 0x4a, 0xf9, 0x5d,
	0x1a, 0x07, 0x57, 0xb2, 0x41, 0xed, 0x33, 0xfe, 0x48, 0xc8, 0xbe, 0x6f, 0x6a, 0xba, 0xa4, 0x5b,
	0x4f, 0xe6, 0x10, 0x82, 0xf2, 0x3e, 0x44, 0xa9, 0x54, 0x78, 0x07, 0x5d, 0x0b, 0x12, 0x2a, 0x6f,
	0x00, 0x58, 0x1e, 0x0b, 0xc9, 0xc4, 0xf2, 0xc4, 0xed, 0xd9, 0x7a, 0xb5, 0x16, 0xbf, 0x47, 0x0c,
	0xc7, 0xb8, 0xa6, 0x5d, 0x2a, 0x1f, 0x98, 0x55, 0xfb, 0x6a, 0x30, 0xfa, 0x2e, 0xcd, 0x10, 0xbf,
	0x8a, 0x16, 0x4f, 0x19, 0x79, 0x3c, 0xea, 0xf5, 0xc8, 0xaf, 0x33, 0x60, 0x57, 0x6a, 0xcf, 0x67,
	0x14, 0x2d, 0x88, 0x61, 0x1f, 0xdd, 0xcc, 0xa8, 0x42, 0xaa, 0x02, 0xc9, 0x06, 0xf6, 0x41, 0x8f,
	0x3d, 0xa6, 0xe4, 0x29, 0x0b, 0x53, 0xc9, 0xc0, 0x28, 0x2d, 0x19, 0xef, 0x3a, 0x96, 0xeb, 0x29,
	0xe7, 0xad, 0x13, 0x83, 0x77, 0x41, 0x8f, 0xef, 0xa1, 0x17, 0x73, 0x4a, 0x38, 0xcc, 0x63, 0x87,
	0xb9, 0x7c, 0x9e, 0x99, 0x65, 0xfe, 0x10, 0x55, 0xba, 0x54, 0x7b, 0x11, 0x8f, 0x14, 0x0d, 0xbd,
	0xb4, 0xb7, 0x22, 0x93, 0x67, 0xee, 0xdd, 0x9e, 0x10, 0x3d, 0xea, 0x73, 0xc7, 0xbb, 0x04, 0xf2,
	0xf7, 0xad, 0x3a, 0x7d, 0x20, 0xf0, 0x36, 0xba, 0x39, 0xde, 0xd9, 0x51, 0xfe, 0xe6, 0x28, 0xab,
	0x63, 0x2c, 0x2c, 0xe0, 0xeb, 0xa8, 0x24, 0x64, 0x48, 0xa5, 0xb7, 0x77, 0x44, 0x9e, 0xce, 0xff,
	0x29, 0x67, 0x6c, 0xf2, 0xc6, 0x11, 0x5e, 0x41, 0x57, 0x12, 0x9d, 0x2b, 0xf6, 0xbb, 0x2b, 0x36,
	0x1b, 0x27, 0x58, 0xf3, 0x37, 0x51, 0x59, 0x8a, 0x43, 0x80, 0x8b, 0xb8, 0x26, 0x53, 0xf9, 0xee,
	0x25, 0xc8, 0xde, 0x34, 0xc9, 0xf8, 0x25, 0xf4, 0xcc, 0x50, 0xe9, 0xfc, 0xff, 0x70, 0xfe, 0x73,
	0x49, 0x8a, 0x2d, 0xd0, 0x45, 0x2b, 0x82, 0xf7, 0x8e, 0xec, 0xeb, 0xc7, 0x6f, 0x7e, 0xc8, 0xf4,
	0xbe, 0xc7, 0x45, 0x48, 0xbd, 0x60, 0x1f, 0x8e, 0x6e, 0x60, 0xce, 0xe8, 0x74, 0x7e, 0xe9, 0x1b,
	0xc6, 0xc7, 0xec, 0x8f, 0xdd, 0x9a, 0x0f, 0xc0, 0xa4, 0x05, 0x1e, 0x9b, 0xd6, 0x02, 0x4e, 0x6c,
	0x07, 0xdd, 0x2e, 0x50, 0xc8, 0x91, 0xfe, 0xe9, 0x48, 0x5f, 0x38, 0xd7, 0xd1, 0xe2, 0x3f, 0x1a,
	0x83, 0x1f, 0x8a, 0xbe, 0xa7, 0x9d, 0x37, 0x0b, 0xd7, 0xc8, 0x4c, 0x3e, 0xfe, 0xf5, 0x53, 0xc5,
	0xb6, 0x44, 0xbf, 0x63, 0x0a, 0x36, 0xc3, 0x35, 0xfc, 0xde, 0x18, 0xfa, 0x74, 0x1d, 0x47, 0xff,
	0x57, 0x7c, 0xb4, 0xcf, 0x33, 0x2c, 0x0e, 0x5f, 0x27, 0xa5, 0xcb, 0xc1, 0xd7, 0x8b, 0xc1, 0xd7,
	0x1d, 0xfc, 0xdf, 0xf9, 0xf0, 0xf5, 0xe2, 0xf0, 0x0d, 0x52, 0xbe, 0x1c, 0x7c, 0xa3, 0x18, 0x7c,
	0xc3, 0xc1, 0xff, 0x93, 0x0f, 0xdf, 0xb0, 0xf0, 0x77, 0x11, 0x16, 0x91, 0x1e, 0x44, 0xd0, 0x36,
	0xb9, 0x16, 0x9e, 0xe0, 0xc6, 0x84, 0xa0, 0x02, 0x8d, 0xd8, 0xc9, 0x9a, 0xa0, 0xba, 0xc7, 0xc1,
	0x0e, 0xbf, 0x86, 0x96, 0x4e, 0x3b, 0x39, 0x9a, 0x7f, 0xe3, 0x4e, 0x9c, 0x91, 0x18, 0x80, 0x5b,
	0xbf, 0xcc, 0xa2, 0x52, 0x9b, 0xaa, 0x81, 0xe0, 0x8a, 0xe2, 0x57, 0xd0, 0x94, 0x9d, 0x3a, 0xf1,
	0x24, 0x18, 0x36, 0xdf, 0x78, 0xa2, 0xb9, 0x89, 0xb4, 0x6d, 0xfe, 0xb6, 0x5d, 0x22, 0x7e, 0x88,
	0x9e, 0x35, 0xf3, 0xc6, 0x1b, 0x19, 0x38, 0xd0, 0xb9, 0x27, 0x41, 0x5c, 0xcb, 0x88, 0xb3, 0x63,
	0x69, 0x17, 0xd6, 0xcd, 0x93, 0x75, 0xfb, 0x6a, 0x3f, 0xfd, 0x00, 0x3a, 0xce, 0x4c, 0x3c, 0xe7,
	0xa0, 0xb9, 0x1a, 0xc7, 0xe7, 0x4f, 0x39, 0xba, 0x29, 0xb8, 0xeb, 0xfe, 0xb7, 0x93, 0x74, 0xdc,
	0x44, 0x93, 0xd0, 0x5a, 0xa0, 0x07, 0x1a, 0xd5, 0x1b, 0xb5, 0xc2, 0x63, 0xb9, 0x96, 0x6c, 0x44,
	0xad, 0x2d, 0x0e, 0xdb, 0xc6, 0xa3, 0xf2, 0x55, 0x19, 0x4d, 0xc2, 0x02, 0x2f, 0xa2, 0x69, 0xd3,
	0xc4, 0xe0, 0xb7, 0xf9, 0xa4, 0x05, 0x7b, 0x33, 0xd5, 0x9e, 0x82, 0x25, 0xec, 0x3a, 0x0c, 0x32,
	0xdb, 0xb4, 0x19, 0xf7, 0x7c, 0xee, 0x31, 0x70, 0x1d, 0xe9, 0xdf, 0x5d, 0x29, 0xa2, 0x01, 0xf9,
	0xb4, 0x95, 0x3f, 0x1a, 0x2a, 0xc6, 0xa4, 0xc9, 0xd7, 0x79, 0x8a, 0x6b, 0xc7, 0xe8, 0x71, 0x80,
	0x96, 0x93, 0x12, 0x81, 0xdf, 0x1f, 0xf8, 0xac, 0x3b, 0x52, 0x28, 0x9e, 0x3e, 0x9f, 0x15, 0xa8,
	0x51, 0x75, 0x35, 0x36, 0x63, 0x8f, 0xa4, 0x92, 0x1b, 0x41, 0x77, 0xcf, 0xba, 0x0f, 0x7c, 0xde,
	0xfa, 0x1f, 0x17, 0x82, 0x0e, 0x5a, 0xa2, 0xf0, 0x00, 0x80, 0x7d, 0x18, 0xb9, 0xbe, 0xa6, 0xb0,
	0x31, 0xa1, 0xa7, 0x59, 0x9f, 0x92, 0x2f, 0x9c, 0xdf, 0x8d, 0x8c, 0x9f, 0x89, 0x29, 0x0d, 0x58,
	0xce, 0x71, 0xde, 0xc9, 0xd7, 0xf5, 0x16, 0x88, 0xd7, 0x79, 0xd8, 0x81, 0x30, 0x7e, 0x80, 0x48,
	0x20, 0xa9, 0x7f, 0xa6, 0xed, 0x93, 0x42, 0xb6, 0x0b, 0xb1, 0x3e, 0xed, 0xfb, 0x10, 0x55, 0xc6,
	0xdf, 0x12, 0xc8, 0x97, 0xad, 0xdc, 0x4b, 0x08, 0x19, 0x77, 0x6f, 0xc0, 0x77, 0x50, 0x59, 0x0c,
	0xa8, 0xf4, 0x41, 0xb9, 0x46, 0xbe, 0x3e, 0x9e, 0xc8, 0xb5, 0x3a, 0x49, 0xc7, 0x6f, 0x23, 0x34,
	0xf4, 0x5d, 0x23, 0xdf, 0x14, 0x10, 0x8f, 0xe4, 0xa7, 0xd4, 0x75, 0xf2, 0xed, 0x85, 0xd4, 0xf5,
	0x51, 0xee, 0x3a, 0xf9, 0xee, 0x22, 0xdc, 0x75, 0x7c, 0x1f, 0x2d, 0x48, 0x1a, 0x44, 0x52, 0xb1,
	0x03, 0xea, 0x51, 0x93, 0xeb, 0x5a, 0xc2, 0xf7, 0xc7, 0x05, 0xee, 0x96, 0xf3, 0x43, 0xe9, 0xf6,
	0x50, 0x89, 0x77, 0xd1, 0x02, 0x34, 0x58, 0xe8, 0x1c, 0x9e, 0x96, 0x94, 0x26, 0x6d, 0x56, 0x91,
	0x1f, 0x0a, 0x80, 0x5d, 0x73, 0xca, 0x0e, 0x08, 0x5d, 0xcf, 0x55, 0xd0, 0xc4, 0x17, 0x47, 0xe6,
	0x3c, 0x5c, 0x85, 0x99, 0xd2, 0xcc, 0x5e, 0x2c, 0x7e, 0x2c, 0x82, 0xb8, 0xc0, 0x87, 0x73, 0x3f,
	0xd1, 0xc2, 0x91, 0x7f, 0x0b, 0x95, 0x7b, 0xf4, 0x80, 0xf6, 0x2c, 0xd8, 0x4f, 0x05, 0xc0, 0x4a,
	0x36, 0xdd, 0xf0, 0x6c, 0xa0, 0x2b, 0x8c, 0xef, 0x83, 0x95, 0x39, 0x78, 0x03, 0xbd, 0x4f, 0x7e,
	0x2e, 0x82, 0x31, 0x17, 0x6b, 0xb6, 0x8c, 0x64, 0xe3, 0x63, 0x54, 0x65, 0x22, 0xd3, 0xe5, 0x4e,
	0x3e, 0x5c, 0x3e, 0x7a, 0xa7, 0x2b, 0x54, 0xf8, 0x38, 0x89, 0x87, 0x17, 0xfc, 0xb6, 0xd9, 0x9b,
	0xb6, 0xdf, 0x0f, 0x8d, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x6d, 0x2f, 0x08, 0x27, 0x1a, 0x0d,
	0x00, 0x00,
}
