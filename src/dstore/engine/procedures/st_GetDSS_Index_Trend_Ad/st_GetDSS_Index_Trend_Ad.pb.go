// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/st_GetDSS_Index_Trend_Ad.proto
// DO NOT EDIT!

/*
Package st_GetDSS_Index_Trend_Ad is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/st_GetDSS_Index_Trend_Ad.proto

It has these top-level messages:
	Parameters
	Response
*/
package st_GetDSS_Index_Trend_Ad

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "dstore/values"
import dstore_engine_error "dstore/engine/error"
import dstore_engine_message "dstore/engine/message"
import dstore_engine_metainformation "dstore/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	DomainTreeNodeId                  *dstore_values.IntegerValue `protobuf:"bytes,1,opt,name=domain_tree_node_id,json=domainTreeNodeId" json:"domain_tree_node_id,omitempty"`
	DomainTreeNodeIdNull              bool                        `protobuf:"varint,1001,opt,name=domain_tree_node_id_null,json=domainTreeNodeIdNull" json:"domain_tree_node_id_null,omitempty"`
	Intervalls                        *dstore_values.IntegerValue `protobuf:"bytes,2,opt,name=intervalls" json:"intervalls,omitempty"`
	IntervallsNull                    bool                        `protobuf:"varint,1002,opt,name=intervalls_null,json=intervallsNull" json:"intervalls_null,omitempty"`
	MinutesPerIntervall               *dstore_values.IntegerValue `protobuf:"bytes,3,opt,name=minutes_per_intervall,json=minutesPerIntervall" json:"minutes_per_intervall,omitempty"`
	MinutesPerIntervallNull           bool                        `protobuf:"varint,1003,opt,name=minutes_per_intervall_null,json=minutesPerIntervallNull" json:"minutes_per_intervall_null,omitempty"`
	GroupByNodesOnLevel               *dstore_values.IntegerValue `protobuf:"bytes,4,opt,name=group_by_nodes_on_level,json=groupByNodesOnLevel" json:"group_by_nodes_on_level,omitempty"`
	GroupByNodesOnLevelNull           bool                        `protobuf:"varint,1004,opt,name=group_by_nodes_on_level_null,json=groupByNodesOnLevelNull" json:"group_by_nodes_on_level_null,omitempty"`
	IsLevelId                         *dstore_values.BooleanValue `protobuf:"bytes,5,opt,name=is_level_id,json=isLevelId" json:"is_level_id,omitempty"`
	IsLevelIdNull                     bool                        `protobuf:"varint,1005,opt,name=is_level_id_null,json=isLevelIdNull" json:"is_level_id_null,omitempty"`
	GroupByNodeCharacteristicId       *dstore_values.IntegerValue `protobuf:"bytes,6,opt,name=group_by_node_characteristic_id,json=groupByNodeCharacteristicId" json:"group_by_node_characteristic_id,omitempty"`
	GroupByNodeCharacteristicIdNull   bool                        `protobuf:"varint,1006,opt,name=group_by_node_characteristic_id_null,json=groupByNodeCharacteristicIdNull" json:"group_by_node_characteristic_id_null,omitempty"`
	OnlyValuesInOneId                 *dstore_values.BooleanValue `protobuf:"bytes,7,opt,name=only_values_in_one_id,json=onlyValuesInOneId" json:"only_values_in_one_id,omitempty"`
	OnlyValuesInOneIdNull             bool                        `protobuf:"varint,1007,opt,name=only_values_in_one_id_null,json=onlyValuesInOneIdNull" json:"only_values_in_one_id_null,omitempty"`
	IdsInOneIdAreTreeNodeIds          *dstore_values.BooleanValue `protobuf:"bytes,8,opt,name=ids_in_one_id_are_tree_node_ids,json=idsInOneIdAreTreeNodeIds" json:"ids_in_one_id_are_tree_node_ids,omitempty"`
	IdsInOneIdAreTreeNodeIdsNull      bool                        `protobuf:"varint,1008,opt,name=ids_in_one_id_are_tree_node_ids_null,json=idsInOneIdAreTreeNodeIdsNull" json:"ids_in_one_id_are_tree_node_ids_null,omitempty"`
	WeightViews                       *dstore_values.DecimalValue `protobuf:"bytes,9,opt,name=weight_views,json=weightViews" json:"weight_views,omitempty"`
	WeightViewsNull                   bool                        `protobuf:"varint,1009,opt,name=weight_views_null,json=weightViewsNull" json:"weight_views_null,omitempty"`
	WeightBuyingInterest              *dstore_values.DecimalValue `protobuf:"bytes,10,opt,name=weight_buying_interest,json=weightBuyingInterest" json:"weight_buying_interest,omitempty"`
	WeightBuyingInterestNull          bool                        `protobuf:"varint,1010,opt,name=weight_buying_interest_null,json=weightBuyingInterestNull" json:"weight_buying_interest_null,omitempty"`
	WeightOrder                       *dstore_values.DecimalValue `protobuf:"bytes,11,opt,name=weight_order,json=weightOrder" json:"weight_order,omitempty"`
	WeightOrderNull                   bool                        `protobuf:"varint,1011,opt,name=weight_order_null,json=weightOrderNull" json:"weight_order_null,omitempty"`
	IncludeDeactivatedNodes           *dstore_values.BooleanValue `protobuf:"bytes,12,opt,name=include_deactivated_nodes,json=includeDeactivatedNodes" json:"include_deactivated_nodes,omitempty"`
	IncludeDeactivatedNodesNull       bool                        `protobuf:"varint,1012,opt,name=include_deactivated_nodes_null,json=includeDeactivatedNodesNull" json:"include_deactivated_nodes_null,omitempty"`
	IncludeNodesWithoutTreeNodeId     *dstore_values.BooleanValue `protobuf:"bytes,13,opt,name=include_nodes_without_tree_node_id,json=includeNodesWithoutTreeNodeId" json:"include_nodes_without_tree_node_id,omitempty"`
	IncludeNodesWithoutTreeNodeIdNull bool                        `protobuf:"varint,1013,opt,name=include_nodes_without_tree_node_id_null,json=includeNodesWithoutTreeNodeIdNull" json:"include_nodes_without_tree_node_id_null,omitempty"`
	OrderResultByIntervall            *dstore_values.IntegerValue `protobuf:"bytes,14,opt,name=order_result_by_intervall,json=orderResultByIntervall" json:"order_result_by_intervall,omitempty"`
	OrderResultByIntervallNull        bool                        `protobuf:"varint,1014,opt,name=order_result_by_intervall_null,json=orderResultByIntervallNull" json:"order_result_by_intervall_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetDomainTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.DomainTreeNodeId
	}
	return nil
}

func (m *Parameters) GetIntervalls() *dstore_values.IntegerValue {
	if m != nil {
		return m.Intervalls
	}
	return nil
}

func (m *Parameters) GetMinutesPerIntervall() *dstore_values.IntegerValue {
	if m != nil {
		return m.MinutesPerIntervall
	}
	return nil
}

func (m *Parameters) GetGroupByNodesOnLevel() *dstore_values.IntegerValue {
	if m != nil {
		return m.GroupByNodesOnLevel
	}
	return nil
}

func (m *Parameters) GetIsLevelId() *dstore_values.BooleanValue {
	if m != nil {
		return m.IsLevelId
	}
	return nil
}

func (m *Parameters) GetGroupByNodeCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.GroupByNodeCharacteristicId
	}
	return nil
}

func (m *Parameters) GetOnlyValuesInOneId() *dstore_values.BooleanValue {
	if m != nil {
		return m.OnlyValuesInOneId
	}
	return nil
}

func (m *Parameters) GetIdsInOneIdAreTreeNodeIds() *dstore_values.BooleanValue {
	if m != nil {
		return m.IdsInOneIdAreTreeNodeIds
	}
	return nil
}

func (m *Parameters) GetWeightViews() *dstore_values.DecimalValue {
	if m != nil {
		return m.WeightViews
	}
	return nil
}

func (m *Parameters) GetWeightBuyingInterest() *dstore_values.DecimalValue {
	if m != nil {
		return m.WeightBuyingInterest
	}
	return nil
}

func (m *Parameters) GetWeightOrder() *dstore_values.DecimalValue {
	if m != nil {
		return m.WeightOrder
	}
	return nil
}

func (m *Parameters) GetIncludeDeactivatedNodes() *dstore_values.BooleanValue {
	if m != nil {
		return m.IncludeDeactivatedNodes
	}
	return nil
}

func (m *Parameters) GetIncludeNodesWithoutTreeNodeId() *dstore_values.BooleanValue {
	if m != nil {
		return m.IncludeNodesWithoutTreeNodeId
	}
	return nil
}

func (m *Parameters) GetOrderResultByIntervall() *dstore_values.IntegerValue {
	if m != nil {
		return m.OrderResultByIntervall
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId              int32                         `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	IntervallStart     *dstore_values.TimestampValue `protobuf:"bytes,10001,opt,name=intervall_start,json=intervallStart" json:"intervall_start,omitempty"`
	Orders             *dstore_values.DecimalValue   `protobuf:"bytes,10002,opt,name=orders" json:"orders,omitempty"`
	VBOIndex           *dstore_values.DecimalValue   `protobuf:"bytes,10003,opt,name=v_b_o_index,json=vBOIndex" json:"v_b_o_index,omitempty"`
	TrendOfId          *dstore_values.IntegerValue   `protobuf:"bytes,10004,opt,name=trend_of_id,json=trendOfId" json:"trend_of_id,omitempty"`
	Views              *dstore_values.DecimalValue   `protobuf:"bytes,10005,opt,name=views" json:"views,omitempty"`
	TrendOfDescription *dstore_values.StringValue    `protobuf:"bytes,10006,opt,name=trend_of_description,json=trendOfDescription" json:"trend_of_description,omitempty"`
	Intervall          *dstore_values.IntegerValue   `protobuf:"bytes,10007,opt,name=intervall" json:"intervall,omitempty"`
	BuyingInterests    *dstore_values.DecimalValue   `protobuf:"bytes,10008,opt,name=buying_interests,json=buyingInterests" json:"buying_interests,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetIntervallStart() *dstore_values.TimestampValue {
	if m != nil {
		return m.IntervallStart
	}
	return nil
}

func (m *Response_Row) GetOrders() *dstore_values.DecimalValue {
	if m != nil {
		return m.Orders
	}
	return nil
}

func (m *Response_Row) GetVBOIndex() *dstore_values.DecimalValue {
	if m != nil {
		return m.VBOIndex
	}
	return nil
}

func (m *Response_Row) GetTrendOfId() *dstore_values.IntegerValue {
	if m != nil {
		return m.TrendOfId
	}
	return nil
}

func (m *Response_Row) GetViews() *dstore_values.DecimalValue {
	if m != nil {
		return m.Views
	}
	return nil
}

func (m *Response_Row) GetTrendOfDescription() *dstore_values.StringValue {
	if m != nil {
		return m.TrendOfDescription
	}
	return nil
}

func (m *Response_Row) GetIntervall() *dstore_values.IntegerValue {
	if m != nil {
		return m.Intervall
	}
	return nil
}

func (m *Response_Row) GetBuyingInterests() *dstore_values.DecimalValue {
	if m != nil {
		return m.BuyingInterests
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.st_GetDSS_Index_Trend_Ad.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.st_GetDSS_Index_Trend_Ad.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.st_GetDSS_Index_Trend_Ad.Response.Row")
}

var fileDescriptor0 = []byte{
	// 1072 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x57, 0xeb, 0x6e, 0x1b, 0x45,
	0x14, 0x56, 0x49, 0x73, 0x9b, 0xb4, 0x4d, 0xba, 0xb9, 0x6d, 0xec, 0x36, 0x81, 0x50, 0x41, 0x24,
	0x24, 0x07, 0x4a, 0xa5, 0x22, 0x40, 0x95, 0xea, 0x06, 0x2a, 0x03, 0xb1, 0x83, 0x83, 0x52, 0xc1,
	0x0f, 0x46, 0x6b, 0xef, 0xc4, 0x19, 0x69, 0xbd, 0x63, 0xcd, 0x8c, 0x6d, 0xfc, 0x16, 0xdc, 0xe1,
	0x1f, 0x0f, 0xc2, 0x5b, 0xf0, 0x16, 0xdc, 0xef, 0xfc, 0xe6, 0xcc, 0x9c, 0x49, 0x76, 0xd7, 0x5d,
	0x77, 0xdd, 0x3f, 0x49, 0x66, 0xe7, 0x7c, 0x97, 0x33, 0xb7, 0x73, 0x42, 0xee, 0x86, 0x4a, 0x0b,
	0xc9, 0xf6, 0x59, 0xdc, 0xe1, 0x31, 0xdb, 0xef, 0x49, 0xd1, 0x66, 0x61, 0x5f, 0x32, 0xb5, 0xaf,
	0x34, 0x7d, 0xc8, 0xf4, 0xc1, 0xf1, 0x31, 0xad, 0xc5, 0x21, 0xfb, 0x84, 0x7e, 0x20, 0x59, 0x1c,
	0xd2, 0xfb, 0x61, 0x05, 0x62, 0xb4, 0xf0, 0x5e, 0x40, 0x60, 0x05, 0x81, 0x95, 0x49, 0xd1, 0xa5,
	0x55, 0x27, 0x30, 0x08, 0xa2, 0x3e, 0x53, 0x08, 0x2e, 0x6d, 0x65, 0x55, 0x99, 0x94, 0x42, 0xba,
	0xa9, 0x72, 0x76, 0xaa, 0xcb, 0x94, 0x0a, 0x3a, 0xcc, 0x4d, 0x3e, 0x3f, 0x3e, 0xa9, 0x03, 0x1e,
	0x9f, 0x0a, 0xd9, 0x0d, 0x34, 0x17, 0x31, 0x06, 0xed, 0xfe, 0xb0, 0x4c, 0xc8, 0x51, 0x20, 0x03,
	0x98, 0x65, 0x52, 0x79, 0xef, 0x90, 0xd5, 0x50, 0x74, 0x21, 0x8e, 0x6a, 0xc9, 0x18, 0x8d, 0x45,
	0xc8, 0x28, 0x0f, 0xfd, 0x4b, 0xcf, 0x5e, 0xda, 0x5b, 0xba, 0x5d, 0xae, 0xb8, 0x34, 0x9c, 0x3d,
	0x1e, 0x6b, 0xd6, 0x61, 0xf2, 0xc4, 0x8c, 0x9a, 0x2b, 0x88, 0x83, 0x54, 0x58, 0x1d, 0x50, 0xb5,
	0xd0, 0xbb, 0x4b, 0xfc, 0x1c, 0x2e, 0x1a, 0xf7, 0xa3, 0xc8, 0xff, 0x71, 0x1e, 0x18, 0x17, 0x9a,
	0x6b, 0xe3, 0xa0, 0x3a, 0x4c, 0x7a, 0x6f, 0x10, 0x62, 0xa8, 0x25, 0xc8, 0x44, 0xca, 0x7f, 0xa6,
	0x58, 0x3b, 0x15, 0xee, 0xed, 0x91, 0xe5, 0x64, 0x84, 0x62, 0x3f, 0xa1, 0xd8, 0xb5, 0xe4, 0xbb,
	0x95, 0x69, 0x90, 0xf5, 0x2e, 0x8f, 0xfb, 0x9a, 0x29, 0xda, 0x63, 0x92, 0x5e, 0xcc, 0xfa, 0x33,
	0xc5, 0x8a, 0xab, 0x0e, 0x79, 0xc4, 0x64, 0xed, 0x1c, 0xe7, 0xbd, 0x49, 0x4a, 0xb9, 0x84, 0xe8,
	0xe2, 0x67, 0x74, 0xb1, 0x99, 0x83, 0xb4, 0x76, 0xde, 0x27, 0x9b, 0x1d, 0x29, 0xfa, 0x3d, 0xda,
	0x1a, 0xd9, 0xb5, 0x52, 0x54, 0xc4, 0x34, 0x62, 0x03, 0x16, 0xf9, 0x97, 0xa7, 0x30, 0x64, 0xb1,
	0xd5, 0x91, 0x59, 0x46, 0xd5, 0x88, 0xdf, 0x33, 0x38, 0xef, 0x1e, 0xb9, 0x31, 0x81, 0x12, 0x2d,
	0xfd, 0xe2, 0x2c, 0xe5, 0x60, 0xdd, 0x46, 0x2c, 0x71, 0xe5, 0x00, 0x70, 0x0a, 0x66, 0x73, 0x6d,
	0xb4, 0x84, 0x88, 0x58, 0x10, 0xa3, 0x8d, 0x45, 0xae, 0x2c, 0x1c, 0xb6, 0x7f, 0x8f, 0xac, 0xa4,
	0xc0, 0x28, 0xf8, 0x2b, 0x0a, 0x5e, 0xbd, 0x88, 0xb2, 0x32, 0x01, 0xd9, 0xc9, 0xd8, 0xa4, 0xed,
	0x33, 0x38, 0x91, 0x6d, 0x58, 0x1c, 0xae, 0x34, 0x6f, 0x1b, 0xe9, 0xb9, 0xe2, 0x15, 0x28, 0xa7,
	0xb2, 0x78, 0x90, 0x21, 0x00, 0x33, 0x75, 0x72, 0xab, 0x40, 0x02, 0x0d, 0xfe, 0x86, 0x06, 0x77,
	0x9e, 0xc0, 0x65, 0x2d, 0x1f, 0x92, 0x75, 0x11, 0x47, 0x23, 0x8a, 0x46, 0x60, 0xab, 0x61, 0x65,
	0xed, 0x4d, 0x99, 0x2f, 0x5e, 0xa3, 0xeb, 0x06, 0x69, 0xff, 0x54, 0xb5, 0xb8, 0x11, 0x9b, 0xab,
	0xf2, 0x3a, 0x29, 0xe5, 0xd2, 0xa1, 0xa9, 0xdf, 0xd1, 0xd4, 0xfa, 0x63, 0x38, 0x6b, 0xe5, 0x63,
	0xb2, 0xc3, 0xc3, 0x34, 0x26, 0x90, 0x2c, 0x73, 0xe3, 0x94, 0xbf, 0x50, 0x6c, 0xca, 0x87, 0x38,
	0xc7, 0x7a, 0x5f, 0xb2, 0xe4, 0x42, 0x2a, 0xef, 0x5d, 0x72, 0xab, 0x80, 0x1f, 0x5d, 0xfe, 0x81,
	0x2e, 0x6f, 0x4c, 0x22, 0xb2, 0x66, 0xef, 0x91, 0x2b, 0x43, 0xc6, 0x3b, 0x67, 0x9a, 0x0e, 0x38,
	0x1b, 0x2a, 0x7f, 0x31, 0xd7, 0x59, 0xc8, 0xda, 0xbc, 0x1b, 0x44, 0xe8, 0x6c, 0x09, 0x01, 0x27,
	0x26, 0xde, 0x7b, 0x89, 0x5c, 0x4f, 0xe3, 0x51, 0xf9, 0x4f, 0x54, 0x5e, 0x4e, 0x05, 0xba, 0x1b,
	0xb5, 0xe1, 0x82, 0x5b, 0xfd, 0x11, 0x8f, 0x3b, 0x78, 0x23, 0x99, 0xd2, 0x3e, 0x29, 0x96, 0x5d,
	0x43, 0x68, 0xd5, 0x22, 0x6b, 0x0e, 0x08, 0xfe, 0xcb, 0xf9, 0x94, 0xe8, 0xe4, 0x2f, 0x74, 0xe2,
	0xe7, 0x61, 0xc7, 0xf2, 0x17, 0x32, 0x64, 0xd2, 0x5f, 0x9a, 0x3a, 0xff, 0x86, 0x89, 0x4f, 0xe5,
	0x6f, 0xf1, 0xa8, 0xfa, 0x77, 0x26, 0x7f, 0x1b, 0x68, 0xc5, 0x1e, 0x91, 0x2d, 0x1e, 0xb7, 0xa3,
	0x3e, 0xec, 0x52, 0xc8, 0xe0, 0x08, 0xf3, 0x41, 0xa0, 0x59, 0x88, 0x2f, 0x81, 0x7f, 0xa5, 0xf8,
	0x4c, 0x6c, 0x3a, 0xf4, 0x41, 0x02, 0xb6, 0x4f, 0x84, 0x77, 0x40, 0xb6, 0x27, 0x12, 0xa3, 0xa5,
	0x7f, 0xd0, 0x52, 0x79, 0x02, 0x83, 0xb5, 0x77, 0x4a, 0x76, 0xcf, 0x59, 0x10, 0x39, 0xe4, 0xfa,
	0x4c, 0xf4, 0x75, 0xb6, 0xf4, 0x5c, 0x2d, 0xf6, 0x79, 0xd3, 0xd1, 0x58, 0xea, 0x47, 0x48, 0x92,
	0xaa, 0x43, 0xc7, 0xe4, 0xc5, 0x62, 0x1d, 0xb4, 0xfd, 0x2f, 0xda, 0x7e, 0xee, 0x89, 0x84, 0xd6,
	0xfc, 0x09, 0xd9, 0xc2, 0x1d, 0x80, 0xad, 0xed, 0x47, 0xda, 0xbc, 0x2b, 0x49, 0x01, 0xb9, 0x56,
	0xfc, 0x5a, 0x6d, 0x58, 0x74, 0xd3, 0x82, 0xab, 0xa3, 0xa4, 0x86, 0x3c, 0x20, 0xdb, 0x13, 0x79,
	0xd1, 0xe3, 0x7f, 0xe8, 0xb1, 0x94, 0x4f, 0x60, 0xcc, 0xed, 0x7e, 0x3f, 0x47, 0x16, 0x60, 0xa6,
	0x27, 0x62, 0xc5, 0xbc, 0x97, 0xc9, 0xac, 0x6d, 0x19, 0x5c, 0x11, 0x2f, 0x55, 0xb2, 0xbd, 0x08,
	0xb6, 0x13, 0x6f, 0x99, 0x9f, 0x4d, 0x0c, 0xf4, 0x3e, 0x24, 0x2b, 0xa6, 0x59, 0xa0, 0xa9, 0x6e,
	0x01, 0xaa, 0xf0, 0x0c, 0x80, 0x2b, 0x63, 0xe0, 0xf1, 0x9e, 0xe2, 0x10, 0xc6, 0xb5, 0x64, 0xdc,
	0x5c, 0xee, 0x66, 0x3f, 0x78, 0xaf, 0x91, 0x79, 0xd7, 0xa4, 0x40, 0x95, 0x35, 0x8c, 0xdb, 0x8f,
	0x31, 0x62, 0x0b, 0x73, 0x88, 0xbf, 0x9b, 0xe7, 0xe1, 0xde, 0xdb, 0x64, 0x46, 0x8a, 0x21, 0x94,
	0x42, 0x83, 0xba, 0x53, 0x99, 0xae, 0xa1, 0xaa, 0x9c, 0xaf, 0x42, 0xa5, 0x29, 0x86, 0x4d, 0x43,
	0x50, 0xfa, 0xee, 0x32, 0x99, 0x81, 0x81, 0xb7, 0x41, 0xe6, 0x60, 0x68, 0x4e, 0xd8, 0xa7, 0x75,
	0x58, 0x98, 0xd9, 0xe6, 0x2c, 0x0c, 0xe1, 0xb4, 0x3c, 0x4c, 0xf5, 0x0f, 0x54, 0xe9, 0x40, 0x6a,
	0xff, 0xb3, 0xba, 0x5d, 0xb9, 0x9b, 0x63, 0xfb, 0xa9, 0x39, 0x78, 0xd3, 0x41, 0xb7, 0x87, 0x3b,
	0x9a, 0xb4, 0x17, 0xc7, 0x06, 0xe5, 0xdd, 0x21, 0x73, 0x76, 0x8b, 0x94, 0xff, 0x79, 0xbd, 0xf8,
	0x96, 0xbb, 0x58, 0x53, 0x72, 0x07, 0xb4, 0x45, 0x05, 0x2c, 0x3e, 0x24, 0xe2, 0x7f, 0x31, 0x05,
	0x74, 0x61, 0x50, 0x6d, 0xd8, 0xb4, 0xa1, 0x01, 0x59, 0xd2, 0x36, 0x73, 0x71, 0x6a, 0x12, 0xfb,
	0xb2, 0x5e, 0x7c, 0x0e, 0x17, 0x2d, 0xa0, 0x71, 0x0a, 0x99, 0xdf, 0x26, 0xb3, 0xf8, 0x28, 0x7f,
	0x35, 0x85, 0x28, 0x86, 0x42, 0x1d, 0x5c, 0xbb, 0x50, 0x84, 0xbb, 0xd2, 0x96, 0xbc, 0x67, 0x8f,
	0xcb, 0xd7, 0xf5, 0xec, 0x61, 0x73, 0x14, 0x4a, 0x4b, 0x78, 0x11, 0x91, 0xc1, 0x73, 0xca, 0x07,
	0x09, 0x0c, 0xea, 0xe0, 0x62, 0x72, 0x8b, 0xbe, 0x99, 0xc6, 0xfe, 0x45, 0x38, 0x6c, 0xdc, 0xca,
	0xd8, 0x9b, 0xac, 0xfc, 0x6f, 0xa7, 0xc8, 0x64, 0xb9, 0x95, 0x79, 0xa6, 0x55, 0xf5, 0x88, 0x94,
	0xb9, 0x18, 0x3b, 0x60, 0x49, 0xab, 0xff, 0xd1, 0x2b, 0x4f, 0xfd, 0x4f, 0x40, 0x6b, 0xce, 0xf6,
	0xda, 0xaf, 0xfe, 0x1f, 0x00, 0x00, 0xff, 0xff, 0x40, 0xe1, 0x66, 0xa2, 0x40, 0x0c, 0x00, 0x00,
}
