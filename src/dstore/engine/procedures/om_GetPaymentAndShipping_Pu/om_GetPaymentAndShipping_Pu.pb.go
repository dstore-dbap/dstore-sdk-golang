// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/om_GetPaymentAndShipping_Pu.proto
// DO NOT EDIT!

/*
Package om_GetPaymentAndShipping_Pu is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/om_GetPaymentAndShipping_Pu.proto

It has these top-level messages:
	Parameters
	Response
*/
package om_GetPaymentAndShipping_Pu

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "dstore/values"
import dstore_engine_error "dstore/engine/error"
import dstore_engine_message "dstore/engine/message"
import dstore_engine_metainformation "dstore/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	Result                        *dstore_values.IntegerValue   `protobuf:"bytes,1,opt,name=result" json:"result,omitempty"`
	ResultNull                    bool                          `protobuf:"varint,1001,opt,name=result_null,json=resultNull" json:"result_null,omitempty"`
	UniqueId                      *dstore_values.StringValue    `protobuf:"bytes,2,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
	UniqueIdNull                  bool                          `protobuf:"varint,1002,opt,name=unique_id_null,json=uniqueIdNull" json:"unique_id_null,omitempty"`
	PersonId                      *dstore_values.IntegerValue   `protobuf:"bytes,3,opt,name=person_id,json=personId" json:"person_id,omitempty"`
	PersonIdNull                  bool                          `protobuf:"varint,1003,opt,name=person_id_null,json=personIdNull" json:"person_id_null,omitempty"`
	DeliveryPersonId              *dstore_values.IntegerValue   `protobuf:"bytes,4,opt,name=delivery_person_id,json=deliveryPersonId" json:"delivery_person_id,omitempty"`
	DeliveryPersonIdNull          bool                          `protobuf:"varint,1004,opt,name=delivery_person_id_null,json=deliveryPersonIdNull" json:"delivery_person_id_null,omitempty"`
	BruttoSum                     *dstore_values.DecimalValue   `protobuf:"bytes,5,opt,name=brutto_sum,json=bruttoSum" json:"brutto_sum,omitempty"`
	BruttoSumNull                 bool                          `protobuf:"varint,1005,opt,name=brutto_sum_null,json=bruttoSumNull" json:"brutto_sum_null,omitempty"`
	NettoSum                      *dstore_values.DecimalValue   `protobuf:"bytes,6,opt,name=netto_sum,json=nettoSum" json:"netto_sum,omitempty"`
	NettoSumNull                  bool                          `protobuf:"varint,1006,opt,name=netto_sum_null,json=nettoSumNull" json:"netto_sum_null,omitempty"`
	PaymentForShippingId          *dstore_values.IntegerValue   `protobuf:"bytes,7,opt,name=payment_for_shipping_id,json=paymentForShippingId" json:"payment_for_shipping_id,omitempty"`
	PaymentForShippingIdNull      bool                          `protobuf:"varint,1007,opt,name=payment_for_shipping_id_null,json=paymentForShippingIdNull" json:"payment_for_shipping_id_null,omitempty"`
	Date                          *dstore_values.TimestampValue `protobuf:"bytes,8,opt,name=date" json:"date,omitempty"`
	DateNull                      bool                          `protobuf:"varint,1008,opt,name=date_null,json=dateNull" json:"date_null,omitempty"`
	SelectMissingResultReason     *dstore_values.BooleanValue   `protobuf:"bytes,9,opt,name=select_missing_result_reason,json=selectMissingResultReason" json:"select_missing_result_reason,omitempty"`
	SelectMissingResultReasonNull bool                          `protobuf:"varint,1009,opt,name=select_missing_result_reason_null,json=selectMissingResultReasonNull" json:"select_missing_result_reason_null,omitempty"`
	CalculateCosts                *dstore_values.BooleanValue   `protobuf:"bytes,10,opt,name=calculate_costs,json=calculateCosts" json:"calculate_costs,omitempty"`
	CalculateCostsNull            bool                          `protobuf:"varint,1010,opt,name=calculate_costs_null,json=calculateCostsNull" json:"calculate_costs_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetResult() *dstore_values.IntegerValue {
	if m != nil {
		return m.Result
	}
	return nil
}

func (m *Parameters) GetUniqueId() *dstore_values.StringValue {
	if m != nil {
		return m.UniqueId
	}
	return nil
}

func (m *Parameters) GetPersonId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonId
	}
	return nil
}

func (m *Parameters) GetDeliveryPersonId() *dstore_values.IntegerValue {
	if m != nil {
		return m.DeliveryPersonId
	}
	return nil
}

func (m *Parameters) GetBruttoSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.BruttoSum
	}
	return nil
}

func (m *Parameters) GetNettoSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.NettoSum
	}
	return nil
}

func (m *Parameters) GetPaymentForShippingId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PaymentForShippingId
	}
	return nil
}

func (m *Parameters) GetDate() *dstore_values.TimestampValue {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *Parameters) GetSelectMissingResultReason() *dstore_values.BooleanValue {
	if m != nil {
		return m.SelectMissingResultReason
	}
	return nil
}

func (m *Parameters) GetCalculateCosts() *dstore_values.BooleanValue {
	if m != nil {
		return m.CalculateCosts
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId                         int32                       `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	RegionIdPaymentType           *dstore_values.IntegerValue `protobuf:"bytes,10001,opt,name=region_id_payment_type,json=regionIdPaymentType" json:"region_id_payment_type,omitempty"`
	PaymentForShippingId          *dstore_values.IntegerValue `protobuf:"bytes,10002,opt,name=payment_for_shipping_id,json=paymentForShippingId" json:"payment_for_shipping_id,omitempty"`
	ShippingTypeId                *dstore_values.IntegerValue `protobuf:"bytes,10003,opt,name=shipping_type_id,json=shippingTypeId" json:"shipping_type_id,omitempty"`
	PaymentForShippingDescription *dstore_values.StringValue  `protobuf:"bytes,10004,opt,name=payment_for_shipping_description,json=paymentForShippingDescription" json:"payment_for_shipping_description,omitempty"`
	PaymentTypeId                 *dstore_values.IntegerValue `protobuf:"bytes,10005,opt,name=payment_type_id,json=paymentTypeId" json:"payment_type_id,omitempty"`
	RegionIdShippingType          *dstore_values.IntegerValue `protobuf:"bytes,10006,opt,name=region_id_shipping_type,json=regionIdShippingType" json:"region_id_shipping_type,omitempty"`
	PersonCharacCategoryId        *dstore_values.IntegerValue `protobuf:"bytes,10007,opt,name=person_charac_category_id,json=personCharacCategoryId" json:"person_charac_category_id,omitempty"`
	ErrorCode                     *dstore_values.IntegerValue `protobuf:"bytes,20001,opt,name=error_code,json=errorCode" json:"error_code,omitempty"`
	PaymentCost                   *dstore_values.DecimalValue `protobuf:"bytes,30001,opt,name=payment_cost,json=paymentCost" json:"payment_cost,omitempty"`
	ShippingCost                  *dstore_values.DecimalValue `protobuf:"bytes,30004,opt,name=shipping_cost,json=shippingCost" json:"shipping_cost,omitempty"`
	ShippingCostBrutto            *dstore_values.DecimalValue `protobuf:"bytes,30009,opt,name=shipping_cost_brutto,json=shippingCostBrutto" json:"shipping_cost_brutto,omitempty"`
	PaymentCostBrutto             *dstore_values.DecimalValue `protobuf:"bytes,30010,opt,name=payment_cost_brutto,json=paymentCostBrutto" json:"payment_cost_brutto,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetRegionIdPaymentType() *dstore_values.IntegerValue {
	if m != nil {
		return m.RegionIdPaymentType
	}
	return nil
}

func (m *Response_Row) GetPaymentForShippingId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PaymentForShippingId
	}
	return nil
}

func (m *Response_Row) GetShippingTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ShippingTypeId
	}
	return nil
}

func (m *Response_Row) GetPaymentForShippingDescription() *dstore_values.StringValue {
	if m != nil {
		return m.PaymentForShippingDescription
	}
	return nil
}

func (m *Response_Row) GetPaymentTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PaymentTypeId
	}
	return nil
}

func (m *Response_Row) GetRegionIdShippingType() *dstore_values.IntegerValue {
	if m != nil {
		return m.RegionIdShippingType
	}
	return nil
}

func (m *Response_Row) GetPersonCharacCategoryId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonCharacCategoryId
	}
	return nil
}

func (m *Response_Row) GetErrorCode() *dstore_values.IntegerValue {
	if m != nil {
		return m.ErrorCode
	}
	return nil
}

func (m *Response_Row) GetPaymentCost() *dstore_values.DecimalValue {
	if m != nil {
		return m.PaymentCost
	}
	return nil
}

func (m *Response_Row) GetShippingCost() *dstore_values.DecimalValue {
	if m != nil {
		return m.ShippingCost
	}
	return nil
}

func (m *Response_Row) GetShippingCostBrutto() *dstore_values.DecimalValue {
	if m != nil {
		return m.ShippingCostBrutto
	}
	return nil
}

func (m *Response_Row) GetPaymentCostBrutto() *dstore_values.DecimalValue {
	if m != nil {
		return m.PaymentCostBrutto
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.om_GetPaymentAndShipping_Pu.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.om_GetPaymentAndShipping_Pu.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.om_GetPaymentAndShipping_Pu.Response.Row")
}

var fileDescriptor0 = []byte{
	// 956 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0x5b, 0x6f, 0xe4, 0x34,
	0x14, 0x56, 0xe9, 0xb6, 0x9d, 0x39, 0xbd, 0xe2, 0x56, 0xdd, 0xf4, 0x86, 0xca, 0x22, 0x04, 0xbc,
	0x4c, 0x81, 0x45, 0x2c, 0x5a, 0x21, 0x01, 0xed, 0xb2, 0xa8, 0x0f, 0x1d, 0x4a, 0x06, 0x81, 0x40,
	0x48, 0x51, 0x9a, 0x98, 0xd9, 0x48, 0x49, 0x1c, 0x1c, 0x67, 0xab, 0xfe, 0x0b, 0xee, 0xbc, 0xf0,
	0xc2, 0x4f, 0x40, 0xe2, 0x05, 0xfe, 0x02, 0xbf, 0x84, 0x72, 0x47, 0xe2, 0x7d, 0x8f, 0x7d, 0xec,
	0xb9, 0xb5, 0xdd, 0x44, 0x7d, 0xe9, 0xd4, 0xf6, 0xf9, 0x2e, 0x3e, 0xf6, 0x39, 0x0e, 0xdc, 0x8d,
	0x4b, 0x25, 0x24, 0xdf, 0xe3, 0x79, 0x3f, 0xc9, 0xf9, 0x5e, 0x21, 0x45, 0xc4, 0xe3, 0x4a, 0xf2,
	0x72, 0x4f, 0x64, 0xc1, 0x3b, 0x5c, 0x1d, 0x87, 0x67, 0x19, 0xcf, 0xd5, 0x5b, 0x79, 0xdc, 0x7b,
	0x90, 0x14, 0x45, 0x92, 0xf7, 0x83, 0xe3, 0xaa, 0x83, 0x61, 0x4a, 0xb0, 0x17, 0x08, 0xdb, 0x21,
	0x6c, 0xe7, 0x31, 0x80, 0xcd, 0x55, 0x2b, 0xf3, 0x30, 0x4c, 0x2b, 0x5e, 0x12, 0x7e, 0x73, 0x63,
	0x5c, 0x9b, 0x4b, 0x29, 0xa4, 0x5d, 0xda, 0x1a, 0x5f, 0xca, 0x78, 0x59, 0x86, 0x7d, 0x6e, 0x17,
	0x9f, 0x99, 0x5c, 0x54, 0x61, 0x92, 0x7f, 0x2a, 0x64, 0x16, 0xaa, 0x44, 0xe4, 0x14, 0x74, 0xeb,
	0xff, 0x16, 0xc0, 0x71, 0x28, 0x43, 0x5c, 0xe5, 0xb2, 0x64, 0xb7, 0x61, 0x16, 0x37, 0x55, 0xa5,
	0xca, 0x9b, 0xda, 0x9d, 0x7a, 0x7e, 0xfe, 0xe5, 0xad, 0x8e, 0x35, 0x6f, 0x1d, 0x25, 0xb9, 0xe2,
	0x7d, 0x2e, 0x3f, 0xd0, 0x23, 0xdf, 0x86, 0xb2, 0x5d, 0x98, 0xa7, 0xff, 0x82, 0xbc, 0x4a, 0x53,
	0xef, 0xb7, 0x39, 0x84, 0xb6, 0x7c, 0xa0, 0xb9, 0x2e, 0x4e, 0xb1, 0x3b, 0xd0, 0xae, 0xf2, 0xe4,
	0xb3, 0x8a, 0x07, 0x49, 0xec, 0x3d, 0x61, 0x98, 0x37, 0x27, 0x98, 0x4b, 0x25, 0x31, 0x09, 0x44,
	0xdc, 0xa2, 0xe0, 0xc3, 0x98, 0x3d, 0x0b, 0x4b, 0x03, 0x20, 0xb1, 0x9f, 0x13, 0xfb, 0x82, 0x0b,
	0x31, 0xfc, 0xaf, 0x41, 0xbb, 0x40, 0xfb, 0x22, 0xd7, 0xfc, 0xd3, 0xf5, 0xce, 0x5b, 0x14, 0x4d,
	0x02, 0x03, 0x24, 0x09, 0xfc, 0x6e, 0x05, 0x5c, 0x88, 0x11, 0x38, 0x04, 0x16, 0xf3, 0x34, 0x79,
	0xc8, 0xe5, 0x59, 0x30, 0x54, 0xba, 0x51, 0xaf, 0xb4, 0xe2, 0x60, 0xc7, 0x4e, 0xf1, 0x55, 0xb8,
	0x79, 0x91, 0x8a, 0xa4, 0xff, 0x20, 0xe9, 0xb5, 0x49, 0x8c, 0xb1, 0x70, 0x17, 0xe0, 0x44, 0x56,
	0x4a, 0x89, 0xa0, 0xac, 0x32, 0x6f, 0xe6, 0x52, 0xe9, 0x98, 0x47, 0x49, 0x16, 0xa6, 0x24, 0xdd,
	0xa6, 0xf0, 0x5e, 0x95, 0xb1, 0xe7, 0x60, 0x79, 0x88, 0x25, 0xad, 0x3f, 0x49, 0x6b, 0x71, 0x10,
	0xe4, 0x12, 0x99, 0x73, 0xa7, 0x31, 0x5b, 0xaf, 0xd1, 0x32, 0xd1, 0x5a, 0x02, 0x13, 0x39, 0x40,
	0x92, 0xc2, 0x5f, 0x36, 0x91, 0x2e, 0xc4, 0x08, 0xf8, 0x70, 0xb3, 0xa0, 0xab, 0x1f, 0xe0, 0x55,
	0x0c, 0x4a, 0x77, 0xf9, 0x31, 0x9b, 0x73, 0xf5, 0xd9, 0x5c, 0xb3, 0xd8, 0xfb, 0x42, 0xba, 0xb2,
	0xc1, 0x8c, 0xbe, 0x01, 0xdb, 0x57, 0x70, 0x92, 0x91, 0xbf, 0xc9, 0x88, 0x77, 0x19, 0xd8, 0x98,
	0x7a, 0x09, 0x6e, 0xc4, 0xa1, 0xe2, 0x5e, 0xcb, 0x38, 0xd8, 0x99, 0x70, 0xa0, 0x12, 0xac, 0x2b,
	0x15, 0x66, 0x05, 0x79, 0x30, 0xa1, 0x6c, 0x1b, 0xda, 0xfa, 0x97, 0x04, 0xfe, 0x21, 0x81, 0x96,
	0x9e, 0x31, 0x84, 0x9f, 0xc0, 0x76, 0xc9, 0x53, 0x1e, 0xa9, 0x20, 0x4b, 0xca, 0x52, 0x7b, 0xb1,
	0x05, 0x22, 0x79, 0x88, 0x27, 0xea, 0xb5, 0x2f, 0xdd, 0xea, 0x89, 0x10, 0x29, 0x0f, 0x73, 0x92,
	0xd9, 0x20, 0x82, 0x23, 0xc2, 0xfb, 0x06, 0xee, 0x1b, 0x34, 0x5e, 0xc6, 0xa7, 0x1f, 0xc7, 0x4e,
	0x9e, 0xfe, 0x25, 0x4f, 0x3b, 0x57, 0xd2, 0x18, 0xa3, 0xf7, 0x60, 0x39, 0x0a, 0xd3, 0xa8, 0x4a,
	0xf5, 0x5e, 0x22, 0x51, 0xaa, 0xd2, 0x83, 0x7a, 0x6f, 0x4b, 0x03, 0xcc, 0x81, 0x86, 0x60, 0xfe,
	0xd6, 0x26, 0x58, 0xc8, 0xc3, 0x7f, 0xe4, 0x81, 0x8d, 0x87, 0x6b, 0xe1, 0x5b, 0xe7, 0x6d, 0x68,
	0xa1, 0x9b, 0x42, 0xe4, 0x25, 0x67, 0x2f, 0xc2, 0x8c, 0xe9, 0x6a, 0xb6, 0xe9, 0x0c, 0x5a, 0x83,
	0xed, 0x98, 0xd4, 0xf1, 0xde, 0xd6, 0x7f, 0x7d, 0x0a, 0x64, 0x1f, 0xc1, 0x8a, 0xee, 0x67, 0xc1,
	0x48, 0x43, 0xc3, 0xbe, 0x32, 0x8d, 0xe0, 0xce, 0x04, 0x78, 0xb2, 0xed, 0x1d, 0xe1, 0xf8, 0x70,
	0x38, 0xf6, 0x97, 0xb3, 0xf1, 0x09, 0x2c, 0x81, 0x39, 0xdb, 0x47, 0xb1, 0x93, 0x68, 0xc6, 0xa7,
	0x2e, 0x30, 0x52, 0x97, 0x3d, 0xa2, 0x5f, 0xdf, 0x85, 0xe3, 0xb9, 0x4c, 0x4b, 0x71, 0x8a, 0x5d,
	0x41, 0xa3, 0xee, 0x74, 0x1a, 0xb7, 0xfd, 0x8e, 0x4b, 0x44, 0xc7, 0x17, 0xa7, 0xbe, 0xe6, 0xd8,
	0xfc, 0x75, 0x0e, 0xa6, 0x71, 0xc0, 0xd6, 0xb1, 0x1f, 0x8b, 0x53, 0x5d, 0x1d, 0x9f, 0x77, 0x31,
	0x37, 0x33, 0xfe, 0x0c, 0x0e, 0xf1, 0xca, 0xbf, 0x07, 0xeb, 0x92, 0xf7, 0x13, 0xea, 0x1d, 0xee,
	0xf2, 0xab, 0xb3, 0x82, 0x7b, 0x5f, 0x74, 0xeb, 0xcb, 0x68, 0x95, 0xb0, 0x87, 0xb1, 0xb5, 0xf3,
	0x3e, 0x02, 0x59, 0xef, 0xea, 0xca, 0xfc, 0xb2, 0x7b, 0xdd, 0xd2, 0xbc, 0x0f, 0x2b, 0x03, 0x22,
	0x6d, 0x4f, 0xb3, 0x7d, 0xd5, 0x80, 0x6d, 0xc9, 0xa1, 0xb4, 0x35, 0xe4, 0x89, 0x61, 0xf7, 0x52,
	0x73, 0x31, 0x2f, 0x23, 0x99, 0x14, 0xe6, 0xfc, 0xbf, 0xee, 0xd6, 0x3e, 0x2c, 0x3b, 0x17, 0x4d,
	0xde, 0x1b, 0x32, 0xe8, 0x6a, 0x18, 0xcd, 0xa5, 0x36, 0xfb, 0x4d, 0x03, 0xb3, 0x8b, 0xc5, 0x30,
	0x8d, 0xe8, 0x15, 0x13, 0x39, 0x3c, 0x9b, 0xb1, 0xdd, 0x7b, 0xdf, 0x36, 0x49, 0xa4, 0x3b, 0x9c,
	0xde, 0x48, 0x0a, 0xd8, 0x87, 0xb0, 0x61, 0x1f, 0x8b, 0xe8, 0x01, 0x3e, 0xd7, 0x51, 0x10, 0x61,
	0x39, 0xf5, 0x05, 0xbe, 0x21, 0x68, 0xf2, 0xbb, 0x06, 0xb4, 0xeb, 0x04, 0x3f, 0x30, 0xe8, 0x03,
	0x0b, 0x46, 0xb7, 0xaf, 0x03, 0x98, 0x92, 0xc2, 0xba, 0x8d, 0xb9, 0xf7, 0xc3, 0xf7, 0x0d, 0xde,
	0xfd, 0xb6, 0x01, 0x1c, 0x60, 0x3c, 0x7b, 0x13, 0x16, 0x5c, 0xc6, 0x74, 0xdd, 0x7b, 0x3f, 0x9e,
	0x4f, 0xd5, 0x3f, 0x1a, 0xf3, 0x16, 0xa2, 0xbb, 0x01, 0xdb, 0x87, 0xc5, 0x41, 0x8e, 0x0c, 0xc5,
	0x4f, 0x4d, 0x28, 0x16, 0x1c, 0xc6, 0x70, 0xbc, 0x0b, 0x6b, 0x63, 0x1c, 0x01, 0x3d, 0x6a, 0xde,
	0xcf, 0x4d, 0xa8, 0xd8, 0x28, 0xd5, 0xbe, 0x01, 0xb2, 0x23, 0x58, 0x1d, 0xdd, 0x96, 0xe3, 0xfb,
	0xa5, 0x09, 0xdf, 0x93, 0x23, 0xbb, 0x23, 0xba, 0xfd, 0x1e, 0x6c, 0x25, 0x62, 0xa2, 0x1f, 0x0c,
	0x3f, 0x21, 0x3f, 0x7e, 0xe5, 0x3a, 0x1f, 0x97, 0x27, 0xb3, 0xe6, 0x03, 0xee, 0xf6, 0xa3, 0x00,
	0x00, 0x00, 0xff, 0xff, 0x35, 0xb4, 0x27, 0x31, 0x9b, 0x0a, 0x00, 0x00,
}
