// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/im_GetNodeProperties.proto
// DO NOT EDIT!

/*
Package im_GetNodeProperties is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/im_GetNodeProperties.proto

It has these top-level messages:
	Parameters
	Response
*/
package im_GetNodeProperties

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "dstore/values"
import dstore_engine_error "dstore/engine/error"
import dstore_engine_message "dstore/engine/message"
import dstore_engine_metainformation "dstore/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	NodeList                        *dstore_values.StringValue  `protobuf:"bytes,1,opt,name=node_list,json=nodeList" json:"node_list,omitempty"`
	NodeListNull                    bool                        `protobuf:"varint,1001,opt,name=node_list_null,json=nodeListNull" json:"node_list_null,omitempty"`
	TreeNodeIds                     *dstore_values.BooleanValue `protobuf:"bytes,2,opt,name=tree_node_ids,json=treeNodeIds" json:"tree_node_ids,omitempty"`
	TreeNodeIdsNull                 bool                        `protobuf:"varint,1002,opt,name=tree_node_ids_null,json=treeNodeIdsNull" json:"tree_node_ids_null,omitempty"`
	LanguageId                      *dstore_values.IntegerValue `protobuf:"bytes,3,opt,name=language_id,json=languageId" json:"language_id,omitempty"`
	LanguageIdNull                  bool                        `protobuf:"varint,1003,opt,name=language_id_null,json=languageIdNull" json:"language_id_null,omitempty"`
	InheritDepth                    *dstore_values.IntegerValue `protobuf:"bytes,4,opt,name=inherit_depth,json=inheritDepth" json:"inherit_depth,omitempty"`
	InheritDepthNull                bool                        `protobuf:"varint,1004,opt,name=inherit_depth_null,json=inheritDepthNull" json:"inherit_depth_null,omitempty"`
	RecursiveEvaluation             *dstore_values.IntegerValue `protobuf:"bytes,5,opt,name=recursive_evaluation,json=recursiveEvaluation" json:"recursive_evaluation,omitempty"`
	RecursiveEvaluationNull         bool                        `protobuf:"varint,1005,opt,name=recursive_evaluation_null,json=recursiveEvaluationNull" json:"recursive_evaluation_null,omitempty"`
	CharacteristicIdList            *dstore_values.StringValue  `protobuf:"bytes,6,opt,name=characteristic_id_list,json=characteristicIdList" json:"characteristic_id_list,omitempty"`
	CharacteristicIdListNull        bool                        `protobuf:"varint,1006,opt,name=characteristic_id_list_null,json=characteristicIdListNull" json:"characteristic_id_list_null,omitempty"`
	UseDistinct                     *dstore_values.BooleanValue `protobuf:"bytes,7,opt,name=use_distinct,json=useDistinct" json:"use_distinct,omitempty"`
	UseDistinctNull                 bool                        `protobuf:"varint,1007,opt,name=use_distinct_null,json=useDistinctNull" json:"use_distinct_null,omitempty"`
	DateFormat                      *dstore_values.StringValue  `protobuf:"bytes,8,opt,name=date_format,json=dateFormat" json:"date_format,omitempty"`
	DateFormatNull                  bool                        `protobuf:"varint,1008,opt,name=date_format_null,json=dateFormatNull" json:"date_format_null,omitempty"`
	IncludeInheritsFromInfo         *dstore_values.BooleanValue `protobuf:"bytes,9,opt,name=include_inherits_from_info,json=includeInheritsFromInfo" json:"include_inherits_from_info,omitempty"`
	IncludeInheritsFromInfoNull     bool                        `protobuf:"varint,1009,opt,name=include_inherits_from_info_null,json=includeInheritsFromInfoNull" json:"include_inherits_from_info_null,omitempty"`
	LanguageIdForCharacDescript     *dstore_values.IntegerValue `protobuf:"bytes,10,opt,name=language_id_for_charac_descript,json=languageIdForCharacDescript" json:"language_id_for_charac_descript,omitempty"`
	LanguageIdForCharacDescriptNull bool                        `protobuf:"varint,1010,opt,name=language_id_for_charac_descript_null,json=languageIdForCharacDescriptNull" json:"language_id_for_charac_descript_null,omitempty"`
	CheckNodes                      *dstore_values.IntegerValue `protobuf:"bytes,11,opt,name=check_nodes,json=checkNodes" json:"check_nodes,omitempty"`
	CheckNodesNull                  bool                        `protobuf:"varint,1011,opt,name=check_nodes_null,json=checkNodesNull" json:"check_nodes_null,omitempty"`
	GetDetailsForCharacIdList       *dstore_values.StringValue  `protobuf:"bytes,12,opt,name=get_details_for_charac_id_list,json=getDetailsForCharacIdList" json:"get_details_for_charac_id_list,omitempty"`
	GetDetailsForCharacIdListNull   bool                        `protobuf:"varint,1012,opt,name=get_details_for_charac_id_list_null,json=getDetailsForCharacIdListNull" json:"get_details_for_charac_id_list_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetNodeList() *dstore_values.StringValue {
	if m != nil {
		return m.NodeList
	}
	return nil
}

func (m *Parameters) GetTreeNodeIds() *dstore_values.BooleanValue {
	if m != nil {
		return m.TreeNodeIds
	}
	return nil
}

func (m *Parameters) GetLanguageId() *dstore_values.IntegerValue {
	if m != nil {
		return m.LanguageId
	}
	return nil
}

func (m *Parameters) GetInheritDepth() *dstore_values.IntegerValue {
	if m != nil {
		return m.InheritDepth
	}
	return nil
}

func (m *Parameters) GetRecursiveEvaluation() *dstore_values.IntegerValue {
	if m != nil {
		return m.RecursiveEvaluation
	}
	return nil
}

func (m *Parameters) GetCharacteristicIdList() *dstore_values.StringValue {
	if m != nil {
		return m.CharacteristicIdList
	}
	return nil
}

func (m *Parameters) GetUseDistinct() *dstore_values.BooleanValue {
	if m != nil {
		return m.UseDistinct
	}
	return nil
}

func (m *Parameters) GetDateFormat() *dstore_values.StringValue {
	if m != nil {
		return m.DateFormat
	}
	return nil
}

func (m *Parameters) GetIncludeInheritsFromInfo() *dstore_values.BooleanValue {
	if m != nil {
		return m.IncludeInheritsFromInfo
	}
	return nil
}

func (m *Parameters) GetLanguageIdForCharacDescript() *dstore_values.IntegerValue {
	if m != nil {
		return m.LanguageIdForCharacDescript
	}
	return nil
}

func (m *Parameters) GetCheckNodes() *dstore_values.IntegerValue {
	if m != nil {
		return m.CheckNodes
	}
	return nil
}

func (m *Parameters) GetGetDetailsForCharacIdList() *dstore_values.StringValue {
	if m != nil {
		return m.GetDetailsForCharacIdList
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId                     int32                         `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	Active                    *dstore_values.BooleanValue   `protobuf:"bytes,10001,opt,name=active" json:"active,omitempty"`
	Details                   *dstore_values.StringValue    `protobuf:"bytes,10002,opt,name=details" json:"details,omitempty"`
	UnitId                    *dstore_values.IntegerValue   `protobuf:"bytes,10003,opt,name=unit_id,json=unitId" json:"unit_id,omitempty"`
	CharacteristicDescription *dstore_values.StringValue    `protobuf:"bytes,10004,opt,name=characteristic_description,json=characteristicDescription" json:"characteristic_description,omitempty"`
	TreeNodeId                *dstore_values.IntegerValue   `protobuf:"bytes,10005,opt,name=tree_node_id,json=treeNodeId" json:"tree_node_id,omitempty"`
	NodeId                    *dstore_values.IntegerValue   `protobuf:"bytes,10006,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Value                     *dstore_values.StringValue    `protobuf:"bytes,10007,opt,name=value" json:"value,omitempty"`
	CharacteristicId          *dstore_values.IntegerValue   `protobuf:"bytes,10008,opt,name=characteristic_id,json=characteristicId" json:"characteristic_id,omitempty"`
	ValueId                   *dstore_values.IntegerValue   `protobuf:"bytes,10009,opt,name=value_id,json=valueId" json:"value_id,omitempty"`
	UnitSymbol                *dstore_values.StringValue    `protobuf:"bytes,10010,opt,name=unit_symbol,json=unitSymbol" json:"unit_symbol,omitempty"`
	Deleted                   *dstore_values.BooleanValue   `protobuf:"bytes,10011,opt,name=deleted" json:"deleted,omitempty"`
	ValidToChar               *dstore_values.StringValue    `protobuf:"bytes,30002,opt,name=valid_to_char,json=validToChar" json:"valid_to_char,omitempty"`
	InheritsFromTreeNodeId    *dstore_values.IntegerValue   `protobuf:"bytes,30009,opt,name=inherits_from_tree_node_id,json=inheritsFromTreeNodeId" json:"inherits_from_tree_node_id,omitempty"`
	ValidTo                   *dstore_values.TimestampValue `protobuf:"bytes,30010,opt,name=valid_to,json=validTo" json:"valid_to,omitempty"`
	ValidFrom                 *dstore_values.TimestampValue `protobuf:"bytes,30014,opt,name=valid_from,json=validFrom" json:"valid_from,omitempty"`
	InheritsFromNodeId        *dstore_values.IntegerValue   `protobuf:"bytes,30016,opt,name=inherits_from_node_id,json=inheritsFromNodeId" json:"inherits_from_node_id,omitempty"`
	ValidFromChar             *dstore_values.StringValue    `protobuf:"bytes,30017,opt,name=valid_from_char,json=validFromChar" json:"valid_from_char,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetActive() *dstore_values.BooleanValue {
	if m != nil {
		return m.Active
	}
	return nil
}

func (m *Response_Row) GetDetails() *dstore_values.StringValue {
	if m != nil {
		return m.Details
	}
	return nil
}

func (m *Response_Row) GetUnitId() *dstore_values.IntegerValue {
	if m != nil {
		return m.UnitId
	}
	return nil
}

func (m *Response_Row) GetCharacteristicDescription() *dstore_values.StringValue {
	if m != nil {
		return m.CharacteristicDescription
	}
	return nil
}

func (m *Response_Row) GetTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.TreeNodeId
	}
	return nil
}

func (m *Response_Row) GetNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *Response_Row) GetValue() *dstore_values.StringValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Response_Row) GetCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.CharacteristicId
	}
	return nil
}

func (m *Response_Row) GetValueId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ValueId
	}
	return nil
}

func (m *Response_Row) GetUnitSymbol() *dstore_values.StringValue {
	if m != nil {
		return m.UnitSymbol
	}
	return nil
}

func (m *Response_Row) GetDeleted() *dstore_values.BooleanValue {
	if m != nil {
		return m.Deleted
	}
	return nil
}

func (m *Response_Row) GetValidToChar() *dstore_values.StringValue {
	if m != nil {
		return m.ValidToChar
	}
	return nil
}

func (m *Response_Row) GetInheritsFromTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.InheritsFromTreeNodeId
	}
	return nil
}

func (m *Response_Row) GetValidTo() *dstore_values.TimestampValue {
	if m != nil {
		return m.ValidTo
	}
	return nil
}

func (m *Response_Row) GetValidFrom() *dstore_values.TimestampValue {
	if m != nil {
		return m.ValidFrom
	}
	return nil
}

func (m *Response_Row) GetInheritsFromNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.InheritsFromNodeId
	}
	return nil
}

func (m *Response_Row) GetValidFromChar() *dstore_values.StringValue {
	if m != nil {
		return m.ValidFromChar
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.im_GetNodeProperties.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.im_GetNodeProperties.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.im_GetNodeProperties.Response.Row")
}

var fileDescriptor0 = []byte{
	// 1091 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x57, 0x6d, 0x6f, 0x1b, 0x45,
	0x10, 0x56, 0x09, 0xb1, 0x9d, 0xb1, 0xd3, 0xa4, 0xdb, 0x92, 0x6e, 0x6c, 0xb5, 0x41, 0x29, 0x48,
	0x20, 0xa8, 0x53, 0x28, 0x6f, 0xa2, 0xa8, 0xa0, 0xe2, 0x14, 0x59, 0xb4, 0x56, 0x64, 0x2a, 0x04,
	0x95, 0xd0, 0xe9, 0xe2, 0xdb, 0x3a, 0x27, 0xce, 0x77, 0xd6, 0xee, 0xb9, 0x15, 0x7f, 0x81, 0x4f,
	0x50, 0xde, 0xe1, 0x5f, 0xf0, 0x0d, 0x3e, 0x20, 0xf8, 0x39, 0x94, 0xf7, 0xc2, 0x0f, 0x60, 0x76,
	0x67, 0xcf, 0xf7, 0x52, 0x27, 0x77, 0xfd, 0x92, 0xe8, 0x6e, 0x9f, 0x67, 0x9e, 0x67, 0x76, 0x67,
	0x67, 0xce, 0x70, 0xd1, 0x53, 0x71, 0x24, 0xc5, 0x8e, 0x08, 0xc7, 0x7e, 0x28, 0x76, 0xa6, 0x32,
	0x1a, 0x09, 0x6f, 0x26, 0x85, 0xda, 0xf1, 0x27, 0xce, 0x5b, 0x22, 0x1e, 0x44, 0x9e, 0xd8, 0x93,
	0xd1, 0x54, 0xc8, 0xd8, 0x17, 0xaa, 0x8b, 0xeb, 0x71, 0xc4, 0xb6, 0x89, 0xd4, 0x25, 0x52, 0x77,
	0x11, 0xb2, 0x7d, 0xd2, 0x06, 0xbe, 0xed, 0x06, 0xb3, 0x84, 0xd8, 0xde, 0xcc, 0xab, 0x09, 0x29,
	0x23, 0x69, 0x97, 0x3a, 0xf9, 0xa5, 0x89, 0x50, 0xca, 0x1d, 0x0b, 0xbb, 0x78, 0xae, 0xb8, 0x18,
	0xbb, 0x7e, 0x78, 0x2b, 0x92, 0x13, 0x37, 0xf6, 0xa3, 0x90, 0x40, 0xdb, 0x77, 0x5b, 0x00, 0x7b,
	0xae, 0x74, 0x71, 0x55, 0x48, 0xc5, 0x5e, 0x86, 0x95, 0x10, 0x2d, 0x39, 0x81, 0xaf, 0x62, 0x7e,
	0xec, 0xf1, 0x63, 0x4f, 0x35, 0x9f, 0x6f, 0x77, 0xad, 0x71, 0x6b, 0x4a, 0xc5, 0xd2, 0x0f, 0xc7,
	0xef, 0xea, 0x87, 0x61, 0x43, 0x83, 0xaf, 0x21, 0x96, 0x3d, 0x09, 0xc7, 0xe7, 0x44, 0x27, 0x9c,
	0x05, 0x01, 0xff, 0xb5, 0x8e, 0xf4, 0xc6, 0xb0, 0x95, 0x40, 0x06, 0xf8, 0x92, 0xbd, 0x0e, 0xab,
	0xb1, 0x14, 0xc2, 0x31, 0x58, 0xdf, 0x53, 0xfc, 0x11, 0xa3, 0xd1, 0x29, 0x68, 0xec, 0x47, 0x51,
	0x20, 0xdc, 0x90, 0x44, 0x9a, 0x9a, 0xa1, 0x37, 0xaa, 0xef, 0x29, 0xf6, 0x2c, 0xb0, 0x5c, 0x00,
	0xd2, 0xba, 0x47, 0x5a, 0x6b, 0x19, 0xa4, 0x91, 0x7b, 0x0d, 0x9a, 0x81, 0x1b, 0x8e, 0x67, 0xb8,
	0x29, 0x08, 0xe6, 0x4b, 0x0b, 0xc5, 0xfc, 0x30, 0x16, 0x63, 0x21, 0x49, 0x0c, 0x12, 0x7c, 0xdf,
	0x63, 0x4f, 0xc3, 0x7a, 0x86, 0x4d, 0x4a, 0xbf, 0x91, 0xd2, 0xf1, 0x14, 0x66, 0x84, 0xde, 0x80,
	0x55, 0x3f, 0x3c, 0x10, 0xd2, 0x8f, 0x1d, 0x4f, 0x4c, 0xe3, 0x03, 0xfe, 0x68, 0xb9, 0x54, 0xcb,
	0x32, 0x7a, 0x9a, 0xc0, 0xce, 0x03, 0xcb, 0x45, 0x20, 0xb9, 0xdf, 0x49, 0x6e, 0x3d, 0x0b, 0x35,
	0x82, 0x03, 0x38, 0x25, 0xc5, 0x68, 0x26, 0x95, 0x7f, 0x5b, 0x38, 0x42, 0x87, 0x37, 0xa7, 0xca,
	0x97, 0xcb, 0x75, 0x4f, 0xce, 0x89, 0xbb, 0x73, 0x1e, 0xbb, 0x04, 0x9b, 0x8b, 0xe2, 0x91, 0x8b,
	0x3f, 0xc8, 0xc5, 0xe9, 0x05, 0x44, 0x63, 0x66, 0x0f, 0x36, 0x46, 0x07, 0x58, 0x44, 0x23, 0xac,
	0x21, 0x3c, 0x69, 0x7f, 0xa4, 0xb7, 0xcb, 0x94, 0x50, 0xad, 0xb4, 0x84, 0x4e, 0xe5, 0x99, 0x7d,
	0xcf, 0x94, 0xd3, 0x65, 0xe8, 0x2c, 0x8e, 0x48, 0x86, 0xfe, 0x24, 0x43, 0x7c, 0x11, 0xd7, 0x38,
	0xba, 0x0c, 0xad, 0x99, 0x12, 0x8e, 0xa7, 0xdf, 0x87, 0xa3, 0x98, 0xd7, 0x2b, 0x94, 0x19, 0x12,
	0x7a, 0x16, 0xcf, 0x9e, 0x81, 0x13, 0x59, 0x3e, 0xa9, 0xfe, 0x65, 0xab, 0x2c, 0x03, 0x34, 0x62,
	0x97, 0xa0, 0xe9, 0xb9, 0xb1, 0x70, 0xe8, 0x6e, 0xf1, 0x46, 0x69, 0xce, 0xa0, 0xe1, 0x57, 0x0d,
	0x5a, 0x17, 0x59, 0x86, 0x4c, 0x42, 0x7f, 0xdb, 0x22, 0x4b, 0x61, 0x46, 0xe7, 0x3d, 0x68, 0xa3,
	0x66, 0x30, 0xd3, 0x95, 0x4f, 0xf5, 0xa0, 0x9c, 0x5b, 0x32, 0x9a, 0x38, 0xfa, 0x5a, 0xf3, 0x95,
	0xf2, 0x14, 0x4f, 0x5b, 0x7a, 0xdf, 0xb2, 0xaf, 0x22, 0xb9, 0x8f, 0x5c, 0xb6, 0x0b, 0x5b, 0x87,
	0x47, 0x26, 0x4f, 0xff, 0x90, 0xa7, 0xce, 0x21, 0x21, 0x8c, 0x41, 0x17, 0xb6, 0xb2, 0x17, 0x06,
	0x53, 0x72, 0xe8, 0x84, 0xb0, 0xa4, 0xd5, 0x48, 0xfa, 0xd3, 0x98, 0x43, 0x79, 0x7d, 0x76, 0xd2,
	0xbb, 0x85, 0xc9, 0xbf, 0x69, 0x02, 0xf4, 0x2c, 0x1f, 0xeb, 0xfe, 0x89, 0x12, 0x09, 0xb2, 0x7b,
	0x9f, 0xec, 0x6e, 0x1d, 0x11, 0x2b, 0xe9, 0x10, 0xa3, 0x03, 0x31, 0xfa, 0xd0, 0x34, 0x14, 0xc5,
	0x9b, 0x15, 0x3a, 0x84, 0xc1, 0xeb, 0x2e, 0xa3, 0xf4, 0xe1, 0x65, 0xd8, 0xa4, 0xfc, 0xaf, 0x3d,
	0xbc, 0x14, 0x66, 0x84, 0x3e, 0x80, 0xb3, 0x63, 0xa1, 0xef, 0x36, 0x76, 0xe1, 0x40, 0x65, 0x8d,
	0x27, 0x77, 0xa5, 0x55, 0x5a, 0x37, 0x9b, 0x18, 0xa1, 0x47, 0x01, 0xe6, 0xd9, 0xd8, 0x0b, 0xf3,
	0x36, 0x9c, 0x3b, 0x3a, 0x3c, 0x99, 0xfb, 0x8f, 0xcc, 0x9d, 0x39, 0x34, 0x90, 0xf6, 0xba, 0xfd,
	0x71, 0x13, 0x1a, 0x43, 0xa1, 0xa6, 0x51, 0xa8, 0x04, 0xbb, 0x00, 0xcb, 0x66, 0xe4, 0x14, 0xc7,
	0x81, 0x9d, 0x63, 0x34, 0x8e, 0x76, 0xf5, 0xdf, 0x21, 0x01, 0xd9, 0xfb, 0xb0, 0xae, 0x87, 0x8d,
	0x93, 0x99, 0x36, 0xd8, 0xe7, 0x97, 0x90, 0xdc, 0x2d, 0x90, 0x8b, 0x33, 0xe9, 0x3a, 0x3e, 0xf7,
	0xd3, 0xe7, 0xe1, 0xda, 0x24, 0xff, 0x82, 0xbd, 0x02, 0x75, 0x3b, 0xe4, 0xb0, 0x99, 0xeb, 0x88,
	0x67, 0x1f, 0x88, 0x48, 0x23, 0xf0, 0x3a, 0xfd, 0x1f, 0x26, 0x70, 0x76, 0x05, 0x96, 0x64, 0x74,
	0x07, 0xfb, 0xb2, 0x66, 0x5d, 0xe8, 0x96, 0x0f, 0xe3, 0x6e, 0xb2, 0x03, 0xdd, 0x61, 0x74, 0x67,
	0xa8, 0xc9, 0xed, 0xfb, 0x0d, 0x58, 0xc2, 0x07, 0xb6, 0x01, 0x35, 0x7c, 0xd4, 0x13, 0xe5, 0x93,
	0x01, 0x6e, 0xca, 0xf2, 0x70, 0x19, 0x1f, 0x71, 0x60, 0xbc, 0x00, 0x35, 0xec, 0x46, 0xd8, 0x1f,
	0xf9, 0xa7, 0x83, 0xf2, 0xdb, 0x68, 0xb1, 0xec, 0x45, 0xa8, 0xdb, 0x63, 0xe3, 0x77, 0x07, 0xa5,
	0x35, 0x90, 0x60, 0x35, 0x6d, 0x16, 0xe2, 0xb4, 0x40, 0x17, 0x9f, 0x0d, 0xca, 0xcb, 0xb6, 0xa6,
	0xc1, 0xe8, 0xf1, 0x26, 0xb4, 0x0b, 0x9d, 0x35, 0xb9, 0x38, 0xfa, 0x98, 0x3e, 0x2f, 0x37, 0xb0,
	0x99, 0xa7, 0xf7, 0x52, 0xb6, 0xee, 0xba, 0xd9, 0xe1, 0xcc, 0xbf, 0xa8, 0xe0, 0x0b, 0xd2, 0x99,
	0xad, 0x53, 0x4a, 0xa8, 0x5f, 0x56, 0x49, 0x29, 0x24, 0xda, 0x73, 0xb0, 0x6c, 0x96, 0xf9, 0x57,
	0xe5, 0xee, 0x09, 0xc9, 0xfa, 0x70, 0xe2, 0x81, 0xf9, 0xc2, 0xbf, 0xae, 0xa0, 0xb9, 0x5e, 0x1c,
	0x39, 0xf8, 0xc9, 0xd4, 0x30, 0x40, 0x1d, 0xe1, 0x9b, 0x0a, 0x11, 0xea, 0xe6, 0x25, 0x12, 0xb1,
	0xf5, 0x98, 0x03, 0x54, 0x1f, 0x4d, 0xf6, 0xa3, 0x80, 0x7f, 0x5b, 0x6e, 0x1e, 0x34, 0xfe, 0x1d,
	0x03, 0x67, 0x2f, 0xe9, 0xaa, 0x09, 0xf0, 0xab, 0xcd, 0xe3, 0xdf, 0x55, 0x28, 0xb6, 0x04, 0xac,
	0xbf, 0x54, 0x70, 0x1d, 0x9b, 0x42, 0x1c, 0x99, 0x0e, 0xc1, 0xbf, 0xbf, 0x57, 0xfe, 0x9d, 0xd7,
	0x34, 0x94, 0x1b, 0x91, 0xee, 0x14, 0x78, 0xbd, 0xdb, 0xf9, 0x21, 0x91, 0x3b, 0xf3, 0x1f, 0x6c,
	0xb8, 0x23, 0xf7, 0x60, 0xc3, 0xcf, 0x8c, 0x8f, 0x1b, 0x69, 0x01, 0xbc, 0x6a, 0xf6, 0xd2, 0x98,
	0xe3, 0x3f, 0xda, 0x40, 0x67, 0x0a, 0x81, 0x62, 0x1f, 0xaf, 0x74, 0xec, 0x4e, 0xa6, 0xe9, 0x76,
	0x6a, 0x6b, 0x58, 0x7c, 0x40, 0x5c, 0xed, 0x89, 0xff, 0x54, 0x8d, 0xbd, 0x62, 0x28, 0xda, 0x05,
	0x7e, 0xc4, 0x3c, 0x96, 0x4f, 0x2b, 0xc9, 0xe8, 0xe7, 0x2a, 0x19, 0xb1, 0x6c, 0x46, 0x36, 0x9b,
	0x1e, 0xac, 0xa5, 0x8e, 0x68, 0xb3, 0x7f, 0xa9, 0xb0, 0xd9, 0xab, 0x73, 0x4f, 0x7a, 0xbb, 0xaf,
	0x5c, 0x83, 0x8e, 0x1f, 0x15, 0xfa, 0x55, 0xfa, 0x8b, 0xe3, 0xe6, 0xf9, 0x87, 0xfa, 0x2d, 0xb2,
	0x5f, 0x33, 0x9f, 0xfd, 0x17, 0xff, 0x0f, 0x00, 0x00, 0xff, 0xff, 0x87, 0x10, 0x6e, 0xd2, 0xc3,
	0x0c, 0x00, 0x00,
}
