// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/om_GetCashAccTransactions_Pu.proto
// DO NOT EDIT!

/*
Package om_GetCashAccTransactions_Pu is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/om_GetCashAccTransactions_Pu.proto

It has these top-level messages:
	Parameters
	Response
*/
package om_GetCashAccTransactions_Pu

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "dstore/values"
import dstore_engine_error "dstore/engine/error"
import dstore_engine_message "dstore/engine/message"
import dstore_engine_metainformation "dstore/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	PersonIdentificationValues     *dstore_values.StringValue    `protobuf:"bytes,1,opt,name=person_identification_values,json=personIdentificationValues" json:"person_identification_values,omitempty"`
	PersonIdentificationValuesNull bool                          `protobuf:"varint,1001,opt,name=person_identification_values_null,json=personIdentificationValuesNull" json:"person_identification_values_null,omitempty"`
	PersonTypeId                   *dstore_values.IntegerValue   `protobuf:"bytes,2,opt,name=person_type_id,json=personTypeId" json:"person_type_id,omitempty"`
	PersonTypeIdNull               bool                          `protobuf:"varint,1002,opt,name=person_type_id_null,json=personTypeIdNull" json:"person_type_id_null,omitempty"`
	UniqueId                       *dstore_values.StringValue    `protobuf:"bytes,3,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
	UniqueIdNull                   bool                          `protobuf:"varint,1003,opt,name=unique_id_null,json=uniqueIdNull" json:"unique_id_null,omitempty"`
	CashAccountTypeId              *dstore_values.IntegerValue   `protobuf:"bytes,4,opt,name=cash_account_type_id,json=cashAccountTypeId" json:"cash_account_type_id,omitempty"`
	CashAccountTypeIdNull          bool                          `protobuf:"varint,1004,opt,name=cash_account_type_id_null,json=cashAccountTypeIdNull" json:"cash_account_type_id_null,omitempty"`
	SeparatorInIdentVals           *dstore_values.StringValue    `protobuf:"bytes,5,opt,name=separator_in_ident_vals,json=separatorInIdentVals" json:"separator_in_ident_vals,omitempty"`
	SeparatorInIdentValsNull       bool                          `protobuf:"varint,1005,opt,name=separator_in_ident_vals_null,json=separatorInIdentValsNull" json:"separator_in_ident_vals_null,omitempty"`
	OnlyTransactionsSince          *dstore_values.TimestampValue `protobuf:"bytes,6,opt,name=only_transactions_since,json=onlyTransactionsSince" json:"only_transactions_since,omitempty"`
	OnlyTransactionsSinceNull      bool                          `protobuf:"varint,1006,opt,name=only_transactions_since_null,json=onlyTransactionsSinceNull" json:"only_transactions_since_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetPersonIdentificationValues() *dstore_values.StringValue {
	if m != nil {
		return m.PersonIdentificationValues
	}
	return nil
}

func (m *Parameters) GetPersonTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonTypeId
	}
	return nil
}

func (m *Parameters) GetUniqueId() *dstore_values.StringValue {
	if m != nil {
		return m.UniqueId
	}
	return nil
}

func (m *Parameters) GetCashAccountTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.CashAccountTypeId
	}
	return nil
}

func (m *Parameters) GetSeparatorInIdentVals() *dstore_values.StringValue {
	if m != nil {
		return m.SeparatorInIdentVals
	}
	return nil
}

func (m *Parameters) GetOnlyTransactionsSince() *dstore_values.TimestampValue {
	if m != nil {
		return m.OnlyTransactionsSince
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
	AccountBalance  *dstore_values.DecimalValue                      `protobuf:"bytes,101,opt,name=account_balance,json=accountBalance" json:"account_balance,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

func (m *Response) GetAccountBalance() *dstore_values.DecimalValue {
	if m != nil {
		return m.AccountBalance
	}
	return nil
}

type Response_Row struct {
	RowId                  int32                         `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	TransactionType        *dstore_values.StringValue    `protobuf:"bytes,10001,opt,name=transaction_type,json=transactionType" json:"transaction_type,omitempty"`
	PersonId               *dstore_values.IntegerValue   `protobuf:"bytes,10002,opt,name=person_id,json=personId" json:"person_id,omitempty"`
	TransactionDateAndTime *dstore_values.TimestampValue `protobuf:"bytes,10003,opt,name=transaction_date_and_time,json=transactionDateAndTime" json:"transaction_date_and_time,omitempty"`
	TransactionValue       *dstore_values.DecimalValue   `protobuf:"bytes,10004,opt,name=transaction_value,json=transactionValue" json:"transaction_value,omitempty"`
	TransactionComment     *dstore_values.StringValue    `protobuf:"bytes,10005,opt,name=transaction_comment,json=transactionComment" json:"transaction_comment,omitempty"`
	TransactionTypeId      *dstore_values.IntegerValue   `protobuf:"bytes,10006,opt,name=transaction_type_id,json=transactionTypeId" json:"transaction_type_id,omitempty"`
	CashAccountTypeId      *dstore_values.IntegerValue   `protobuf:"bytes,10007,opt,name=cash_account_type_id,json=cashAccountTypeId" json:"cash_account_type_id,omitempty"`
	SuspendedUntil         *dstore_values.TimestampValue `protobuf:"bytes,10008,opt,name=suspended_until,json=suspendedUntil" json:"suspended_until,omitempty"`
	TransactionId          *dstore_values.IntegerValue   `protobuf:"bytes,10009,opt,name=transaction_id,json=transactionId" json:"transaction_id,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetTransactionType() *dstore_values.StringValue {
	if m != nil {
		return m.TransactionType
	}
	return nil
}

func (m *Response_Row) GetPersonId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonId
	}
	return nil
}

func (m *Response_Row) GetTransactionDateAndTime() *dstore_values.TimestampValue {
	if m != nil {
		return m.TransactionDateAndTime
	}
	return nil
}

func (m *Response_Row) GetTransactionValue() *dstore_values.DecimalValue {
	if m != nil {
		return m.TransactionValue
	}
	return nil
}

func (m *Response_Row) GetTransactionComment() *dstore_values.StringValue {
	if m != nil {
		return m.TransactionComment
	}
	return nil
}

func (m *Response_Row) GetTransactionTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.TransactionTypeId
	}
	return nil
}

func (m *Response_Row) GetCashAccountTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.CashAccountTypeId
	}
	return nil
}

func (m *Response_Row) GetSuspendedUntil() *dstore_values.TimestampValue {
	if m != nil {
		return m.SuspendedUntil
	}
	return nil
}

func (m *Response_Row) GetTransactionId() *dstore_values.IntegerValue {
	if m != nil {
		return m.TransactionId
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.om_GetCashAccTransactions_Pu.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.om_GetCashAccTransactions_Pu.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.om_GetCashAccTransactions_Pu.Response.Row")
}

var fileDescriptor0 = []byte{
	// 799 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0xeb, 0x6e, 0xd3, 0x4a,
	0x10, 0x56, 0x4f, 0x4e, 0xd2, 0x74, 0x4f, 0x4f, 0xd2, 0x6e, 0x6f, 0x4e, 0xda, 0x53, 0x1d, 0x8a,
	0x90, 0x10, 0x3f, 0x5c, 0x04, 0x42, 0x14, 0xf1, 0x03, 0x7a, 0x81, 0x2a, 0x88, 0x46, 0xc5, 0xa4,
	0x48, 0x20, 0x24, 0x6b, 0x6b, 0x6f, 0xc3, 0x4a, 0xf1, 0x3a, 0x78, 0x6d, 0xaa, 0xbe, 0x05, 0xf7,
	0xcb, 0x03, 0xf0, 0x1c, 0x7d, 0x1e, 0xae, 0xcf, 0xc0, 0xac, 0xc7, 0x49, 0x1d, 0x37, 0x69, 0xa2,
	0xfe, 0x69, 0xb4, 0xbb, 0xf3, 0x7d, 0xf3, 0xed, 0xce, 0x7c, 0x53, 0x93, 0xdb, 0xae, 0x0a, 0xfd,
	0x80, 0xaf, 0x72, 0xd9, 0x14, 0x92, 0xaf, 0xb6, 0x03, 0xdf, 0xe1, 0x6e, 0x14, 0x70, 0xb5, 0xea,
	0x7b, 0xf6, 0x36, 0x0f, 0x37, 0x99, 0x7a, 0xb1, 0xee, 0x38, 0x8d, 0x80, 0x49, 0xc5, 0x9c, 0x50,
	0xf8, 0x52, 0xd9, 0xbb, 0x91, 0x09, 0x71, 0xa1, 0x4f, 0xaf, 0x20, 0xd8, 0x44, 0xb0, 0x79, 0x16,
	0xa2, 0x3a, 0x93, 0x24, 0x7a, 0xc5, 0x5a, 0x11, 0x57, 0x48, 0x50, 0xad, 0xf4, 0x66, 0xe7, 0x41,
	0xe0, 0x07, 0xc9, 0xd1, 0x62, 0xef, 0x91, 0xc7, 0x95, 0x62, 0x4d, 0x9e, 0x1c, 0x5e, 0xcc, 0x1e,
	0x86, 0x4c, 0xc8, 0x03, 0x3f, 0xf0, 0x98, 0xce, 0x87, 0x41, 0x2b, 0xc7, 0x05, 0x42, 0x76, 0x59,
	0xc0, 0xe0, 0x94, 0x07, 0x8a, 0x3e, 0x27, 0x4b, 0x6d, 0xf8, 0xf5, 0xa5, 0x2d, 0x5c, 0x2e, 0x43,
	0x71, 0x20, 0x9c, 0x38, 0xda, 0x46, 0x45, 0xc6, 0xd8, 0xff, 0x63, 0x97, 0xff, 0xb9, 0x56, 0x35,
	0x93, 0x3b, 0x25, 0x3a, 0x55, 0x18, 0x08, 0xd9, 0x7c, 0xa2, 0x17, 0x56, 0x15, 0xf1, 0xb5, 0x1e,
	0x78, 0x7c, 0xa4, 0xe8, 0x03, 0x72, 0xe1, 0x2c, 0x76, 0x5b, 0x46, 0xad, 0x96, 0xf1, 0x6d, 0x1c,
	0x72, 0x14, 0xad, 0xe5, 0xc1, 0x3c, 0x75, 0x08, 0xa3, 0xeb, 0xa4, 0x94, 0x70, 0x85, 0x47, 0x6d,
	0x0e, 0x84, 0xc6, 0x5f, 0xb1, 0xb6, 0xc5, 0x8c, 0x36, 0x21, 0x43, 0xde, 0xe4, 0x01, 0x8a, 0x9b,
	0x44, 0x48, 0x03, 0x10, 0x35, 0x97, 0x9a, 0x64, 0xa6, 0x97, 0x02, 0x05, 0x7c, 0x47, 0x01, 0x53,
	0xe9, 0xd8, 0x38, 0xe5, 0x4d, 0x32, 0x11, 0x49, 0xf1, 0x32, 0x8a, 0xb3, 0xe5, 0x86, 0xbe, 0x44,
	0x11, 0x83, 0x21, 0xd1, 0x25, 0x52, 0xea, 0x02, 0x31, 0xc7, 0x0f, 0xcc, 0x31, 0xd9, 0x09, 0x89,
	0xf9, 0x1f, 0x92, 0x59, 0x07, 0xfa, 0xc2, 0x66, 0x8e, 0xe3, 0x47, 0x32, 0xec, 0x5e, 0xec, 0xef,
	0xe1, 0x17, 0x9b, 0x76, 0xb0, 0xa1, 0x34, 0x2e, 0xb9, 0xdd, 0x2d, 0x52, 0xe9, 0xc7, 0x86, 0xf9,
	0x7f, 0x62, 0xfe, 0xb9, 0x53, 0xb0, 0x58, 0xc8, 0x23, 0xb2, 0xa0, 0x78, 0x1b, 0xba, 0x02, 0xf2,
	0xd9, 0x22, 0xa9, 0x96, 0x2e, 0x92, 0x32, 0xf2, 0x43, 0xaf, 0x3d, 0xdb, 0x85, 0xd6, 0xb0, 0x7a,
	0xb0, 0xad, 0xe8, 0x1d, 0xb2, 0x34, 0x80, 0x12, 0x05, 0xfd, 0x42, 0x41, 0x46, 0x3f, 0x70, 0xac,
	0x69, 0x8f, 0x2c, 0xf8, 0xb2, 0x75, 0x64, 0x87, 0x69, 0xcb, 0x28, 0x21, 0x1d, 0x6e, 0x14, 0x62,
	0x4d, 0xff, 0x65, 0x34, 0x85, 0x02, 0xec, 0x10, 0x32, 0xaf, 0x8d, 0xb2, 0xe6, 0x34, 0x3a, 0xed,
	0xb7, 0xc7, 0x1a, 0x4b, 0xef, 0x92, 0xa5, 0x01, 0xb4, 0xa8, 0xeb, 0x37, 0xea, 0xaa, 0xf4, 0x45,
	0x6b, 0x61, 0x2b, 0x5f, 0x8b, 0xa4, 0x68, 0x71, 0xd5, 0x86, 0x4d, 0x4e, 0xaf, 0x92, 0x7c, 0xec,
	0xcf, 0xac, 0x51, 0x12, 0xf3, 0xa3, 0x77, 0xef, 0xe9, 0xbf, 0x16, 0x06, 0xd2, 0xa7, 0x64, 0x4a,
	0x3b, 0xd3, 0x4e, 0x59, 0x13, 0x3a, 0x39, 0x07, 0x60, 0x33, 0x03, 0xce, 0x1a, 0x78, 0x07, 0xd6,
	0xb5, 0x93, 0xb5, 0x55, 0xf6, 0x7a, 0x37, 0xe8, 0x1a, 0x19, 0x4f, 0x26, 0x02, 0x74, 0xab, 0x66,
	0x5c, 0x3e, 0xc5, 0x88, 0xf3, 0x62, 0x07, 0x7f, 0xad, 0x4e, 0x38, 0x18, 0x35, 0x17, 0xf8, 0x87,
	0xd0, 0x78, 0x1a, 0xb5, 0x66, 0x8e, 0x3e, 0xc1, 0xcc, 0xce, 0x4b, 0x98, 0x96, 0x7f, 0x68, 0x69,
	0x12, 0xba, 0x45, 0xca, 0x9d, 0x16, 0xdc, 0x67, 0x2d, 0xa6, 0x0b, 0xc6, 0xfb, 0x36, 0xb4, 0xcb,
	0x1d, 0xe1, 0xb1, 0x16, 0x96, 0xab, 0x94, 0x60, 0x36, 0x10, 0x52, 0x3d, 0xce, 0x93, 0x1c, 0x50,
	0xd2, 0x79, 0x52, 0x00, 0x52, 0xed, 0x8a, 0xd7, 0x75, 0x60, 0xc9, 0x5b, 0x79, 0x58, 0x42, 0xb7,
	0xdf, 0x27, 0x53, 0xa9, 0x12, 0xc6, 0xcd, 0x6e, 0xbc, 0xa9, 0x0f, 0x6d, 0xd6, 0x72, 0x0a, 0xa4,
	0x0d, 0x00, 0xae, 0x99, 0xe8, 0x8e, 0x28, 0xe3, 0x6d, 0x7d, 0xb8, 0xf3, 0x8a, 0x9d, 0x39, 0x05,
	0x95, 0xac, 0xa4, 0x25, 0xb8, 0x2c, 0xe4, 0x36, 0x93, 0xae, 0xad, 0x1b, 0xd1, 0x78, 0x57, 0x1f,
	0xa5, 0x49, 0xe7, 0x53, 0x04, 0x5b, 0x80, 0x5f, 0x97, 0x6e, 0x03, 0x22, 0x68, 0x8d, 0x4c, 0xa7,
	0xa9, 0x63, 0xb0, 0xf1, 0xbe, 0x3e, 0xfc, 0x19, 0xd3, 0x8f, 0x12, 0xef, 0xc0, 0x90, 0x99, 0x49,
	0x53, 0x39, 0xbe, 0xe7, 0x81, 0xcd, 0x8c, 0x0f, 0xc3, 0xdf, 0x8a, 0xa6, 0x70, 0x9b, 0x08, 0xcb,
	0xb2, 0x75, 0x26, 0xd6, 0xc7, 0x11, 0x1e, 0x6e, 0x3a, 0xf3, 0xf4, 0xf0, 0x82, 0x3b, 0x03, 0x06,
	0xe0, 0xa7, 0xfa, 0xb9, 0x26, 0xe0, 0x36, 0x29, 0xab, 0x48, 0xb5, 0xb9, 0x74, 0xb9, 0x6b, 0xc3,
	0xb6, 0x68, 0x19, 0x9f, 0x47, 0x2a, 0x43, 0xa9, 0x0b, 0xdb, 0xd3, 0x28, 0xba, 0x49, 0x4a, 0xe9,
	0x5b, 0x82, 0xa2, 0x2f, 0x23, 0x28, 0xfa, 0x37, 0x85, 0xa9, 0xb9, 0x1b, 0x0d, 0xb2, 0x28, 0xfc,
	0x8c, 0x95, 0x4e, 0xbe, 0x24, 0x9e, 0xdd, 0x38, 0xd7, 0x37, 0xc6, 0x7e, 0x21, 0xfe, 0x37, 0x7e,
	0xfd, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x87, 0x59, 0x72, 0x19, 0xa3, 0x08, 0x00, 0x00,
}
