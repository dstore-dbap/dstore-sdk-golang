// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/om_GetTrolleyAsMatrix_Pu.proto
// DO NOT EDIT!

/*
Package om_GetTrolleyAsMatrix_Pu is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/om_GetTrolleyAsMatrix_Pu.proto

It has these top-level messages:
	Parameters
	Response
*/
package om_GetTrolleyAsMatrix_Pu

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "dstore/values"
import dstore_engine_error "dstore/engine/error"
import dstore_engine_message "dstore/engine/message"
import dstore_engine_metainformation "dstore/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	UniqueId                         *dstore_values.StringValue  `protobuf:"bytes,1,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
	UniqueIdNull                     bool                        `protobuf:"varint,1001,opt,name=unique_id_null,json=uniqueIdNull" json:"unique_id_null,omitempty"`
	PersonId                         *dstore_values.IntegerValue `protobuf:"bytes,2,opt,name=person_id,json=personId" json:"person_id,omitempty"`
	PersonIdNull                     bool                        `protobuf:"varint,1002,opt,name=person_id_null,json=personIdNull" json:"person_id_null,omitempty"`
	CalculatePrices                  *dstore_values.IntegerValue `protobuf:"bytes,3,opt,name=calculate_prices,json=calculatePrices" json:"calculate_prices,omitempty"`
	CalculatePricesNull              bool                        `protobuf:"varint,1003,opt,name=calculate_prices_null,json=calculatePricesNull" json:"calculate_prices_null,omitempty"`
	CheckAvailability                *dstore_values.BooleanValue `protobuf:"bytes,4,opt,name=check_availability,json=checkAvailability" json:"check_availability,omitempty"`
	CheckAvailabilityNull            bool                        `protobuf:"varint,1004,opt,name=check_availability_null,json=checkAvailabilityNull" json:"check_availability_null,omitempty"`
	PriceNodeCharacteristicId        *dstore_values.IntegerValue `protobuf:"bytes,5,opt,name=price_node_characteristic_id,json=priceNodeCharacteristicId" json:"price_node_characteristic_id,omitempty"`
	PriceNodeCharacteristicIdNull    bool                        `protobuf:"varint,1005,opt,name=price_node_characteristic_id_null,json=priceNodeCharacteristicIdNull" json:"price_node_characteristic_id_null,omitempty"`
	RepairEntriesWithSameNodeId      *dstore_values.IntegerValue `protobuf:"bytes,6,opt,name=repair_entries_with_same_node_id,json=repairEntriesWithSameNodeId" json:"repair_entries_with_same_node_id,omitempty"`
	RepairEntriesWithSameNodeIdNull  bool                        `protobuf:"varint,1006,opt,name=repair_entries_with_same_node_id_null,json=repairEntriesWithSameNodeIdNull" json:"repair_entries_with_same_node_id_null,omitempty"`
	DeliveryPersonId                 *dstore_values.IntegerValue `protobuf:"bytes,7,opt,name=delivery_person_id,json=deliveryPersonId" json:"delivery_person_id,omitempty"`
	DeliveryPersonIdNull             bool                        `protobuf:"varint,1007,opt,name=delivery_person_id_null,json=deliveryPersonIdNull" json:"delivery_person_id_null,omitempty"`
	OutputIntoTrolleySurchInterf     *dstore_values.BooleanValue `protobuf:"bytes,8,opt,name=output_into_trolley_surch_interf,json=outputIntoTrolleySurchInterf" json:"output_into_trolley_surch_interf,omitempty"`
	OutputIntoTrolleySurchInterfNull bool                        `protobuf:"varint,1008,opt,name=output_into_trolley_surch_interf_null,json=outputIntoTrolleySurchInterfNull" json:"output_into_trolley_surch_interf_null,omitempty"`
	PaymentTypeId                    *dstore_values.IntegerValue `protobuf:"bytes,9,opt,name=payment_type_id,json=paymentTypeId" json:"payment_type_id,omitempty"`
	PaymentTypeIdNull                bool                        `protobuf:"varint,1009,opt,name=payment_type_id_null,json=paymentTypeIdNull" json:"payment_type_id_null,omitempty"`
	ShippingTypeId                   *dstore_values.IntegerValue `protobuf:"bytes,10,opt,name=shipping_type_id,json=shippingTypeId" json:"shipping_type_id,omitempty"`
	ShippingTypeIdNull               bool                        `protobuf:"varint,1010,opt,name=shipping_type_id_null,json=shippingTypeIdNull" json:"shipping_type_id_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetUniqueId() *dstore_values.StringValue {
	if m != nil {
		return m.UniqueId
	}
	return nil
}

func (m *Parameters) GetPersonId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonId
	}
	return nil
}

func (m *Parameters) GetCalculatePrices() *dstore_values.IntegerValue {
	if m != nil {
		return m.CalculatePrices
	}
	return nil
}

func (m *Parameters) GetCheckAvailability() *dstore_values.BooleanValue {
	if m != nil {
		return m.CheckAvailability
	}
	return nil
}

func (m *Parameters) GetPriceNodeCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PriceNodeCharacteristicId
	}
	return nil
}

func (m *Parameters) GetRepairEntriesWithSameNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.RepairEntriesWithSameNodeId
	}
	return nil
}

func (m *Parameters) GetDeliveryPersonId() *dstore_values.IntegerValue {
	if m != nil {
		return m.DeliveryPersonId
	}
	return nil
}

func (m *Parameters) GetOutputIntoTrolleySurchInterf() *dstore_values.BooleanValue {
	if m != nil {
		return m.OutputIntoTrolleySurchInterf
	}
	return nil
}

func (m *Parameters) GetPaymentTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PaymentTypeId
	}
	return nil
}

func (m *Parameters) GetShippingTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ShippingTypeId
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId                       int32                         `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	VariantTreeNodeId           *dstore_values.IntegerValue   `protobuf:"bytes,10001,opt,name=variant_tree_node_id,json=variantTreeNodeId" json:"variant_tree_node_id,omitempty"`
	ProductTreeNodeId           *dstore_values.IntegerValue   `protobuf:"bytes,10002,opt,name=product_tree_node_id,json=productTreeNodeId" json:"product_tree_node_id,omitempty"`
	PriceNodeCharacteristicId   *dstore_values.IntegerValue   `protobuf:"bytes,10003,opt,name=price_node_characteristic_id,json=priceNodeCharacteristicId" json:"price_node_characteristic_id,omitempty"`
	SurchargeGeneratedByCampIds *dstore_values.StringValue    `protobuf:"bytes,10004,opt,name=surcharge_generated_by_camp_ids,json=surchargeGeneratedByCampIds" json:"surcharge_generated_by_camp_ids,omitempty"`
	YAxisValueIds               *dstore_values.StringValue    `protobuf:"bytes,10005,opt,name=y_axis_value_ids,json=yAxisValueIds" json:"y_axis_value_ids,omitempty"`
	InputDateAndTime            *dstore_values.TimestampValue `protobuf:"bytes,10006,opt,name=input_date_and_time,json=inputDateAndTime" json:"input_date_and_time,omitempty"`
	UnitNettoPrice              *dstore_values.DecimalValue   `protobuf:"bytes,10007,opt,name=unit_netto_price,json=unitNettoPrice" json:"unit_netto_price,omitempty"`
	AbsoluteUnitNettoSurcharge  *dstore_values.DecimalValue   `protobuf:"bytes,10008,opt,name=absolute_unit_netto_surcharge,json=absoluteUnitNettoSurcharge" json:"absolute_unit_netto_surcharge,omitempty"`
	Quantity                    *dstore_values.IntegerValue   `protobuf:"bytes,10009,opt,name=quantity" json:"quantity,omitempty"`
	UnitSymbol                  *dstore_values.StringValue    `protobuf:"bytes,10010,opt,name=unit_symbol,json=unitSymbol" json:"unit_symbol,omitempty"`
	Removed                     *dstore_values.IntegerValue   `protobuf:"bytes,10011,opt,name=removed" json:"removed,omitempty"`
	UnitBruttoPrice             *dstore_values.DecimalValue   `protobuf:"bytes,10012,opt,name=unit_brutto_price,json=unitBruttoPrice" json:"unit_brutto_price,omitempty"`
	YAxisValues                 *dstore_values.StringValue    `protobuf:"bytes,10013,opt,name=y_axis_values,json=yAxisValues" json:"y_axis_values,omitempty"`
	SurchargeReason             *dstore_values.StringValue    `protobuf:"bytes,10014,opt,name=surcharge_reason,json=surchargeReason" json:"surcharge_reason,omitempty"`
	XAxisValue                  *dstore_values.StringValue    `protobuf:"bytes,10015,opt,name=x_axis_value,json=xAxisValue" json:"x_axis_value,omitempty"`
	AbsoluteUnitBruttoSurcharge *dstore_values.DecimalValue   `protobuf:"bytes,10016,opt,name=absolute_unit_brutto_surcharge,json=absoluteUnitBruttoSurcharge" json:"absolute_unit_brutto_surcharge,omitempty"`
	ProductDescription          *dstore_values.StringValue    `protobuf:"bytes,10017,opt,name=product_description,json=productDescription" json:"product_description,omitempty"`
	XAxisValueId                *dstore_values.IntegerValue   `protobuf:"bytes,10018,opt,name=x_axis_value_id,json=xAxisValueId" json:"x_axis_value_id,omitempty"`
	RelativeSurcharge           *dstore_values.DecimalValue   `protobuf:"bytes,10019,opt,name=relative_surcharge,json=relativeSurcharge" json:"relative_surcharge,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetVariantTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.VariantTreeNodeId
	}
	return nil
}

func (m *Response_Row) GetProductTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ProductTreeNodeId
	}
	return nil
}

func (m *Response_Row) GetPriceNodeCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PriceNodeCharacteristicId
	}
	return nil
}

func (m *Response_Row) GetSurchargeGeneratedByCampIds() *dstore_values.StringValue {
	if m != nil {
		return m.SurchargeGeneratedByCampIds
	}
	return nil
}

func (m *Response_Row) GetYAxisValueIds() *dstore_values.StringValue {
	if m != nil {
		return m.YAxisValueIds
	}
	return nil
}

func (m *Response_Row) GetInputDateAndTime() *dstore_values.TimestampValue {
	if m != nil {
		return m.InputDateAndTime
	}
	return nil
}

func (m *Response_Row) GetUnitNettoPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.UnitNettoPrice
	}
	return nil
}

func (m *Response_Row) GetAbsoluteUnitNettoSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.AbsoluteUnitNettoSurcharge
	}
	return nil
}

func (m *Response_Row) GetQuantity() *dstore_values.IntegerValue {
	if m != nil {
		return m.Quantity
	}
	return nil
}

func (m *Response_Row) GetUnitSymbol() *dstore_values.StringValue {
	if m != nil {
		return m.UnitSymbol
	}
	return nil
}

func (m *Response_Row) GetRemoved() *dstore_values.IntegerValue {
	if m != nil {
		return m.Removed
	}
	return nil
}

func (m *Response_Row) GetUnitBruttoPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.UnitBruttoPrice
	}
	return nil
}

func (m *Response_Row) GetYAxisValues() *dstore_values.StringValue {
	if m != nil {
		return m.YAxisValues
	}
	return nil
}

func (m *Response_Row) GetSurchargeReason() *dstore_values.StringValue {
	if m != nil {
		return m.SurchargeReason
	}
	return nil
}

func (m *Response_Row) GetXAxisValue() *dstore_values.StringValue {
	if m != nil {
		return m.XAxisValue
	}
	return nil
}

func (m *Response_Row) GetAbsoluteUnitBruttoSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.AbsoluteUnitBruttoSurcharge
	}
	return nil
}

func (m *Response_Row) GetProductDescription() *dstore_values.StringValue {
	if m != nil {
		return m.ProductDescription
	}
	return nil
}

func (m *Response_Row) GetXAxisValueId() *dstore_values.IntegerValue {
	if m != nil {
		return m.XAxisValueId
	}
	return nil
}

func (m *Response_Row) GetRelativeSurcharge() *dstore_values.DecimalValue {
	if m != nil {
		return m.RelativeSurcharge
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.om_GetTrolleyAsMatrix_Pu.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.om_GetTrolleyAsMatrix_Pu.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.om_GetTrolleyAsMatrix_Pu.Response.Row")
}

var fileDescriptor0 = []byte{
	// 1181 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x57, 0xe9, 0x72, 0xdc, 0xc4,
	0x13, 0xaf, 0xfc, 0xfd, 0xf7, 0xd5, 0xb6, 0x63, 0x5b, 0xb6, 0x89, 0xe2, 0x8d, 0x13, 0x13, 0xca,
	0x14, 0x9f, 0xd6, 0x90, 0x50, 0x84, 0x0f, 0x50, 0x94, 0x2f, 0xc2, 0x02, 0x5e, 0xb6, 0xd6, 0x06,
	0x0a, 0x0a, 0x6a, 0x6a, 0x56, 0x9a, 0xac, 0xa7, 0xd0, 0x6a, 0x94, 0x19, 0x69, 0xbd, 0xfb, 0x16,
	0xdc, 0xf7, 0xcd, 0x8b, 0xf0, 0x1a, 0x54, 0xf1, 0x02, 0xdc, 0xc7, 0x13, 0xd0, 0x33, 0x23, 0xed,
	0x21, 0x27, 0x96, 0x28, 0xbe, 0x24, 0x9e, 0x9d, 0xfe, 0x1d, 0xea, 0xe9, 0xe9, 0x96, 0xe0, 0x96,
	0xaf, 0x62, 0x21, 0xd9, 0x36, 0x0b, 0xdb, 0x3c, 0x64, 0xdb, 0x91, 0x14, 0x1e, 0xf3, 0x13, 0xc9,
	0xd4, 0xb6, 0xe8, 0x90, 0xdb, 0x2c, 0x3e, 0x96, 0x22, 0x08, 0x58, 0x7f, 0x47, 0x1d, 0xd2, 0x58,
	0xf2, 0x1e, 0x69, 0x24, 0x55, 0x8c, 0x89, 0x85, 0xf3, 0xb0, 0x05, 0x56, 0x2d, 0xb0, 0x7a, 0xbf,
	0xe8, 0xf5, 0x95, 0x54, 0xa0, 0x4b, 0x83, 0x84, 0x29, 0x0b, 0x5e, 0xbf, 0x3c, 0xae, 0xca, 0xa4,
	0x14, 0x32, 0xdd, 0xaa, 0x8c, 0x6f, 0x75, 0x98, 0x52, 0xb4, 0xcd, 0xd2, 0xcd, 0x87, 0xf2, 0x9b,
	0x31, 0xe5, 0xe1, 0x1d, 0x21, 0x3b, 0x34, 0xe6, 0x22, 0xb4, 0x41, 0xd7, 0x7f, 0x00, 0x80, 0x06,
	0x95, 0x14, 0x77, 0x99, 0x54, 0xce, 0x2d, 0x98, 0x4d, 0x42, 0x7e, 0x37, 0x61, 0x84, 0xfb, 0xee,
	0x85, 0xcd, 0x0b, 0x8f, 0xcc, 0xdd, 0x58, 0xaf, 0xa6, 0xe6, 0x53, 0x53, 0x0a, 0xcd, 0x86, 0xed,
	0x57, 0xf4, 0xa2, 0x39, 0x63, 0x83, 0x6b, 0xbe, 0xb3, 0x05, 0x17, 0x07, 0x40, 0x12, 0x26, 0x41,
	0xe0, 0xfe, 0x34, 0x8d, 0xf0, 0x99, 0xe6, 0x7c, 0x16, 0x52, 0xc7, 0x1f, 0x9d, 0x27, 0x61, 0x36,
	0x42, 0x1d, 0x11, 0x6a, 0xfe, 0xff, 0x19, 0xfe, 0x4a, 0x8e, 0x9f, 0x87, 0x31, 0x6b, 0x33, 0x99,
	0x0a, 0xd8, 0x68, 0x2b, 0x30, 0x40, 0x5a, 0x81, 0x9f, 0x53, 0x81, 0x2c, 0xc4, 0x08, 0x3c, 0x0b,
	0x4b, 0x1e, 0x0d, 0xbc, 0x24, 0xa0, 0x31, 0x23, 0x91, 0xe4, 0x1e, 0x53, 0xee, 0x44, 0xb1, 0xce,
	0xe2, 0x00, 0xd4, 0x30, 0x18, 0xe7, 0x26, 0xac, 0xe5, 0x79, 0xac, 0xea, 0x2f, 0x56, 0x75, 0x25,
	0x07, 0x30, 0xe2, 0xcf, 0x83, 0xe3, 0x9d, 0x30, 0xef, 0x2d, 0x42, 0xbb, 0x94, 0x07, 0xb4, 0xc5,
	0x03, 0x1e, 0xf7, 0xdd, 0xff, 0xdf, 0x53, 0xbe, 0x25, 0x44, 0xc0, 0x68, 0x68, 0xe5, 0x97, 0x0d,
	0x6c, 0x67, 0x04, 0x85, 0x27, 0x71, 0xe9, 0x2c, 0x97, 0xb5, 0xf0, 0xab, 0xb5, 0xb0, 0x76, 0x06,
	0x64, 0x4c, 0xbc, 0x01, 0x57, 0x8c, 0x5f, 0x12, 0x0a, 0x9f, 0x11, 0xef, 0x04, 0x0f, 0xd7, 0xc3,
	0xb3, 0xe5, 0x2a, 0xe6, 0x9e, 0xce, 0xfa, 0x64, 0x71, 0x36, 0x2e, 0x1b, 0x82, 0x3a, 0xe2, 0xf7,
	0xc6, 0xe0, 0x78, 0x0c, 0x35, 0x78, 0xf0, 0x3c, 0x76, 0x6b, 0xf0, 0x37, 0x6b, 0x70, 0xe3, 0xbe,
	0x34, 0xc6, 0x68, 0x0b, 0x36, 0x25, 0x8b, 0x28, 0x97, 0x84, 0x85, 0x58, 0x53, 0x98, 0xe0, 0x53,
	0x1e, 0x9f, 0x10, 0x85, 0xb5, 0x68, 0xd9, 0xd1, 0xec, 0x54, 0xb1, 0xd9, 0x8a, 0x25, 0x39, 0xb0,
	0x1c, 0xaf, 0x22, 0xc5, 0x11, 0x32, 0x68, 0x55, 0xb4, 0xfb, 0x12, 0x6c, 0x15, 0x69, 0x58, 0xcb,
	0xbf, 0x5b, 0xcb, 0xd7, 0xce, 0x21, 0x33, 0xa6, 0x6b, 0xe0, 0xf8, 0x2c, 0xe0, 0x5d, 0x26, 0xfb,
	0x64, 0x58, 0xc9, 0xd3, 0xc5, 0x36, 0x97, 0x32, 0x58, 0x23, 0xab, 0xe8, 0x27, 0xe0, 0xd2, 0x59,
	0x2a, 0xeb, 0xe6, 0x0f, 0xeb, 0x66, 0x35, 0x8f, 0x31, 0x16, 0x3c, 0xd8, 0x14, 0x49, 0x1c, 0x25,
	0x31, 0x41, 0x01, 0x41, 0x62, 0xdb, 0x46, 0x88, 0x4a, 0xa4, 0x77, 0xa2, 0x7f, 0x62, 0xf2, 0x8e,
	0x3b, 0x53, 0x5c, 0x73, 0x57, 0x2c, 0x49, 0x0d, 0x39, 0xd2, 0x4e, 0x74, 0xa4, 0x19, 0x6a, 0x86,
	0xc0, 0x69, 0xc0, 0x56, 0x91, 0x88, 0xb5, 0xfa, 0xa7, 0xb5, 0xba, 0x79, 0x1e, 0x9b, 0xb1, 0xbd,
	0x07, 0x8b, 0x11, 0xed, 0x77, 0xf0, 0x1c, 0x48, 0xdc, 0x8f, 0xcc, 0xe9, 0xce, 0x16, 0xa7, 0x6d,
	0x21, 0xc5, 0x1c, 0x23, 0x04, 0x73, 0xf6, 0x28, 0xac, 0xe6, 0x48, 0xac, 0x8b, 0xbf, 0xac, 0x8b,
	0xe5, 0xb1, 0x68, 0x23, 0x7b, 0x00, 0x4b, 0xea, 0x84, 0x47, 0x11, 0xf6, 0xac, 0x81, 0x2e, 0x14,
	0xeb, 0x5e, 0xcc, 0x40, 0xa9, 0xf0, 0x0d, 0x58, 0xcb, 0xd3, 0x58, 0xe5, 0xbf, 0xad, 0xb2, 0x33,
	0x1e, 0xaf, 0xa5, 0xaf, 0xff, 0xb8, 0x00, 0x33, 0x4d, 0xa6, 0x22, 0x11, 0x2a, 0x86, 0xce, 0x27,
	0x4d, 0xe7, 0xce, 0x77, 0xd5, 0x74, 0x24, 0xd8, 0xae, 0x7e, 0xa0, 0xff, 0x6d, 0xda, 0x40, 0xe7,
	0x35, 0x58, 0xd2, 0x3d, 0x9b, 0x8c, 0x34, 0x6d, 0x6c, 0x99, 0x13, 0x08, 0xae, 0xe6, 0xc0, 0xf9,
	0xd6, 0x7e, 0x88, 0xeb, 0xda, 0x70, 0xdd, 0x5c, 0xec, 0x8c, 0xff, 0x80, 0x6d, 0x78, 0x3a, 0x9d,
	0x15, 0xd8, 0x1c, 0x35, 0xe3, 0xd5, 0x33, 0x8c, 0x76, 0x92, 0x1c, 0xda, 0xff, 0x9b, 0x59, 0x38,
	0xf6, 0xd7, 0x09, 0x29, 0x4e, 0xb1, 0xa7, 0x69, 0xd4, 0xe3, 0xd5, 0x72, 0x73, 0xad, 0x9a, 0x65,
	0xa1, 0xda, 0x14, 0xa7, 0x4d, 0x4d, 0xb0, 0xfe, 0xfd, 0x1c, 0x4c, 0xe0, 0xc2, 0x79, 0x00, 0xa6,
	0x70, 0xa9, 0x0f, 0xe5, 0xed, 0x3a, 0x26, 0x66, 0xb2, 0x39, 0x89, 0x4b, 0xcc, 0xf7, 0x21, 0xac,
	0x76, 0xa9, 0xe4, 0x54, 0x1f, 0xb4, 0x64, 0xc3, 0x86, 0xf0, 0x4e, 0xbd, 0xf8, 0xec, 0x96, 0x53,
	0xe4, 0x31, 0x02, 0xd3, 0x3e, 0x80, 0x74, 0x38, 0xef, 0xfc, 0xc4, 0xcb, 0xd1, 0xbd, 0x5b, 0x86,
	0x2e, 0x45, 0x8e, 0xd0, 0xbd, 0x59, 0xd0, 0x63, 0xdf, 0xab, 0xff, 0xa7, 0x26, 0x4b, 0xe1, 0x9a,
	0xb9, 0x68, 0x54, 0xb6, 0x19, 0x69, 0xb3, 0x90, 0x49, 0x9c, 0x33, 0x3e, 0x69, 0xf5, 0x89, 0x47,
	0x3b, 0x11, 0x0a, 0x28, 0xf7, 0xfd, 0x7a, 0xe1, 0x70, 0xae, 0x0c, 0x38, 0x6e, 0x67, 0x14, 0xbb,
	0xfd, 0x3d, 0x24, 0xa8, 0xf9, 0xca, 0xd9, 0x87, 0xa5, 0x3e, 0xa1, 0x3d, 0xae, 0x88, 0x41, 0x1a,
	0xce, 0x0f, 0x8a, 0x39, 0x17, 0xfa, 0x3b, 0x88, 0x31, 0x7f, 0x6b, 0x96, 0x43, 0x58, 0xe1, 0xa1,
	0x6e, 0x12, 0xbe, 0x1e, 0x93, 0x34, 0xf4, 0x49, 0xcc, 0x3b, 0xcc, 0xfd, 0xd0, 0x12, 0x6d, 0xe4,
	0x88, 0xf4, 0x9e, 0x8a, 0xd1, 0x40, 0xda, 0x11, 0x0d, 0x74, 0x1f, 0x91, 0x3b, 0xa1, 0x7f, 0x8c,
	0x7b, 0x7a, 0x78, 0xe3, 0xdb, 0x42, 0x4c, 0x42, 0x16, 0x63, 0xcf, 0x31, 0xf9, 0x71, 0x3f, 0xba,
	0x77, 0x2a, 0x7d, 0xe6, 0xf1, 0x0e, 0x0d, 0xd2, 0xcb, 0xaa, 0x51, 0x75, 0x0d, 0x32, 0xc3, 0xd8,
	0x21, 0xb0, 0x41, 0x5b, 0x4a, 0x04, 0x09, 0x9a, 0x1a, 0x21, 0x1c, 0xe4, 0xc3, 0xfd, 0xb8, 0x04,
	0xe9, 0x7a, 0x46, 0xf1, 0x72, 0x46, 0x7e, 0x94, 0xe1, 0xf1, 0xfe, 0xcc, 0xdc, 0x4d, 0xb0, 0xc2,
	0xf4, 0x78, 0xff, 0xa4, 0xc4, 0x59, 0x0f, 0xa2, 0x9d, 0xa7, 0x60, 0xce, 0x38, 0x52, 0xfd, 0x4e,
	0x4b, 0x04, 0xee, 0xa7, 0xc5, 0x29, 0x07, 0x1d, 0x7f, 0x64, 0xc2, 0x71, 0x64, 0x4c, 0x4b, 0xd6,
	0x11, 0x5d, 0xe6, 0xbb, 0x9f, 0x95, 0x90, 0xcd, 0x82, 0x9d, 0xe7, 0x60, 0xd9, 0xa8, 0xb6, 0x64,
	0x32, 0xcc, 0xec, 0xe7, 0x25, 0x92, 0xb0, 0xa8, 0x61, 0xbb, 0x06, 0x65, 0x53, 0xfb, 0x0c, 0x2c,
	0x8c, 0xd6, 0x8d, 0x72, 0xbf, 0x28, 0x7e, 0x82, 0xb9, 0x61, 0xd1, 0x28, 0x7d, 0xc6, 0xc3, 0xda,
	0x96, 0x8c, 0xe2, 0x5c, 0x73, 0xbf, 0x2c, 0xe6, 0x58, 0x1c, 0x80, 0x9a, 0x06, 0xe3, 0x3c, 0x0d,
	0xf3, 0xbd, 0x11, 0x23, 0xee, 0x57, 0x25, 0x32, 0xd9, 0x1b, 0xf8, 0xc0, 0x2b, 0x76, 0x75, 0xbc,
	0x44, 0xd2, 0xd4, 0x0c, 0x6b, 0xe4, 0xeb, 0x12, 0xe9, 0xa9, 0x8c, 0xd6, 0x88, 0x4d, 0xd3, 0xb0,
	0x48, 0x5e, 0x84, 0x95, 0xac, 0xe7, 0xf8, 0x4c, 0x79, 0x92, 0x47, 0xa6, 0x85, 0x7f, 0x53, 0x6c,
	0xd4, 0x49, 0x71, 0xfb, 0x43, 0x98, 0x1e, 0x9f, 0xbd, 0xf1, 0x0b, 0xeb, 0x7e, 0x5b, 0xa2, 0x04,
	0xe6, 0x7b, 0x23, 0x17, 0xd6, 0x79, 0x01, 0x1c, 0xc9, 0xf0, 0xa5, 0x15, 0x5f, 0x2a, 0x46, 0x9e,
	0xf4, 0xbb, 0x12, 0x4f, 0xba, 0x9c, 0xe1, 0x06, 0xcf, 0xb7, 0xdb, 0x80, 0x0a, 0x17, 0xb9, 0x09,
	0x30, 0xfc, 0x24, 0x7a, 0xfd, 0xb1, 0x7f, 0xfd, 0xb1, 0xd4, 0x9a, 0x32, 0xdf, 0x24, 0x37, 0xff,
	0x09, 0x00, 0x00, 0xff, 0xff, 0x8b, 0x2b, 0x6c, 0x80, 0x68, 0x0d, 0x00, 0x00,
}
