// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/pm_GetPersonCharacteristics_Pu.proto
// DO NOT EDIT!

/*
Package pm_GetPersonCharacteristics_Pu is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/pm_GetPersonCharacteristics_Pu.proto

It has these top-level messages:
	Parameters
	Response
*/
package pm_GetPersonCharacteristics_Pu

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "dstore/values"
import dstore_engine_error "dstore/engine/error"
import dstore_engine_message "dstore/engine/message"
import dstore_engine_metainformation "dstore/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	LanguageId                 *dstore_values.IntegerValue `protobuf:"bytes,1,opt,name=language_id,json=languageId" json:"language_id,omitempty"`
	LanguageIdNull             bool                        `protobuf:"varint,1001,opt,name=language_id_null,json=languageIdNull" json:"language_id_null,omitempty"`
	PersonTypeId               *dstore_values.IntegerValue `protobuf:"bytes,2,opt,name=person_type_id,json=personTypeId" json:"person_type_id,omitempty"`
	PersonTypeIdNull           bool                        `protobuf:"varint,1002,opt,name=person_type_id_null,json=personTypeIdNull" json:"person_type_id_null,omitempty"`
	PersonCharacCategoryId     *dstore_values.IntegerValue `protobuf:"bytes,3,opt,name=person_charac_category_id,json=personCharacCategoryId" json:"person_charac_category_id,omitempty"`
	PersonCharacCategoryIdNull bool                        `protobuf:"varint,1003,opt,name=person_charac_category_id_null,json=personCharacCategoryIdNull" json:"person_charac_category_id_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetLanguageId() *dstore_values.IntegerValue {
	if m != nil {
		return m.LanguageId
	}
	return nil
}

func (m *Parameters) GetPersonTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonTypeId
	}
	return nil
}

func (m *Parameters) GetPersonCharacCategoryId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonCharacCategoryId
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId                        int32                       `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	Description                  *dstore_values.StringValue  `protobuf:"bytes,10001,opt,name=description" json:"description,omitempty"`
	PrecisionValue               *dstore_values.IntegerValue `protobuf:"bytes,10002,opt,name=precision_value,json=precisionValue" json:"precision_value,omitempty"`
	Modify                       *dstore_values.IntegerValue `protobuf:"bytes,10003,opt,name=modify" json:"modify,omitempty"`
	MaxLength                    *dstore_values.IntegerValue `protobuf:"bytes,10004,opt,name=max_length,json=maxLength" json:"max_length,omitempty"`
	SortNo                       *dstore_values.IntegerValue `protobuf:"bytes,10005,opt,name=sort_no,json=sortNo" json:"sort_no,omitempty"`
	PredefinedValues             *dstore_values.BooleanValue `protobuf:"bytes,10006,opt,name=predefined_values,json=predefinedValues" json:"predefined_values,omitempty"`
	ReadAccessRestrictionPattern *dstore_values.StringValue  `protobuf:"bytes,10007,opt,name=read_access_restriction_pattern,json=readAccessRestrictionPattern" json:"read_access_restriction_pattern,omitempty"`
	Format                       *dstore_values.StringValue  `protobuf:"bytes,10008,opt,name=format" json:"format,omitempty"`
	Required                     *dstore_values.BooleanValue `protobuf:"bytes,10009,opt,name=required" json:"required,omitempty"`
	BasicFieldType               *dstore_values.StringValue  `protobuf:"bytes,10010,opt,name=basic_field_type,json=basicFieldType" json:"basic_field_type,omitempty"`
	Visible                      *dstore_values.BooleanValue `protobuf:"bytes,10011,opt,name=visible" json:"visible,omitempty"`
	BasicFieldTypeId             *dstore_values.IntegerValue `protobuf:"bytes,10012,opt,name=basic_field_type_id,json=basicFieldTypeId" json:"basic_field_type_id,omitempty"`
	Id                           *dstore_values.IntegerValue `protobuf:"bytes,10013,opt,name=id" json:"id,omitempty"`
	RequiredForCreate            *dstore_values.BooleanValue `protobuf:"bytes,10014,opt,name=required_for_create,json=requiredForCreate" json:"required_for_create,omitempty"`
	LanguageId                   *dstore_values.IntegerValue `protobuf:"bytes,10015,opt,name=language_id,json=languageId" json:"language_id,omitempty"`
	PersonCharacCategoryId       *dstore_values.IntegerValue `protobuf:"bytes,20007,opt,name=person_charac_category_id,json=personCharacCategoryId" json:"person_charac_category_id,omitempty"`
	CategoryDescription          *dstore_values.StringValue  `protobuf:"bytes,20014,opt,name=category_description,json=categoryDescription" json:"category_description,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetDescription() *dstore_values.StringValue {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *Response_Row) GetPrecisionValue() *dstore_values.IntegerValue {
	if m != nil {
		return m.PrecisionValue
	}
	return nil
}

func (m *Response_Row) GetModify() *dstore_values.IntegerValue {
	if m != nil {
		return m.Modify
	}
	return nil
}

func (m *Response_Row) GetMaxLength() *dstore_values.IntegerValue {
	if m != nil {
		return m.MaxLength
	}
	return nil
}

func (m *Response_Row) GetSortNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.SortNo
	}
	return nil
}

func (m *Response_Row) GetPredefinedValues() *dstore_values.BooleanValue {
	if m != nil {
		return m.PredefinedValues
	}
	return nil
}

func (m *Response_Row) GetReadAccessRestrictionPattern() *dstore_values.StringValue {
	if m != nil {
		return m.ReadAccessRestrictionPattern
	}
	return nil
}

func (m *Response_Row) GetFormat() *dstore_values.StringValue {
	if m != nil {
		return m.Format
	}
	return nil
}

func (m *Response_Row) GetRequired() *dstore_values.BooleanValue {
	if m != nil {
		return m.Required
	}
	return nil
}

func (m *Response_Row) GetBasicFieldType() *dstore_values.StringValue {
	if m != nil {
		return m.BasicFieldType
	}
	return nil
}

func (m *Response_Row) GetVisible() *dstore_values.BooleanValue {
	if m != nil {
		return m.Visible
	}
	return nil
}

func (m *Response_Row) GetBasicFieldTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.BasicFieldTypeId
	}
	return nil
}

func (m *Response_Row) GetId() *dstore_values.IntegerValue {
	if m != nil {
		return m.Id
	}
	return nil
}

func (m *Response_Row) GetRequiredForCreate() *dstore_values.BooleanValue {
	if m != nil {
		return m.RequiredForCreate
	}
	return nil
}

func (m *Response_Row) GetLanguageId() *dstore_values.IntegerValue {
	if m != nil {
		return m.LanguageId
	}
	return nil
}

func (m *Response_Row) GetPersonCharacCategoryId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonCharacCategoryId
	}
	return nil
}

func (m *Response_Row) GetCategoryDescription() *dstore_values.StringValue {
	if m != nil {
		return m.CategoryDescription
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.pm_GetPersonCharacteristics_Pu.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.pm_GetPersonCharacteristics_Pu.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.pm_GetPersonCharacteristics_Pu.Response.Row")
}

var fileDescriptor0 = []byte{
	// 797 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0xdd, 0x4e, 0xdb, 0x48,
	0x14, 0x56, 0xc8, 0x92, 0xc0, 0xc9, 0x2a, 0x84, 0xc9, 0x0a, 0x99, 0xb0, 0x62, 0x57, 0xec, 0xcd,
	0xae, 0x84, 0xcc, 0x6a, 0xd9, 0xfe, 0xa8, 0x2d, 0x17, 0x34, 0x85, 0x0a, 0x15, 0xd2, 0xc8, 0xaa,
	0x50, 0xdb, 0x9b, 0x91, 0x63, 0x4f, 0x82, 0x25, 0xc7, 0xe3, 0xce, 0x38, 0x50, 0x1e, 0xa0, 0xf7,
	0xfd, 0xff, 0x85, 0xf6, 0xb2, 0x77, 0x7d, 0x85, 0x3e, 0x4f, 0xdb, 0x97, 0xe8, 0xf1, 0x8c, 0xf3,
	0x5b, 0x4a, 0x0c, 0x37, 0x89, 0x8e, 0xe7, 0xfb, 0xbe, 0x73, 0xe6, 0x7c, 0x67, 0xc6, 0x86, 0x35,
	0x57, 0x46, 0x5c, 0xb0, 0x15, 0x16, 0xb4, 0xbc, 0x80, 0xad, 0x84, 0x82, 0x3b, 0xcc, 0xed, 0x08,
	0x26, 0x57, 0xc2, 0x36, 0xbd, 0xc9, 0xa2, 0x3a, 0x13, 0x92, 0x07, 0xd5, 0x3d, 0x5b, 0xd8, 0x4e,
	0xc4, 0x84, 0x27, 0x23, 0xcf, 0x91, 0xb4, 0xde, 0x31, 0x11, 0x19, 0x71, 0xb2, 0xac, 0xe9, 0xa6,
	0xa6, 0x9b, 0xa7, 0x73, 0x2a, 0xe5, 0x24, 0xd9, 0xbe, 0xed, 0x77, 0x98, 0xd4, 0x12, 0x95, 0xf9,
	0xe1, 0x0a, 0x98, 0x10, 0x5c, 0x24, 0x4b, 0x0b, 0xc3, 0x4b, 0x6d, 0x26, 0xa5, 0xdd, 0x62, 0xc9,
	0xe2, 0x5f, 0xa3, 0x8b, 0x91, 0xed, 0x05, 0x4d, 0x2e, 0xda, 0x76, 0xe4, 0xf1, 0x40, 0x83, 0x96,
	0x1e, 0x65, 0x01, 0xea, 0x58, 0x07, 0xae, 0x62, 0x51, 0xe4, 0x1a, 0x14, 0x7c, 0x3b, 0x68, 0x75,
	0x50, 0x85, 0x7a, 0xae, 0x91, 0xf9, 0x33, 0xf3, 0x77, 0xe1, 0xbf, 0x05, 0x33, 0xd9, 0x44, 0x52,
	0x96, 0x17, 0x44, 0xac, 0xc5, 0xc4, 0x6e, 0x1c, 0x59, 0xd0, 0xc5, 0x6f, 0xb9, 0xe4, 0x1f, 0x28,
	0x0d, 0xb0, 0x69, 0xd0, 0xf1, 0x7d, 0xe3, 0x4b, 0x1e, 0x35, 0xa6, 0xac, 0x62, 0x1f, 0x56, 0xc3,
	0xc7, 0x64, 0x1d, 0x8a, 0xa1, 0xea, 0x02, 0x8d, 0x0e, 0x43, 0x95, 0x6b, 0x62, 0x7c, 0xae, 0x5f,
	0x35, 0xe5, 0x0e, 0x32, 0x30, 0x9b, 0x09, 0xe5, 0x61, 0x09, 0x9d, 0xf0, 0xab, 0x4e, 0x58, 0x1a,
	0xc4, 0xaa, 0x94, 0xbb, 0x30, 0x9f, 0xe0, 0x1d, 0xd5, 0x79, 0xea, 0xd8, 0xa8, 0xcd, 0xc5, 0x61,
	0x9c, 0x3d, 0x3b, 0x3e, 0xfb, 0x5c, 0x38, 0x60, 0x5b, 0x35, 0xe1, 0x62, 0x1d, 0x55, 0x58, 0xfc,
	0xa9, 0xae, 0x2e, 0xe9, 0x9b, 0x2e, 0xa9, 0x72, 0xb2, 0x40, 0x5c, 0xdc, 0xd2, 0xe7, 0x02, 0x4c,
	0x59, 0x4c, 0x86, 0x3c, 0x90, 0x8c, 0xfc, 0x0b, 0x93, 0xca, 0xe5, 0xa4, 0xff, 0x15, 0x73, 0x78,
	0x88, 0xf4, 0x04, 0x6c, 0xc4, 0xbf, 0x96, 0x06, 0x92, 0x7b, 0x50, 0x8a, 0xfd, 0xa5, 0x03, 0x06,
	0x63, 0x43, 0xb3, 0x48, 0x36, 0x47, 0xc8, 0xa3, 0x63, 0xb0, 0x83, 0xf1, 0x56, 0x3f, 0xb6, 0x66,
	0xda, 0xc3, 0x0f, 0xc8, 0x65, 0xc8, 0x27, 0x73, 0x85, 0x4d, 0x8a, 0x15, 0x17, 0x7f, 0x50, 0xd4,
	0x53, 0xb7, 0xa3, 0xff, 0xad, 0x2e, 0x9c, 0x6c, 0x43, 0x56, 0xf0, 0x03, 0xe3, 0x17, 0xc5, 0xba,
	0x62, 0x9e, 0xe5, 0x24, 0x98, 0xdd, 0x5e, 0x98, 0x16, 0x3f, 0xb0, 0x62, 0x99, 0xca, 0xf1, 0x34,
	0x64, 0x31, 0x20, 0x73, 0x90, 0xc3, 0x30, 0xf6, 0xec, 0x71, 0x0d, 0xdb, 0x33, 0x69, 0x4d, 0x62,
	0x88, 0x36, 0xac, 0x41, 0xc1, 0x65, 0xd2, 0x11, 0x5e, 0xa8, 0x76, 0xff, 0xa4, 0x36, 0xdc, 0xbb,
	0xc4, 0x51, 0x19, 0x09, 0x2f, 0x68, 0x69, 0x43, 0x07, 0xf1, 0x64, 0x03, 0x66, 0x42, 0xc1, 0x1c,
	0x4f, 0x62, 0x40, 0x15, 0xd8, 0x78, 0x5a, 0x1b, 0x3f, 0x14, 0xc5, 0x1e, 0x49, 0xc5, 0xe4, 0x7f,
	0xc8, 0xb5, 0xb9, 0xeb, 0x35, 0x0f, 0x8d, 0x67, 0x29, 0xd8, 0x09, 0x96, 0x5c, 0x05, 0x68, 0xdb,
	0x0f, 0xa9, 0x8f, 0xbd, 0x89, 0xf6, 0x8c, 0xe7, 0x29, 0x98, 0xd3, 0x88, 0xdf, 0x56, 0x70, 0x72,
	0x01, 0xf2, 0x92, 0x8b, 0x88, 0x06, 0xdc, 0x78, 0x91, 0x26, 0x67, 0x0c, 0xae, 0x71, 0xb2, 0x05,
	0xb3, 0x58, 0xbb, 0xcb, 0x9a, 0xe8, 0x86, 0xab, 0x77, 0x2c, 0x8d, 0x97, 0x27, 0x0b, 0x34, 0x38,
	0xf7, 0x99, 0xad, 0xb7, 0x88, 0x27, 0xab, 0x47, 0x53, 0x0f, 0x24, 0x69, 0xc0, 0x1f, 0x82, 0xd9,
	0x2e, 0xb5, 0x1d, 0x07, 0xad, 0xa7, 0x78, 0x39, 0x62, 0x97, 0x9d, 0xb8, 0xad, 0x34, 0xb4, 0x23,
	0xf4, 0x35, 0x30, 0x5e, 0x8d, 0xb7, 0xe3, 0xf7, 0x58, 0x63, 0x5d, 0x49, 0x58, 0x7d, 0x85, 0xba,
	0x16, 0x20, 0xab, 0x90, 0xd3, 0x33, 0x69, 0xbc, 0x1e, 0x2f, 0x95, 0x40, 0x71, 0x76, 0xa7, 0x04,
	0x7b, 0xd0, 0xf1, 0xb0, 0x60, 0xe3, 0x4d, 0x8a, 0xad, 0xf5, 0xd0, 0x38, 0x0e, 0xa5, 0x86, 0x2d,
	0x3d, 0x87, 0x36, 0x3d, 0xe6, 0xbb, 0xea, 0x86, 0x31, 0xde, 0x8e, 0x4f, 0x5c, 0x54, 0xa4, 0xcd,
	0x98, 0x13, 0xdf, 0x3c, 0xe4, 0x22, 0xe4, 0xf7, 0x71, 0x3a, 0x1a, 0x3e, 0x33, 0xde, 0xa5, 0xc8,
	0xdf, 0x05, 0x93, 0x5b, 0x50, 0x1e, 0x4d, 0x1f, 0x4f, 0xfc, 0x51, 0x0a, 0x7f, 0x4b, 0xc3, 0x25,
	0xe0, 0xc9, 0x58, 0x86, 0x09, 0xe4, 0x1e, 0xa7, 0xe0, 0x22, 0x0e, 0x4f, 0x6d, 0xb9, 0xdb, 0x05,
	0x8a, 0x6d, 0xa4, 0x0e, 0xda, 0x12, 0x31, 0xe3, 0x7d, 0x8a, 0xf2, 0x67, 0xbb, 0xc4, 0x4d, 0x2e,
	0xaa, 0x8a, 0x16, 0x9f, 0xca, 0xc1, 0x17, 0xca, 0x87, 0xda, 0xd9, 0xde, 0x28, 0x77, 0x4f, 0xbb,
	0xb3, 0x3f, 0x1e, 0x65, 0xce, 0x7f, 0x6b, 0xdf, 0x86, 0xdf, 0x7a, 0x5a, 0x83, 0xf7, 0xc6, 0xa7,
	0xa3, 0xcc, 0x58, 0x97, 0xcb, 0x5d, 0xe6, 0x8d, 0x3e, 0xf1, 0xfa, 0x2e, 0x2c, 0x78, 0x7c, 0xf4,
	0x92, 0xeb, 0x7d, 0x2d, 0xdc, 0xbf, 0x74, 0xce, 0xef, 0x88, 0x46, 0x4e, 0xbd, 0xa8, 0x57, 0xbf,
	0x07, 0x00, 0x00, 0xff, 0xff, 0xb9, 0xf5, 0x4e, 0xde, 0x89, 0x08, 0x00, 0x00,
}
