// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/do_GetProcedureNames_Ad.proto
// DO NOT EDIT!

/*
Package do_GetProcedureNames_Ad is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/do_GetProcedureNames_Ad.proto

It has these top-level messages:
	Parameters
	Response
*/
package do_GetProcedureNames_Ad

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "dstore/values"
import dstore_engine_error "dstore/engine/error"
import dstore_engine_message "dstore/engine/message"
import dstore_engine_metainformation "dstore/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	ProcedureCategoryId         *dstore_values.IntegerValue `protobuf:"bytes,1,opt,name=procedure_category_id,json=procedureCategoryId" json:"procedure_category_id,omitempty"`
	ProcedureCategoryIdNull     bool                        `protobuf:"varint,1001,opt,name=procedure_category_id_null,json=procedureCategoryIdNull" json:"procedure_category_id_null,omitempty"`
	ProcedureTypeId             *dstore_values.IntegerValue `protobuf:"bytes,2,opt,name=procedure_type_id,json=procedureTypeId" json:"procedure_type_id,omitempty"`
	ProcedureTypeIdNull         bool                        `protobuf:"varint,1002,opt,name=procedure_type_id_null,json=procedureTypeIdNull" json:"procedure_type_id_null,omitempty"`
	ActualVersion               *dstore_values.StringValue  `protobuf:"bytes,3,opt,name=actual_version,json=actualVersion" json:"actual_version,omitempty"`
	ActualVersionNull           bool                        `protobuf:"varint,1003,opt,name=actual_version_null,json=actualVersionNull" json:"actual_version_null,omitempty"`
	ProcedureName               *dstore_values.StringValue  `protobuf:"bytes,4,opt,name=procedure_name,json=procedureName" json:"procedure_name,omitempty"`
	ProcedureNameNull           bool                        `protobuf:"varint,1004,opt,name=procedure_name_null,json=procedureNameNull" json:"procedure_name_null,omitempty"`
	GetProcsWithMissingDocu     *dstore_values.BooleanValue `protobuf:"bytes,5,opt,name=get_procs_with_missing_docu,json=getProcsWithMissingDocu" json:"get_procs_with_missing_docu,omitempty"`
	GetProcsWithMissingDocuNull bool                        `protobuf:"varint,1005,opt,name=get_procs_with_missing_docu_null,json=getProcsWithMissingDocuNull" json:"get_procs_with_missing_docu_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetProcedureCategoryId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ProcedureCategoryId
	}
	return nil
}

func (m *Parameters) GetProcedureTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ProcedureTypeId
	}
	return nil
}

func (m *Parameters) GetActualVersion() *dstore_values.StringValue {
	if m != nil {
		return m.ActualVersion
	}
	return nil
}

func (m *Parameters) GetProcedureName() *dstore_values.StringValue {
	if m != nil {
		return m.ProcedureName
	}
	return nil
}

func (m *Parameters) GetGetProcsWithMissingDocu() *dstore_values.BooleanValue {
	if m != nil {
		return m.GetProcsWithMissingDocu
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId               int32                       `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	ProcedureType       *dstore_values.StringValue  `protobuf:"bytes,10001,opt,name=procedure_type,json=procedureType" json:"procedure_type,omitempty"`
	ProcedureCategoryId *dstore_values.IntegerValue `protobuf:"bytes,10002,opt,name=procedure_category_id,json=procedureCategoryId" json:"procedure_category_id,omitempty"`
	ProcedureFunction   *dstore_values.StringValue  `protobuf:"bytes,10003,opt,name=procedure_function,json=procedureFunction" json:"procedure_function,omitempty"`
	ProcedureCategory   *dstore_values.StringValue  `protobuf:"bytes,10004,opt,name=procedure_category,json=procedureCategory" json:"procedure_category,omitempty"`
	ActualdstoreVersion *dstore_values.StringValue  `protobuf:"bytes,10005,opt,name=actualdstore_version,json=actualdstoreVersion" json:"actualdstore_version,omitempty"`
	ProcedureTypeId     *dstore_values.IntegerValue `protobuf:"bytes,10006,opt,name=procedure_type_id,json=procedureTypeId" json:"procedure_type_id,omitempty"`
	LastEditedAtChar    *dstore_values.StringValue  `protobuf:"bytes,10007,opt,name=last_edited_at_char,json=lastEditedAtChar" json:"last_edited_at_char,omitempty"`
	ProcedureName       *dstore_values.StringValue  `protobuf:"bytes,10008,opt,name=procedure_name,json=procedureName" json:"procedure_name,omitempty"`
	FirstdstoreVersion  *dstore_values.StringValue  `protobuf:"bytes,10009,opt,name=firstdstore_version,json=firstdstoreVersion" json:"firstdstore_version,omitempty"`
	Author              *dstore_values.StringValue  `protobuf:"bytes,10010,opt,name=author" json:"author,omitempty"`
	FirstCreatedAtChar  *dstore_values.StringValue  `protobuf:"bytes,10011,opt,name=first_created_at_char,json=firstCreatedAtChar" json:"first_created_at_char,omitempty"`
	AliasProcedureName  *dstore_values.StringValue  `protobuf:"bytes,10012,opt,name=alias_procedure_name,json=aliasProcedureName" json:"alias_procedure_name,omitempty"`
	RegisteredForDocu   *dstore_values.BooleanValue `protobuf:"bytes,10013,opt,name=registered_for_docu,json=registeredForDocu" json:"registered_for_docu,omitempty"`
	LastCreatedAtChar   *dstore_values.StringValue  `protobuf:"bytes,10014,opt,name=last_created_at_char,json=lastCreatedAtChar" json:"last_created_at_char,omitempty"`
	DocuExists          *dstore_values.BooleanValue `protobuf:"bytes,10015,opt,name=docu_exists,json=docuExists" json:"docu_exists,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetProcedureType() *dstore_values.StringValue {
	if m != nil {
		return m.ProcedureType
	}
	return nil
}

func (m *Response_Row) GetProcedureCategoryId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ProcedureCategoryId
	}
	return nil
}

func (m *Response_Row) GetProcedureFunction() *dstore_values.StringValue {
	if m != nil {
		return m.ProcedureFunction
	}
	return nil
}

func (m *Response_Row) GetProcedureCategory() *dstore_values.StringValue {
	if m != nil {
		return m.ProcedureCategory
	}
	return nil
}

func (m *Response_Row) GetActualdstoreVersion() *dstore_values.StringValue {
	if m != nil {
		return m.ActualdstoreVersion
	}
	return nil
}

func (m *Response_Row) GetProcedureTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ProcedureTypeId
	}
	return nil
}

func (m *Response_Row) GetLastEditedAtChar() *dstore_values.StringValue {
	if m != nil {
		return m.LastEditedAtChar
	}
	return nil
}

func (m *Response_Row) GetProcedureName() *dstore_values.StringValue {
	if m != nil {
		return m.ProcedureName
	}
	return nil
}

func (m *Response_Row) GetFirstdstoreVersion() *dstore_values.StringValue {
	if m != nil {
		return m.FirstdstoreVersion
	}
	return nil
}

func (m *Response_Row) GetAuthor() *dstore_values.StringValue {
	if m != nil {
		return m.Author
	}
	return nil
}

func (m *Response_Row) GetFirstCreatedAtChar() *dstore_values.StringValue {
	if m != nil {
		return m.FirstCreatedAtChar
	}
	return nil
}

func (m *Response_Row) GetAliasProcedureName() *dstore_values.StringValue {
	if m != nil {
		return m.AliasProcedureName
	}
	return nil
}

func (m *Response_Row) GetRegisteredForDocu() *dstore_values.BooleanValue {
	if m != nil {
		return m.RegisteredForDocu
	}
	return nil
}

func (m *Response_Row) GetLastCreatedAtChar() *dstore_values.StringValue {
	if m != nil {
		return m.LastCreatedAtChar
	}
	return nil
}

func (m *Response_Row) GetDocuExists() *dstore_values.BooleanValue {
	if m != nil {
		return m.DocuExists
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.do_GetProcedureNames_Ad.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.do_GetProcedureNames_Ad.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.do_GetProcedureNames_Ad.Response.Row")
}

var fileDescriptor0 = []byte{
	// 799 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0x4b, 0x4f, 0x1b, 0x3b,
	0x14, 0x16, 0x37, 0x37, 0x80, 0x8c, 0xee, 0x05, 0x26, 0x3c, 0xa6, 0x89, 0x54, 0x21, 0xaa, 0x4a,
	0x5d, 0x4d, 0x50, 0xa9, 0xaa, 0x2e, 0xda, 0x05, 0xd0, 0x40, 0x41, 0x64, 0x88, 0x46, 0x15, 0x55,
	0xbb, 0xb1, 0x4c, 0xc6, 0x84, 0x91, 0x92, 0x71, 0x64, 0x3b, 0x50, 0x7e, 0x44, 0xa5, 0xbe, 0xdf,
	0x8f, 0x55, 0x7f, 0x5c, 0x5f, 0x9b, 0xfe, 0x82, 0x1e, 0xdb, 0x33, 0x49, 0x66, 0x08, 0x9d, 0x84,
	0x0d, 0xc8, 0xe3, 0xf3, 0x7d, 0xe7, 0xf3, 0xf1, 0x39, 0x5f, 0x8c, 0x6e, 0xfa, 0x42, 0x32, 0x4e,
	0xcb, 0x34, 0x6c, 0x04, 0x21, 0x2d, 0xb7, 0x39, 0xab, 0x53, 0xbf, 0xc3, 0xa9, 0x28, 0xfb, 0x0c,
	0x6f, 0x51, 0x59, 0x8b, 0x3f, 0xb8, 0xa4, 0x45, 0x05, 0x5e, 0xf3, 0x1d, 0x08, 0x91, 0xcc, 0xba,
	0x6a, 0x70, 0x8e, 0xc1, 0x39, 0xe7, 0x04, 0x17, 0x0b, 0x11, 0xfd, 0x31, 0x69, 0x76, 0xa8, 0x30,
	0xd8, 0xe2, 0xa5, 0x64, 0x4e, 0xca, 0x39, 0xe3, 0xd1, 0x56, 0x29, 0xb9, 0x05, 0x2c, 0x82, 0x34,
	0x68, 0xb4, 0x79, 0x25, 0xbd, 0x29, 0x49, 0x10, 0x1e, 0x32, 0xde, 0x22, 0x32, 0x60, 0xa1, 0x09,
	0x5a, 0xfe, 0x9a, 0x47, 0xa8, 0x46, 0x38, 0x08, 0x90, 0x94, 0x0b, 0x6b, 0x0f, 0xcd, 0x77, 0xcf,
	0x84, 0xeb, 0x44, 0xd2, 0x06, 0xe3, 0xa7, 0x38, 0xf0, 0xed, 0xb1, 0xa5, 0xb1, 0x6b, 0x53, 0xd7,
	0x4b, 0x4e, 0x74, 0x8e, 0x48, 0x60, 0x10, 0x42, 0x04, 0xe5, 0xfb, 0x6a, 0xe5, 0x15, 0xba, 0xc8,
	0x8d, 0x08, 0xb8, 0xed, 0x5b, 0xb7, 0x51, 0x71, 0x20, 0x21, 0x0e, 0x3b, 0xcd, 0xa6, 0xfd, 0x6d,
	0x02, 0x68, 0x27, 0xbd, 0xc5, 0x01, 0x48, 0x17, 0xf6, 0xad, 0x2d, 0x34, 0xdb, 0x43, 0xcb, 0xd3,
	0x36, 0x55, 0x52, 0xfe, 0xc9, 0x96, 0x32, 0xdd, 0x45, 0xdd, 0x07, 0x10, 0xc8, 0xb8, 0x81, 0x16,
	0xce, 0x10, 0x19, 0x09, 0xdf, 0x8d, 0x84, 0x42, 0x0a, 0xa1, 0xd3, 0xaf, 0xa1, 0xff, 0x49, 0x5d,
	0x76, 0x48, 0x13, 0x1f, 0x43, 0x71, 0xa0, 0x68, 0x76, 0x4e, 0xe7, 0x2e, 0xa6, 0x72, 0x0b, 0xc9,
	0x83, 0xb0, 0x61, 0x52, 0xff, 0x67, 0x10, 0xfb, 0x06, 0x60, 0x95, 0x51, 0x21, 0x49, 0x61, 0xb2,
	0xfe, 0x30, 0x59, 0x67, 0x13, 0xc1, 0x71, 0xce, 0x9e, 0xd2, 0x10, 0xee, 0xc5, 0xfe, 0x37, 0x3b,
	0x67, 0xbb, 0xbf, 0x93, 0x54, 0xce, 0x24, 0x85, 0xc9, 0xf9, 0x33, 0xca, 0x99, 0x08, 0xd6, 0x39,
	0x1f, 0xa2, 0x52, 0x83, 0x4a, 0xac, 0x36, 0x04, 0x3e, 0x09, 0xe4, 0x11, 0x6e, 0x05, 0x42, 0x00,
	0x3d, 0xf6, 0x59, 0xbd, 0x63, 0xe7, 0x07, 0x16, 0xfc, 0x80, 0xb1, 0x26, 0x25, 0xa1, 0x51, 0xb0,
	0xd8, 0x30, 0xed, 0x2c, 0x1e, 0x00, 0xba, 0x6a, 0xc0, 0x77, 0x01, 0x6b, 0x6d, 0xa2, 0xa5, 0xbf,
	0x50, 0x1b, 0x61, 0xbf, 0x8c, 0xb0, 0xd2, 0x39, 0x1c, 0x4a, 0xe2, 0xf2, 0x93, 0x29, 0x34, 0xe9,
	0x51, 0xd1, 0x66, 0xa1, 0xa0, 0xd6, 0x0a, 0xca, 0xeb, 0x29, 0x88, 0xba, 0xb2, 0x5b, 0x9a, 0x68,
	0xba, 0xcc, 0x84, 0x54, 0xd4, 0x5f, 0xcf, 0x04, 0xc2, 0x09, 0x67, 0x54, 0xff, 0xe3, 0xbe, 0x01,
	0x80, 0x3e, 0xca, 0x01, 0xd8, 0x49, 0x81, 0xd3, 0x63, 0x52, 0x85, 0xf5, 0x76, 0x6f, 0xed, 0x4d,
	0xb7, 0x92, 0x1f, 0xac, 0x5b, 0x68, 0x22, 0x9a, 0x3b, 0xe8, 0x0e, 0xc5, 0x78, 0xf9, 0x0c, 0xa3,
	0x99, 0xca, 0xaa, 0xf9, 0xef, 0xc5, 0xe1, 0x56, 0x05, 0xe5, 0x38, 0x3b, 0x81, 0xfb, 0x55, 0xa8,
	0x55, 0x67, 0x28, 0x8b, 0x70, 0xe2, 0x22, 0x38, 0x1e, 0x3b, 0xf1, 0x14, 0xbe, 0xf8, 0x7b, 0x12,
	0xe5, 0x60, 0x61, 0x2d, 0xa0, 0x71, 0x58, 0xaa, 0x09, 0x79, 0xea, 0x42, 0x5d, 0xf2, 0x5e, 0x1e,
	0x96, 0xd0, 0xfb, 0xeb, 0xfd, 0x1d, 0xa5, 0x7a, 0xdf, 0x7e, 0xe6, 0x8e, 0xd0, 0x52, 0x6a, 0x1e,
	0xac, 0xda, 0x79, 0xbe, 0xf0, 0xdc, 0xbd, 0xa0, 0x31, 0xec, 0x20, 0xab, 0xc7, 0x78, 0xd8, 0x09,
	0xeb, 0xfa, 0x4e, 0x5e, 0x64, 0x2b, 0xeb, 0xf5, 0xef, 0x66, 0x84, 0x4a, 0x72, 0xc5, 0xea, 0xec,
	0x97, 0xa3, 0x70, 0xc5, 0xca, 0x2c, 0x17, 0xcd, 0x99, 0xa1, 0x34, 0xa8, 0xee, 0xe4, 0xbf, 0xca,
	0x66, 0x2b, 0xf4, 0x03, 0x63, 0x03, 0xb8, 0x37, 0xc8, 0xc2, 0x5e, 0xbb, 0x17, 0xf0, 0xb0, 0x1d,
	0x54, 0x68, 0x12, 0x21, 0x31, 0xf5, 0x03, 0x49, 0x7d, 0x4c, 0x24, 0xae, 0x1f, 0x11, 0x6e, 0xbf,
	0xc9, 0x16, 0x36, 0xa3, 0x70, 0x15, 0x0d, 0x5b, 0x93, 0x1b, 0x00, 0x4a, 0xf6, 0x84, 0x76, 0x99,
	0xb7, 0xee, 0xa8, 0x36, 0xb3, 0x8b, 0x0a, 0x87, 0x01, 0x17, 0x32, 0x55, 0xa8, 0x77, 0xd9, 0x44,
	0x56, 0x1f, 0x2e, 0xae, 0xd3, 0x2a, 0x1a, 0x27, 0x1d, 0x79, 0x04, 0x43, 0xfd, 0x3e, 0x9b, 0x20,
	0x0a, 0x85, 0xcb, 0x9a, 0xd7, 0x54, 0xb8, 0xce, 0x29, 0xe9, 0x2f, 0xca, 0x87, 0x61, 0x45, 0x6c,
	0x18, 0x60, 0x54, 0x96, 0x2a, 0x5c, 0x7e, 0x33, 0x20, 0x02, 0xa7, 0x8a, 0xf3, 0x71, 0x08, 0x3a,
	0x0d, 0xac, 0xa5, 0x2b, 0xc4, 0x69, 0x23, 0x10, 0xf0, 0xd3, 0x0a, 0xda, 0xc0, 0x32, 0x8c, 0x9f,
	0x7e, 0x72, 0xb3, 0x0d, 0x75, 0xb6, 0x07, 0xdc, 0x64, 0x5c, 0x5b, 0xe9, 0x2e, 0x9a, 0xd3, 0xf7,
	0x9f, 0x3e, 0xeb, 0xe7, 0x21, 0xfa, 0x5c, 0x01, 0x93, 0x47, 0xbd, 0x83, 0xa6, 0xb4, 0x03, 0xd3,
	0xc7, 0x90, 0x46, 0xd8, 0x5f, 0x86, 0xd0, 0x84, 0x14, 0xa0, 0xa2, 0xe3, 0xd7, 0xf7, 0x50, 0x29,
	0x60, 0x29, 0xcb, 0xea, 0xbd, 0x86, 0x1e, 0xad, 0x8c, 0xfa, 0x4e, 0x3a, 0x18, 0xd7, 0xef, 0x91,
	0xd5, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x6b, 0x05, 0xe8, 0xc8, 0x62, 0x09, 0x00, 0x00,
}
