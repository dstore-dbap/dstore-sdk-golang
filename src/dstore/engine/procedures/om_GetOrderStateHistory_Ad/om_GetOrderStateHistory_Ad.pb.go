// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/om_GetOrderStateHistory_Ad.proto
// DO NOT EDIT!

/*
Package om_GetOrderStateHistory_Ad is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/om_GetOrderStateHistory_Ad.proto

It has these top-level messages:
	Parameters
	Response
*/
package om_GetOrderStateHistory_Ad

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "dstore/values"
import dstore_engine_error "dstore/engine/error"
import dstore_engine_message "dstore/engine/message"
import dstore_engine_metainformation "dstore/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	OrderOrOrderContentId     *dstore_values.IntegerValue   `protobuf:"bytes,1,opt,name=order_or_order_content_id,json=orderOrOrderContentId" json:"order_or_order_content_id,omitempty"`
	OrderOrOrderContentIdNull bool                          `protobuf:"varint,1001,opt,name=order_or_order_content_id_null,json=orderOrOrderContentIdNull" json:"order_or_order_content_id_null,omitempty"`
	IsOrderId                 *dstore_values.BooleanValue   `protobuf:"bytes,2,opt,name=is_order_id,json=isOrderId" json:"is_order_id,omitempty"`
	IsOrderIdNull             bool                          `protobuf:"varint,1002,opt,name=is_order_id_null,json=isOrderIdNull" json:"is_order_id_null,omitempty"`
	FromOrderStateId          *dstore_values.IntegerValue   `protobuf:"bytes,3,opt,name=from_order_state_id,json=fromOrderStateId" json:"from_order_state_id,omitempty"`
	FromOrderStateIdNull      bool                          `protobuf:"varint,1003,opt,name=from_order_state_id_null,json=fromOrderStateIdNull" json:"from_order_state_id_null,omitempty"`
	ToOrderStateId            *dstore_values.IntegerValue   `protobuf:"bytes,4,opt,name=to_order_state_id,json=toOrderStateId" json:"to_order_state_id,omitempty"`
	ToOrderStateIdNull        bool                          `protobuf:"varint,1004,opt,name=to_order_state_id_null,json=toOrderStateIdNull" json:"to_order_state_id_null,omitempty"`
	UserId                    *dstore_values.IntegerValue   `protobuf:"bytes,5,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	UserIdNull                bool                          `protobuf:"varint,1005,opt,name=user_id_null,json=userIdNull" json:"user_id_null,omitempty"`
	FromDateAndTime           *dstore_values.TimestampValue `protobuf:"bytes,6,opt,name=from_date_and_time,json=fromDateAndTime" json:"from_date_and_time,omitempty"`
	FromDateAndTimeNull       bool                          `protobuf:"varint,1006,opt,name=from_date_and_time_null,json=fromDateAndTimeNull" json:"from_date_and_time_null,omitempty"`
	ToDateAndTime             *dstore_values.TimestampValue `protobuf:"bytes,7,opt,name=to_date_and_time,json=toDateAndTime" json:"to_date_and_time,omitempty"`
	ToDateAndTimeNull         bool                          `protobuf:"varint,1007,opt,name=to_date_and_time_null,json=toDateAndTimeNull" json:"to_date_and_time_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetOrderOrOrderContentId() *dstore_values.IntegerValue {
	if m != nil {
		return m.OrderOrOrderContentId
	}
	return nil
}

func (m *Parameters) GetIsOrderId() *dstore_values.BooleanValue {
	if m != nil {
		return m.IsOrderId
	}
	return nil
}

func (m *Parameters) GetFromOrderStateId() *dstore_values.IntegerValue {
	if m != nil {
		return m.FromOrderStateId
	}
	return nil
}

func (m *Parameters) GetToOrderStateId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ToOrderStateId
	}
	return nil
}

func (m *Parameters) GetUserId() *dstore_values.IntegerValue {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *Parameters) GetFromDateAndTime() *dstore_values.TimestampValue {
	if m != nil {
		return m.FromDateAndTime
	}
	return nil
}

func (m *Parameters) GetToDateAndTime() *dstore_values.TimestampValue {
	if m != nil {
		return m.ToDateAndTime
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId                   int32                         `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	ChangingDateAndTime     *dstore_values.TimestampValue `protobuf:"bytes,10001,opt,name=changing_date_and_time,json=changingDateAndTime" json:"changing_date_and_time,omitempty"`
	ToOrderStateId          *dstore_values.IntegerValue   `protobuf:"bytes,10002,opt,name=to_order_state_id,json=toOrderStateId" json:"to_order_state_id,omitempty"`
	UserName                *dstore_values.StringValue    `protobuf:"bytes,10003,opt,name=user_name,json=userName" json:"user_name,omitempty"`
	UserId                  *dstore_values.IntegerValue   `protobuf:"bytes,10004,opt,name=user_id,json=userId" json:"user_id,omitempty"`
	CompleteOrder           *dstore_values.BooleanValue   `protobuf:"bytes,10005,opt,name=complete_order,json=completeOrder" json:"complete_order,omitempty"`
	FromOrderStateId        *dstore_values.IntegerValue   `protobuf:"bytes,10006,opt,name=from_order_state_id,json=fromOrderStateId" json:"from_order_state_id,omitempty"`
	ChangingDateAndTimeChar *dstore_values.StringValue    `protobuf:"bytes,10007,opt,name=changing_date_and_time_char,json=changingDateAndTimeChar" json:"changing_date_and_time_char,omitempty"`
	OrderId                 *dstore_values.IntegerValue   `protobuf:"bytes,10008,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	ToOrderState            *dstore_values.StringValue    `protobuf:"bytes,10009,opt,name=to_order_state,json=toOrderState" json:"to_order_state,omitempty"`
	OrderContentId          *dstore_values.IntegerValue   `protobuf:"bytes,10010,opt,name=order_content_id,json=orderContentId" json:"order_content_id,omitempty"`
	FromOrderState          *dstore_values.StringValue    `protobuf:"bytes,10011,opt,name=from_order_state,json=fromOrderState" json:"from_order_state,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetChangingDateAndTime() *dstore_values.TimestampValue {
	if m != nil {
		return m.ChangingDateAndTime
	}
	return nil
}

func (m *Response_Row) GetToOrderStateId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ToOrderStateId
	}
	return nil
}

func (m *Response_Row) GetUserName() *dstore_values.StringValue {
	if m != nil {
		return m.UserName
	}
	return nil
}

func (m *Response_Row) GetUserId() *dstore_values.IntegerValue {
	if m != nil {
		return m.UserId
	}
	return nil
}

func (m *Response_Row) GetCompleteOrder() *dstore_values.BooleanValue {
	if m != nil {
		return m.CompleteOrder
	}
	return nil
}

func (m *Response_Row) GetFromOrderStateId() *dstore_values.IntegerValue {
	if m != nil {
		return m.FromOrderStateId
	}
	return nil
}

func (m *Response_Row) GetChangingDateAndTimeChar() *dstore_values.StringValue {
	if m != nil {
		return m.ChangingDateAndTimeChar
	}
	return nil
}

func (m *Response_Row) GetOrderId() *dstore_values.IntegerValue {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *Response_Row) GetToOrderState() *dstore_values.StringValue {
	if m != nil {
		return m.ToOrderState
	}
	return nil
}

func (m *Response_Row) GetOrderContentId() *dstore_values.IntegerValue {
	if m != nil {
		return m.OrderContentId
	}
	return nil
}

func (m *Response_Row) GetFromOrderState() *dstore_values.StringValue {
	if m != nil {
		return m.FromOrderState
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.om_GetOrderStateHistory_Ad.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.om_GetOrderStateHistory_Ad.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.om_GetOrderStateHistory_Ad.Response.Row")
}

var fileDescriptor0 = []byte{
	// 770 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0xdb, 0x4e, 0xdb, 0x5a,
	0x10, 0x15, 0x27, 0x27, 0x17, 0x06, 0x08, 0xc1, 0x39, 0x80, 0x49, 0x74, 0x50, 0x4b, 0x5f, 0x78,
	0x32, 0x6d, 0xe9, 0x85, 0xaa, 0x4f, 0x40, 0x29, 0xd0, 0x0a, 0x53, 0x99, 0xb6, 0x12, 0x7d, 0xb1,
	0x4c, 0xbc, 0x49, 0x2d, 0x25, 0xde, 0xd1, 0xf6, 0x4e, 0x51, 0xff, 0xa2, 0xf7, 0xeb, 0x6b, 0xbf,
	0xa4, 0x3f, 0x53, 0xf5, 0xfe, 0x0b, 0x9d, 0xed, 0x71, 0x20, 0x76, 0x8c, 0x9c, 0x22, 0x45, 0x49,
	0xb6, 0x67, 0xd6, 0xac, 0xe5, 0xb9, 0xd9, 0x70, 0xc3, 0x0d, 0x24, 0x17, 0x6c, 0x89, 0xf9, 0x4d,
	0xcf, 0x67, 0x4b, 0x1d, 0xc1, 0x1b, 0xcc, 0xed, 0x0a, 0x16, 0x2c, 0xf1, 0xb6, 0xbd, 0xc9, 0xe4,
	0xae, 0x70, 0x99, 0xd8, 0x93, 0x8e, 0x64, 0x5b, 0x9e, 0xf2, 0x7c, 0x6a, 0xaf, 0xba, 0x06, 0x7a,
	0x49, 0xae, 0x2d, 0x12, 0xd4, 0x20, 0xa8, 0x71, 0xba, 0x7f, 0xad, 0x1a, 0x91, 0x3c, 0x71, 0x5a,
	0x5d, 0x16, 0x10, 0xbc, 0x36, 0x17, 0x67, 0x66, 0x42, 0x70, 0x11, 0x99, 0xea, 0x71, 0x53, 0x9b,
	0x05, 0x81, 0xd3, 0x64, 0x91, 0xf1, 0x42, 0xd2, 0x28, 0x1d, 0xcf, 0x3f, 0xe4, 0xa2, 0xed, 0x48,
	0x8f, 0xfb, 0xe4, 0xb4, 0xf0, 0xa5, 0x00, 0x70, 0xcf, 0x11, 0x0e, 0x5a, 0x99, 0x08, 0xb4, 0x07,
	0x30, 0xc7, 0x95, 0x30, 0x9b, 0xab, 0x8f, 0xfa, 0xd3, 0xe0, 0xbe, 0x64, 0xbe, 0xb4, 0x3d, 0x57,
	0x1f, 0x39, 0x37, 0xb2, 0x38, 0x76, 0xb9, 0x6e, 0x44, 0xb7, 0x13, 0x89, 0xf4, 0xd0, 0xde, 0x64,
	0xe2, 0xa1, 0x3a, 0x59, 0xd3, 0x21, 0x68, 0x57, 0x84, 0x77, 0xb7, 0x4e, 0xd0, 0x6d, 0x57, 0x5b,
	0x83, 0xf9, 0x53, 0xc3, 0xda, 0x7e, 0xb7, 0xd5, 0xd2, 0xbf, 0x16, 0x31, 0x78, 0xc9, 0x9a, 0x4b,
	0xc5, 0x9b, 0xe8, 0xa1, 0xdd, 0x84, 0x31, 0x2f, 0x88, 0xd0, 0x28, 0xe6, 0x9f, 0x54, 0x31, 0x07,
	0x9c, 0xb7, 0x98, 0xe3, 0x93, 0x98, 0x51, 0x2f, 0x08, 0xe3, 0xa0, 0x80, 0x45, 0xa8, 0xf4, 0x81,
	0x89, 0xf2, 0x1b, 0x51, 0x4e, 0x1c, 0x7b, 0x85, 0x34, 0x77, 0xa0, 0x7a, 0x28, 0xb0, 0x44, 0xe4,
	0x1b, 0xa8, 0x02, 0x29, 0xba, 0x5c, 0xf6, 0xbd, 0x57, 0x14, 0xee, 0xa4, 0xac, 0xc8, 0x7a, 0x1d,
	0xf4, 0x94, 0x58, 0xc4, 0xfe, 0x9d, 0xd8, 0xff, 0x4b, 0x82, 0x42, 0x11, 0xb7, 0x61, 0x4a, 0xf2,
	0xa4, 0x84, 0x7f, 0xb3, 0x25, 0x94, 0x25, 0x8f, 0x09, 0x58, 0x86, 0x99, 0x81, 0x38, 0x44, 0xff,
	0x83, 0xe8, 0xb5, 0x38, 0x20, 0x24, 0xbf, 0x02, 0xc5, 0x6e, 0x40, 0x49, 0xce, 0x67, 0x53, 0x16,
	0x94, 0x2f, 0x52, 0x9d, 0x87, 0xf1, 0x08, 0x45, 0x04, 0x3f, 0x89, 0x00, 0xc8, 0x1c, 0xa5, 0x56,
	0x0b, 0xd3, 0xe1, 0x2a, 0x21, 0x8e, 0xef, 0xda, 0xd2, 0x6b, 0x33, 0xbd, 0x10, 0x72, 0xfc, 0x9f,
	0xe0, 0x50, 0x26, 0x54, 0xdc, 0xee, 0x10, 0xcb, 0xa4, 0x02, 0xde, 0x42, 0xdc, 0xaa, 0xef, 0xde,
	0x47, 0x93, 0x76, 0x15, 0x66, 0x07, 0x63, 0x11, 0xf3, 0x2f, 0x62, 0xae, 0x26, 0x20, 0x51, 0x62,
	0x2b, 0x98, 0x90, 0xb8, 0x80, 0xe2, 0x30, 0x02, 0x26, 0x24, 0xef, 0xa7, 0xbf, 0x04, 0xd3, 0xc9,
	0x38, 0x44, 0xfe, 0x9b, 0xc8, 0xa7, 0x62, 0xee, 0x8a, 0x7a, 0xe1, 0x73, 0x09, 0x4a, 0x16, 0x0b,
	0x3a, 0xdc, 0x0f, 0x98, 0x76, 0x11, 0xf2, 0xe1, 0x1c, 0x47, 0x33, 0x55, 0x33, 0xe2, 0x2b, 0x82,
	0x66, 0x7c, 0x43, 0x7d, 0x5b, 0xe4, 0xa8, 0xed, 0x43, 0x45, 0x4d, 0xb0, 0xdd, 0x37, 0xc2, 0x38,
	0x03, 0x39, 0x04, 0x1b, 0x09, 0x70, 0x72, 0xd0, 0x77, 0xf0, 0xbc, 0x7d, 0x72, 0xb6, 0x26, 0xdb,
	0xf1, 0x0b, 0xda, 0x0a, 0x14, 0xa3, 0xcd, 0x81, 0x6d, 0xae, 0x22, 0xce, 0x0f, 0x44, 0xa4, 0xbd,
	0xb2, 0x43, 0xbf, 0x56, 0xcf, 0x5d, 0xdb, 0x82, 0x9c, 0xe0, 0x47, 0xd8, 0x99, 0x0a, 0x75, 0xcd,
	0x18, 0x76, 0xcf, 0x19, 0xbd, 0x3c, 0x18, 0x16, 0x3f, 0xb2, 0x54, 0x88, 0xda, 0xa7, 0x02, 0xe4,
	0xf0, 0xa0, 0xcd, 0x40, 0x01, 0x8f, 0xaa, 0xf7, 0x9e, 0x99, 0x98, 0x9a, 0xbc, 0x95, 0xc7, 0x23,
	0xb6, 0xd7, 0x1e, 0xcc, 0x34, 0x1e, 0x3b, 0x2a, 0x70, 0x33, 0x51, 0xbe, 0xe7, 0xe6, 0x30, 0xf5,
	0xab, 0xf6, 0xd0, 0xfd, 0x55, 0xdc, 0x4c, 0x1b, 0xb3, 0x17, 0xe6, 0xdf, 0xcf, 0xd9, 0x0a, 0x8c,
	0x86, 0xcd, 0xef, 0xe3, 0x1e, 0xd5, 0x5f, 0x9a, 0xf1, 0x9a, 0x46, 0x01, 0x02, 0x29, 0x90, 0x9e,
	0xf0, 0x25, 0xe5, 0x6d, 0x3a, 0x61, 0x1f, 0x1f, 0x0f, 0xdb, 0x2b, 0x73, 0xf8, 0x69, 0x5b, 0x87,
	0x72, 0x83, 0xb7, 0x3b, 0x2d, 0xdc, 0xda, 0xa4, 0x5f, 0x7f, 0x6d, 0x66, 0x2f, 0xc4, 0x89, 0x1e,
	0x26, 0x14, 0xaf, 0xdd, 0x4d, 0x5f, 0x75, 0x6f, 0xcc, 0xb3, 0xec, 0xba, 0x7d, 0xa8, 0xa7, 0x17,
	0xc8, 0xc6, 0xcb, 0x42, 0x7f, 0x9b, 0x9d, 0x94, 0xd9, 0x94, 0x12, 0xad, 0x23, 0x16, 0xd7, 0x68,
	0xe9, 0x78, 0xed, 0xbf, 0x1b, 0x42, 0x5c, 0x91, 0x47, 0x5b, 0x7f, 0x15, 0xca, 0xf1, 0xfa, 0xea,
	0xef, 0xb3, 0x65, 0x8c, 0xf7, 0xd7, 0x56, 0x2d, 0x8c, 0x81, 0xe7, 0xe0, 0x87, 0x61, 0x3a, 0x84,
	0xc7, 0x9f, 0x80, 0x1b, 0x50, 0x49, 0xe6, 0x5a, 0xff, 0x98, 0x2d, 0xa6, 0x1c, 0xcf, 0xf3, 0x9a,
	0x05, 0x75, 0x8f, 0x27, 0xe6, 0xec, 0xe4, 0x55, 0xe4, 0xd1, 0xf2, 0x19, 0x5e, 0x52, 0x0e, 0x0a,
	0xe1, 0x9b, 0xc0, 0xf2, 0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x83, 0x95, 0x00, 0x02, 0xe2, 0x08,
	0x00, 0x00,
}
