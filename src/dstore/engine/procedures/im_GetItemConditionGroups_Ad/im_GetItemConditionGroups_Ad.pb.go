// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/im_GetItemConditionGroups_Ad.proto
// DO NOT EDIT!

/*
Package im_GetItemConditionGroups_Ad is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/im_GetItemConditionGroups_Ad.proto

It has these top-level messages:
	Parameters
	Response
*/
package im_GetItemConditionGroups_Ad

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "dstore/values"
import dstore_engine_error "dstore/engine/error"
import dstore_engine_message "dstore/engine/message"
import dstore_engine_metainformation "dstore/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	ConditionGroupId                  *dstore_values.IntegerValue `protobuf:"bytes,1,opt,name=condition_group_id,json=conditionGroupId" json:"condition_group_id,omitempty"`
	ConditionGroupIdNull              bool                        `protobuf:"varint,1001,opt,name=condition_group_id_null,json=conditionGroupIdNull" json:"condition_group_id_null,omitempty"`
	ConditionGroupDescriptionLike     *dstore_values.StringValue  `protobuf:"bytes,2,opt,name=condition_group_description_like,json=conditionGroupDescriptionLike" json:"condition_group_description_like,omitempty"`
	ConditionGroupDescriptionLikeNull bool                        `protobuf:"varint,1002,opt,name=condition_group_description_like_null,json=conditionGroupDescriptionLikeNull" json:"condition_group_description_like_null,omitempty"`
	GetUnusedConditionGroups          *dstore_values.BooleanValue `protobuf:"bytes,3,opt,name=get_unused_condition_groups,json=getUnusedConditionGroups" json:"get_unused_condition_groups,omitempty"`
	GetUnusedConditionGroupsNull      bool                        `protobuf:"varint,1003,opt,name=get_unused_condition_groups_null,json=getUnusedConditionGroupsNull" json:"get_unused_condition_groups_null,omitempty"`
	OrderBy                           *dstore_values.IntegerValue `protobuf:"bytes,4,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	OrderByNull                       bool                        `protobuf:"varint,1004,opt,name=order_by_null,json=orderByNull" json:"order_by_null,omitempty"`
	RowCount                          *dstore_values.IntegerValue `protobuf:"bytes,5,opt,name=row_count,json=rowCount" json:"row_count,omitempty"`
	RowCountNull                      bool                        `protobuf:"varint,1005,opt,name=row_count_null,json=rowCountNull" json:"row_count_null,omitempty"`
	FilterByCondPartIdsInOneId        *dstore_values.BooleanValue `protobuf:"bytes,6,opt,name=filter_by_cond_part_ids_in_one_id,json=filterByCondPartIdsInOneId" json:"filter_by_cond_part_ids_in_one_id,omitempty"`
	FilterByCondPartIdsInOneIdNull    bool                        `protobuf:"varint,1006,opt,name=filter_by_cond_part_ids_in_one_id_null,json=filterByCondPartIdsInOneIdNull" json:"filter_by_cond_part_ids_in_one_id_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetConditionGroupId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ConditionGroupId
	}
	return nil
}

func (m *Parameters) GetConditionGroupDescriptionLike() *dstore_values.StringValue {
	if m != nil {
		return m.ConditionGroupDescriptionLike
	}
	return nil
}

func (m *Parameters) GetGetUnusedConditionGroups() *dstore_values.BooleanValue {
	if m != nil {
		return m.GetUnusedConditionGroups
	}
	return nil
}

func (m *Parameters) GetOrderBy() *dstore_values.IntegerValue {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *Parameters) GetRowCount() *dstore_values.IntegerValue {
	if m != nil {
		return m.RowCount
	}
	return nil
}

func (m *Parameters) GetFilterByCondPartIdsInOneId() *dstore_values.BooleanValue {
	if m != nil {
		return m.FilterByCondPartIdsInOneId
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId                        int32                         `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	Operator1                    *dstore_values.StringValue    `protobuf:"bytes,10001,opt,name=operator1" json:"operator1,omitempty"`
	Condition1                   *dstore_values.StringValue    `protobuf:"bytes,10002,opt,name=condition1" json:"condition1,omitempty"`
	Condition2                   *dstore_values.StringValue    `protobuf:"bytes,10003,opt,name=condition2" json:"condition2,omitempty"`
	Operator2                    *dstore_values.StringValue    `protobuf:"bytes,10004,opt,name=operator2" json:"operator2,omitempty"`
	ConditionGroupDescription    *dstore_values.StringValue    `protobuf:"bytes,10005,opt,name=condition_group_description,json=conditionGroupDescription" json:"condition_group_description,omitempty"`
	CombinePartsWithANDOperator  *dstore_values.BooleanValue   `protobuf:"bytes,10006,opt,name=combine_parts_with_a_n_d_operator,json=combinePartsWithANDOperator" json:"combine_parts_with_a_n_d_operator,omitempty"`
	RecursiveEvaluation          *dstore_values.IntegerValue   `protobuf:"bytes,10007,opt,name=recursive_evaluation,json=recursiveEvaluation" json:"recursive_evaluation,omitempty"`
	ConditionPartId              *dstore_values.IntegerValue   `protobuf:"bytes,10008,opt,name=condition_part_id,json=conditionPartId" json:"condition_part_id,omitempty"`
	DomainTreeNodeIds            *dstore_values.StringValue    `protobuf:"bytes,10009,opt,name=domain_tree_node_ids,json=domainTreeNodeIds" json:"domain_tree_node_ids,omitempty"`
	NodeCharacteristicId         *dstore_values.IntegerValue   `protobuf:"bytes,10010,opt,name=node_characteristic_id,json=nodeCharacteristicId" json:"node_characteristic_id,omitempty"`
	CreatedAtDateAndTime         *dstore_values.TimestampValue `protobuf:"bytes,10011,opt,name=created_at_date_and_time,json=createdAtDateAndTime" json:"created_at_date_and_time,omitempty"`
	UsedInAnItemCondition        *dstore_values.BooleanValue   `protobuf:"bytes,10012,opt,name=used_in_an_item_condition,json=usedInAnItemCondition" json:"used_in_an_item_condition,omitempty"`
	UsedInCampaignItemCondGroups *dstore_values.BooleanValue   `protobuf:"bytes,10013,opt,name=used_in_campaign_item_cond_groups,json=usedInCampaignItemCondGroups" json:"used_in_campaign_item_cond_groups,omitempty"`
	LevelIds                     *dstore_values.StringValue    `protobuf:"bytes,10014,opt,name=level_ids,json=levelIds" json:"level_ids,omitempty"`
	EditedAtDateAndTime          *dstore_values.TimestampValue `protobuf:"bytes,10015,opt,name=edited_at_date_and_time,json=editedAtDateAndTime" json:"edited_at_date_and_time,omitempty"`
	PartSortNo                   *dstore_values.IntegerValue   `protobuf:"bytes,10016,opt,name=part_sort_no,json=partSortNo" json:"part_sort_no,omitempty"`
	ConditionPartDescription     *dstore_values.StringValue    `protobuf:"bytes,10017,opt,name=condition_part_description,json=conditionPartDescription" json:"condition_part_description,omitempty"`
	InheritDepth                 *dstore_values.IntegerValue   `protobuf:"bytes,10018,opt,name=inherit_depth,json=inheritDepth" json:"inherit_depth,omitempty"`
	ConditionGroupId             *dstore_values.IntegerValue   `protobuf:"bytes,20002,opt,name=condition_group_id,json=conditionGroupId" json:"condition_group_id,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetOperator1() *dstore_values.StringValue {
	if m != nil {
		return m.Operator1
	}
	return nil
}

func (m *Response_Row) GetCondition1() *dstore_values.StringValue {
	if m != nil {
		return m.Condition1
	}
	return nil
}

func (m *Response_Row) GetCondition2() *dstore_values.StringValue {
	if m != nil {
		return m.Condition2
	}
	return nil
}

func (m *Response_Row) GetOperator2() *dstore_values.StringValue {
	if m != nil {
		return m.Operator2
	}
	return nil
}

func (m *Response_Row) GetConditionGroupDescription() *dstore_values.StringValue {
	if m != nil {
		return m.ConditionGroupDescription
	}
	return nil
}

func (m *Response_Row) GetCombinePartsWithANDOperator() *dstore_values.BooleanValue {
	if m != nil {
		return m.CombinePartsWithANDOperator
	}
	return nil
}

func (m *Response_Row) GetRecursiveEvaluation() *dstore_values.IntegerValue {
	if m != nil {
		return m.RecursiveEvaluation
	}
	return nil
}

func (m *Response_Row) GetConditionPartId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ConditionPartId
	}
	return nil
}

func (m *Response_Row) GetDomainTreeNodeIds() *dstore_values.StringValue {
	if m != nil {
		return m.DomainTreeNodeIds
	}
	return nil
}

func (m *Response_Row) GetNodeCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeCharacteristicId
	}
	return nil
}

func (m *Response_Row) GetCreatedAtDateAndTime() *dstore_values.TimestampValue {
	if m != nil {
		return m.CreatedAtDateAndTime
	}
	return nil
}

func (m *Response_Row) GetUsedInAnItemCondition() *dstore_values.BooleanValue {
	if m != nil {
		return m.UsedInAnItemCondition
	}
	return nil
}

func (m *Response_Row) GetUsedInCampaignItemCondGroups() *dstore_values.BooleanValue {
	if m != nil {
		return m.UsedInCampaignItemCondGroups
	}
	return nil
}

func (m *Response_Row) GetLevelIds() *dstore_values.StringValue {
	if m != nil {
		return m.LevelIds
	}
	return nil
}

func (m *Response_Row) GetEditedAtDateAndTime() *dstore_values.TimestampValue {
	if m != nil {
		return m.EditedAtDateAndTime
	}
	return nil
}

func (m *Response_Row) GetPartSortNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.PartSortNo
	}
	return nil
}

func (m *Response_Row) GetConditionPartDescription() *dstore_values.StringValue {
	if m != nil {
		return m.ConditionPartDescription
	}
	return nil
}

func (m *Response_Row) GetInheritDepth() *dstore_values.IntegerValue {
	if m != nil {
		return m.InheritDepth
	}
	return nil
}

func (m *Response_Row) GetConditionGroupId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ConditionGroupId
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.im_GetItemConditionGroups_Ad.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.im_GetItemConditionGroups_Ad.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.im_GetItemConditionGroups_Ad.Response.Row")
}

var fileDescriptor0 = []byte{
	// 1026 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0x5b, 0x6f, 0x13, 0x47,
	0x14, 0x16, 0x4d, 0x13, 0xcc, 0x49, 0x52, 0x60, 0x92, 0xc2, 0xc4, 0x06, 0x94, 0x80, 0xa8, 0xaa,
	0x3e, 0x38, 0xc5, 0x55, 0x11, 0x15, 0x52, 0x25, 0x27, 0x41, 0xa9, 0x5b, 0x70, 0xda, 0x6d, 0x4a,
	0x55, 0xfa, 0x30, 0x5a, 0xef, 0x0e, 0xce, 0xa8, 0xf6, 0x8c, 0x35, 0x33, 0x4e, 0x94, 0x7f, 0xd1,
	0xfb, 0x95, 0xde, 0xf8, 0x63, 0x3c, 0xf7, 0xfa, 0x17, 0xda, 0x33, 0x3b, 0xbb, 0xb6, 0x77, 0x49,
	0xb2, 0x86, 0x17, 0xdb, 0xeb, 0x39, 0xdf, 0x37, 0xdf, 0x9e, 0x73, 0xbe, 0x33, 0x03, 0xb7, 0x63,
	0x63, 0x95, 0xe6, 0xeb, 0x5c, 0x76, 0x85, 0xe4, 0xeb, 0x03, 0xad, 0x22, 0x1e, 0x0f, 0x35, 0x37,
	0xeb, 0xa2, 0xcf, 0xb6, 0xb9, 0x6d, 0x59, 0xde, 0xdf, 0x54, 0x32, 0x16, 0x56, 0x28, 0xb9, 0xad,
	0xd5, 0x70, 0x60, 0x58, 0x33, 0xae, 0x63, 0x9c, 0x55, 0xe4, 0x35, 0x0f, 0xae, 0x7b, 0x70, 0xfd,
	0x24, 0x44, 0x75, 0x29, 0xdd, 0x68, 0x3f, 0xec, 0x0d, 0xb9, 0xf1, 0x04, 0xd5, 0x95, 0xfc, 0xee,
	0x5c, 0x6b, 0xa5, 0xd3, 0xa5, 0x5a, 0x7e, 0xa9, 0xcf, 0x8d, 0x09, 0xbb, 0x3c, 0x5d, 0xbc, 0x56,
	0x5c, 0xb4, 0xa1, 0x90, 0x0f, 0x95, 0xee, 0x87, 0x6e, 0x53, 0x1f, 0x74, 0xf5, 0xc9, 0x1c, 0xc0,
	0xfb, 0xa1, 0x0e, 0x71, 0x95, 0x6b, 0x43, 0x5a, 0x40, 0xa2, 0x4c, 0x16, 0xeb, 0x3a, 0x5d, 0x4c,
	0xc4, 0xf4, 0xd4, 0xea, 0xa9, 0x57, 0xe7, 0x1b, 0xb5, 0x7a, 0xfa, 0x26, 0xa9, 0x3a, 0x21, 0x2d,
	0xef, 0x72, 0x7d, 0xdf, 0x3d, 0x05, 0xe7, 0xa2, 0xdc, 0xdb, 0xb4, 0x62, 0x72, 0x13, 0x2e, 0x3e,
	0x4d, 0xc5, 0xe4, 0xb0, 0xd7, 0xa3, 0x7f, 0x9c, 0x46, 0xc2, 0x4a, 0xb0, 0x5c, 0xc4, 0xb4, 0x71,
	0x91, 0x44, 0xb0, 0x5a, 0xc4, 0xc5, 0xdc, 0x44, 0x5a, 0x0c, 0x92, 0x7f, 0x7a, 0xe2, 0x33, 0x4e,
	0x5f, 0x48, 0x04, 0x55, 0x0b, 0x82, 0x8c, 0xd5, 0x42, 0x76, 0xbd, 0x9e, 0xcb, 0x79, 0xee, 0xad,
	0x31, 0xc3, 0x5d, 0x24, 0x20, 0x1f, 0xc0, 0xf5, 0xb2, 0x4d, 0xbc, 0xd4, 0x3f, 0xbd, 0xd4, 0xb5,
	0x13, 0xe9, 0x12, 0xdd, 0x0f, 0xa0, 0xd6, 0xe5, 0x96, 0x0d, 0xe5, 0xd0, 0xf0, 0x98, 0x15, 0xd8,
	0x0d, 0x9d, 0x39, 0x32, 0x87, 0x1d, 0xa5, 0x7a, 0x3c, 0x94, 0x5e, 0x33, 0x45, 0xfc, 0x47, 0x09,
	0xbc, 0xd0, 0x1a, 0x64, 0x1b, 0x56, 0x4f, 0xe0, 0xf6, 0x4a, 0xff, 0xf2, 0x4a, 0x2f, 0x1d, 0x47,
	0x92, 0x88, 0xbc, 0x09, 0x15, 0xa5, 0x63, 0xae, 0x59, 0xe7, 0x90, 0xbe, 0x58, 0x5e, 0xd5, 0xd3,
	0x49, 0xf0, 0xc6, 0x21, 0xb9, 0x06, 0x8b, 0x19, 0xce, 0xef, 0xf6, 0xb7, 0xdf, 0x6d, 0x3e, 0x0d,
	0x48, 0xc8, 0x6f, 0xc1, 0x19, 0xad, 0x0e, 0x50, 0xde, 0x50, 0x5a, 0x3a, 0x5b, 0xce, 0x5e, 0xc1,
	0xe8, 0x4d, 0x17, 0x4c, 0xae, 0xc3, 0x4b, 0x23, 0xa4, 0xe7, 0xff, 0xc7, 0xf3, 0x2f, 0x64, 0x21,
	0xc9, 0x06, 0x1d, 0x58, 0x7b, 0x28, 0x7a, 0xd6, 0xcb, 0x70, 0x59, 0x60, 0x83, 0x50, 0x5b, 0x6c,
	0x2b, 0xc3, 0x84, 0x64, 0x4a, 0x72, 0xd7, 0xac, 0x73, 0xe5, 0x89, 0xae, 0x7a, 0x96, 0x8d, 0x43,
	0x97, 0x22, 0xec, 0x7e, 0xdb, 0x8a, 0x4d, 0x4b, 0xee, 0x48, 0x8e, 0x6d, 0xbb, 0x03, 0xaf, 0x94,
	0xee, 0xe1, 0x25, 0xfe, 0xeb, 0x25, 0x5e, 0x39, 0x9e, 0xcc, 0x89, 0xbe, 0xfa, 0xdf, 0x22, 0x54,
	0x02, 0x6e, 0x06, 0x4a, 0x1a, 0x4e, 0x5e, 0x87, 0xd9, 0xc4, 0xbf, 0xa9, 0xa5, 0x46, 0x1d, 0x9c,
	0x0e, 0x07, 0xef, 0xed, 0x3b, 0xee, 0x33, 0xf0, 0x81, 0xe4, 0x13, 0x38, 0xe7, 0x9c, 0xcb, 0x26,
	0xac, 0x8b, 0xed, 0x3f, 0x83, 0xe0, 0x7a, 0x01, 0x5c, 0x34, 0xf8, 0x3d, 0x7c, 0x6e, 0x8d, 0x9f,
	0x83, 0xb3, 0xfd, 0xfc, 0x1f, 0x58, 0xaf, 0xd3, 0xe9, 0xc4, 0xc0, 0xee, 0x74, 0x8c, 0x57, 0x9e,
	0x62, 0xf4, 0xf3, 0xe4, 0x9e, 0xff, 0x0e, 0xb2, 0x70, 0xf2, 0x2e, 0xcc, 0x60, 0x61, 0xb0, 0x83,
	0x1c, 0xea, 0x56, 0x7d, 0xfa, 0x09, 0x57, 0xcf, 0x32, 0x51, 0x0f, 0xd4, 0x41, 0xe0, 0x48, 0xaa,
	0x4f, 0xe6, 0x61, 0x06, 0x1f, 0xc8, 0x05, 0x98, 0x73, 0x3d, 0x80, 0x15, 0xfc, 0xbc, 0x8d, 0xc9,
	0x99, 0x0d, 0x66, 0xf1, 0x11, 0x0b, 0xf2, 0x16, 0x9c, 0x51, 0x03, 0xae, 0x43, 0xdc, 0xe2, 0x06,
	0xfd, 0xa2, 0x5d, 0xea, 0xfc, 0x71, 0x34, 0xb9, 0x0d, 0x30, 0xf2, 0xca, 0x0d, 0xfa, 0x65, 0x39,
	0x76, 0x22, 0x3c, 0x07, 0x6e, 0xd0, 0xaf, 0x9e, 0x05, 0xdc, 0x98, 0x14, 0xdd, 0xa0, 0x5f, 0x3f,
	0x83, 0xe8, 0x06, 0xf9, 0x14, 0x6a, 0x27, 0x8c, 0x26, 0xfa, 0x4d, 0x39, 0xd9, 0xca, 0xb1, 0xc3,
	0x8a, 0xc4, 0x80, 0x93, 0xac, 0xdf, 0xc1, 0x32, 0x25, 0x6d, 0x6d, 0xd8, 0x81, 0xb0, 0x7b, 0x2c,
	0x64, 0x92, 0xc5, 0x2c, 0x93, 0x40, 0xbf, 0x6d, 0x97, 0x5b, 0xa8, 0x96, 0xd2, 0xb8, 0x86, 0x37,
	0x1f, 0x23, 0x49, 0xb3, 0xbd, 0xb5, 0x93, 0x12, 0xa0, 0x87, 0x96, 0x35, 0x8f, 0x86, 0xda, 0x88,
	0x7d, 0xce, 0xb8, 0x83, 0xfb, 0xbe, 0xfd, 0xae, 0x5d, 0x3e, 0x14, 0x96, 0x46, 0xc8, 0x3b, 0x23,
	0x20, 0x79, 0x07, 0xce, 0x8f, 0x73, 0x92, 0xfa, 0x91, 0x7e, 0x3f, 0x05, 0xdb, 0xd9, 0x11, 0xcc,
	0x3b, 0x93, 0xdc, 0x85, 0xe5, 0x58, 0xf5, 0xd1, 0x27, 0xcc, 0x6a, 0x8e, 0x33, 0x5e, 0xc5, 0xce,
	0xd0, 0x86, 0xfe, 0x50, 0x9e, 0xd6, 0xf3, 0x1e, 0xb8, 0x8b, 0xb8, 0x36, 0xc2, 0xd0, 0xe6, 0x24,
	0x80, 0x0b, 0x09, 0x43, 0xb4, 0x87, 0x47, 0x68, 0x84, 0x53, 0x40, 0x18, 0x2b, 0x22, 0x27, 0xee,
	0xc7, 0x29, 0xc4, 0x2d, 0x3b, 0xec, 0x66, 0x0e, 0x8a, 0x0a, 0xef, 0x03, 0x8d, 0x34, 0x0f, 0x2d,
	0x0e, 0xfa, 0xd0, 0xb2, 0x18, 0x7f, 0xb0, 0x10, 0xa7, 0x90, 0x15, 0x7d, 0x4e, 0x7f, 0xf2, 0xac,
	0x97, 0x0b, 0xac, 0x6e, 0xcd, 0xd8, 0xb0, 0x3f, 0x48, 0x79, 0x53, 0x7c, 0xd3, 0x6e, 0xe1, 0x57,
	0x53, 0xc6, 0xbb, 0xb8, 0x8e, 0xbc, 0x2b, 0xc9, 0xe9, 0x81, 0xaf, 0x1e, 0x4a, 0x26, 0xd0, 0x9e,
	0xe3, 0x83, 0x84, 0x3e, 0x9a, 0xa2, 0xe4, 0x2f, 0x3b, 0x78, 0x4b, 0x36, 0x65, 0xce, 0xda, 0x84,
	0xc3, 0x5a, 0xc6, 0x1b, 0xa1, 0x84, 0x50, 0x74, 0x27, 0xd8, 0xb3, 0xd3, 0xef, 0xe7, 0x29, 0xf8,
	0x2f, 0x79, 0xfe, 0xcd, 0x94, 0x24, 0xdb, 0x25, 0x3d, 0x02, 0xf1, 0x70, 0xe9, 0xf1, 0x7d, 0xde,
	0x4b, 0xaa, 0xf5, 0x4b, 0x79, 0xb5, 0x2a, 0x49, 0xb4, 0x2b, 0xd2, 0x2e, 0x5c, 0xe4, 0xa8, 0xf5,
	0xa8, 0x7c, 0xfe, 0x3a, 0x55, 0x3e, 0x97, 0x3c, 0x3c, 0x9f, 0xce, 0xb7, 0x61, 0x21, 0x69, 0x44,
	0xa3, 0xf0, 0x43, 0x2a, 0xfa, 0xdb, 0x14, 0x05, 0x07, 0x87, 0xf8, 0x10, 0x01, 0x6d, 0x85, 0x73,
	0xbd, 0x5a, 0x68, 0xe9, 0x49, 0x97, 0xff, 0x5e, 0xfe, 0x82, 0x34, 0xd7, 0xda, 0x93, 0x26, 0x6f,
	0xc2, 0xa2, 0x90, 0x7b, 0xd8, 0x51, 0x8e, 0x73, 0x60, 0xf7, 0xe8, 0xe3, 0x29, 0xb4, 0x2d, 0xa4,
	0x90, 0x2d, 0x87, 0x20, 0xef, 0x1d, 0x79, 0x0f, 0x7c, 0xfc, 0xe8, 0x79, 0x6e, 0x82, 0x1b, 0xbb,
	0x50, 0x13, 0xaa, 0x70, 0x48, 0x8c, 0xef, 0xd0, 0x0f, 0xde, 0x7c, 0xae, 0xdb, 0x75, 0x67, 0x2e,
	0xb9, 0xc0, 0xbe, 0xf1, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xd1, 0xaa, 0x39, 0x4e, 0x9d, 0x0b,
	0x00, 0x00,
}
