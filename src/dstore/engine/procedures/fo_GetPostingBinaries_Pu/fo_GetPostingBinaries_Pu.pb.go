// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/fo_GetPostingBinaries_Pu.proto
// DO NOT EDIT!

/*
Package fo_GetPostingBinaries_Pu is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/fo_GetPostingBinaries_Pu.proto

It has these top-level messages:
	Parameters
	Response
*/
package fo_GetPostingBinaries_Pu

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "dstore/values"
import dstore_engine_error "dstore/engine/error"
import dstore_engine_message "dstore/engine/message"
import dstore_engine_metainformation "dstore/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	PersonIdentificationValues     *dstore_values.StringValue  `protobuf:"bytes,1,opt,name=person_identification_values,json=personIdentificationValues" json:"person_identification_values,omitempty"`
	PersonIdentificationValuesNull bool                        `protobuf:"varint,1001,opt,name=person_identification_values_null,json=personIdentificationValuesNull" json:"person_identification_values_null,omitempty"`
	PersonTypeId                   *dstore_values.IntegerValue `protobuf:"bytes,2,opt,name=person_type_id,json=personTypeId" json:"person_type_id,omitempty"`
	PersonTypeIdNull               bool                        `protobuf:"varint,1002,opt,name=person_type_id_null,json=personTypeIdNull" json:"person_type_id_null,omitempty"`
	UniqueId                       *dstore_values.StringValue  `protobuf:"bytes,3,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
	UniqueIdNull                   bool                        `protobuf:"varint,1003,opt,name=unique_id_null,json=uniqueIdNull" json:"unique_id_null,omitempty"`
	PostingId                      *dstore_values.IntegerValue `protobuf:"bytes,4,opt,name=posting_id,json=postingId" json:"posting_id,omitempty"`
	PostingIdNull                  bool                        `protobuf:"varint,1004,opt,name=posting_id_null,json=postingIdNull" json:"posting_id_null,omitempty"`
	SortNo                         *dstore_values.IntegerValue `protobuf:"bytes,5,opt,name=sort_no,json=sortNo" json:"sort_no,omitempty"`
	SortNoNull                     bool                        `protobuf:"varint,1005,opt,name=sort_no_null,json=sortNoNull" json:"sort_no_null,omitempty"`
	IncludeBinaryCode              *dstore_values.BooleanValue `protobuf:"bytes,6,opt,name=include_binary_code,json=includeBinaryCode" json:"include_binary_code,omitempty"`
	IncludeBinaryCodeNull          bool                        `protobuf:"varint,1006,opt,name=include_binary_code_null,json=includeBinaryCodeNull" json:"include_binary_code_null,omitempty"`
	PostingBinaryIdentifier        *dstore_values.StringValue  `protobuf:"bytes,7,opt,name=posting_binary_identifier,json=postingBinaryIdentifier" json:"posting_binary_identifier,omitempty"`
	PostingBinaryIdentifierNull    bool                        `protobuf:"varint,1007,opt,name=posting_binary_identifier_null,json=postingBinaryIdentifierNull" json:"posting_binary_identifier_null,omitempty"`
	SeparatorInIdentVals           *dstore_values.StringValue  `protobuf:"bytes,8,opt,name=separator_in_ident_vals,json=separatorInIdentVals" json:"separator_in_ident_vals,omitempty"`
	SeparatorInIdentValsNull       bool                        `protobuf:"varint,1008,opt,name=separator_in_ident_vals_null,json=separatorInIdentValsNull" json:"separator_in_ident_vals_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetPersonIdentificationValues() *dstore_values.StringValue {
	if m != nil {
		return m.PersonIdentificationValues
	}
	return nil
}

func (m *Parameters) GetPersonTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonTypeId
	}
	return nil
}

func (m *Parameters) GetUniqueId() *dstore_values.StringValue {
	if m != nil {
		return m.UniqueId
	}
	return nil
}

func (m *Parameters) GetPostingId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PostingId
	}
	return nil
}

func (m *Parameters) GetSortNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.SortNo
	}
	return nil
}

func (m *Parameters) GetIncludeBinaryCode() *dstore_values.BooleanValue {
	if m != nil {
		return m.IncludeBinaryCode
	}
	return nil
}

func (m *Parameters) GetPostingBinaryIdentifier() *dstore_values.StringValue {
	if m != nil {
		return m.PostingBinaryIdentifier
	}
	return nil
}

func (m *Parameters) GetSeparatorInIdentVals() *dstore_values.StringValue {
	if m != nil {
		return m.SeparatorInIdentVals
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId                         int32                         `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	Description                   *dstore_values.StringValue    `protobuf:"bytes,10001,opt,name=description" json:"description,omitempty"`
	ContentType                   *dstore_values.StringValue    `protobuf:"bytes,10002,opt,name=content_type,json=contentType" json:"content_type,omitempty"`
	PostingBinaryIdentifier       *dstore_values.StringValue    `protobuf:"bytes,10003,opt,name=posting_binary_identifier,json=postingBinaryIdentifier" json:"posting_binary_identifier,omitempty"`
	Filename                      *dstore_values.StringValue    `protobuf:"bytes,10004,opt,name=filename" json:"filename,omitempty"`
	FilesizeInKB                  *dstore_values.IntegerValue   `protobuf:"bytes,10005,opt,name=filesize_in_k_b,json=filesizeInKB" json:"filesize_in_k_b,omitempty"`
	LastModifiedAtDateAndTimeChar *dstore_values.StringValue    `protobuf:"bytes,10006,opt,name=last_modified_at_date_and_time_char,json=lastModifiedAtDateAndTimeChar" json:"last_modified_at_date_and_time_char,omitempty"`
	SortNo                        *dstore_values.IntegerValue   `protobuf:"bytes,10007,opt,name=sort_no,json=sortNo" json:"sort_no,omitempty"`
	LastModifiedAtDateAndTime     *dstore_values.TimestampValue `protobuf:"bytes,10008,opt,name=last_modified_at_date_and_time,json=lastModifiedAtDateAndTime" json:"last_modified_at_date_and_time,omitempty"`
	BinaryCode                    *dstore_values.BytesValue     `protobuf:"bytes,20009,opt,name=binary_code,json=binaryCode" json:"binary_code,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetDescription() *dstore_values.StringValue {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *Response_Row) GetContentType() *dstore_values.StringValue {
	if m != nil {
		return m.ContentType
	}
	return nil
}

func (m *Response_Row) GetPostingBinaryIdentifier() *dstore_values.StringValue {
	if m != nil {
		return m.PostingBinaryIdentifier
	}
	return nil
}

func (m *Response_Row) GetFilename() *dstore_values.StringValue {
	if m != nil {
		return m.Filename
	}
	return nil
}

func (m *Response_Row) GetFilesizeInKB() *dstore_values.IntegerValue {
	if m != nil {
		return m.FilesizeInKB
	}
	return nil
}

func (m *Response_Row) GetLastModifiedAtDateAndTimeChar() *dstore_values.StringValue {
	if m != nil {
		return m.LastModifiedAtDateAndTimeChar
	}
	return nil
}

func (m *Response_Row) GetSortNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.SortNo
	}
	return nil
}

func (m *Response_Row) GetLastModifiedAtDateAndTime() *dstore_values.TimestampValue {
	if m != nil {
		return m.LastModifiedAtDateAndTime
	}
	return nil
}

func (m *Response_Row) GetBinaryCode() *dstore_values.BytesValue {
	if m != nil {
		return m.BinaryCode
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.fo_GetPostingBinaries_Pu.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.fo_GetPostingBinaries_Pu.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.fo_GetPostingBinaries_Pu.Response.Row")
}

var fileDescriptor0 = []byte{
	// 855 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0xe9, 0x6e, 0xeb, 0x44,
	0x14, 0xd6, 0x25, 0x64, 0xb9, 0xa7, 0xe1, 0xf6, 0x32, 0x05, 0xae, 0x93, 0xdc, 0x1b, 0xd1, 0x56,
	0x2c, 0xbf, 0x5c, 0x96, 0xa2, 0x22, 0xc4, 0xa2, 0x2e, 0x80, 0x42, 0xd5, 0x28, 0x58, 0x55, 0x11,
	0x08, 0x69, 0xe4, 0xc4, 0x93, 0x30, 0x22, 0x99, 0x31, 0x33, 0x13, 0xaa, 0xf0, 0x8b, 0x47, 0x60,
	0x87, 0x1f, 0xbc, 0x00, 0xff, 0x79, 0x10, 0x5e, 0x83, 0x9d, 0x47, 0x60, 0xc6, 0xc7, 0xd9, 0xdc,
	0xa6, 0x0e, 0xfc, 0x69, 0x3a, 0x39, 0xe7, 0x5b, 0x6c, 0x9f, 0xf3, 0xc5, 0x70, 0x10, 0x69, 0x23,
	0x15, 0xdb, 0x63, 0x62, 0xc0, 0x05, 0xdb, 0x8b, 0x95, 0xec, 0xb1, 0x68, 0xac, 0x98, 0xde, 0xeb,
	0x4b, 0xfa, 0x36, 0x33, 0x1d, 0xa9, 0x0d, 0x17, 0x83, 0x23, 0x2e, 0x42, 0xc5, 0x99, 0xa6, 0x9d,
	0xb1, 0x6f, 0x7b, 0x8c, 0x24, 0x4f, 0x23, 0xd0, 0x47, 0xa0, 0xbf, 0xaa, 0xbb, 0xbe, 0x95, 0x0a,
	0x7c, 0x1a, 0x0e, 0xc7, 0x4c, 0x23, 0xb8, 0x5e, 0x5b, 0x56, 0x65, 0x4a, 0x49, 0x95, 0x96, 0x1a,
	0xcb, 0xa5, 0x11, 0xd3, 0x3a, 0x1c, 0xb0, 0xb4, 0xb8, 0x9b, 0x2d, 0x9a, 0x90, 0x8b, 0xbe, 0x54,
	0xa3, 0xd0, 0x70, 0x29, 0xb0, 0x69, 0xe7, 0xf3, 0x0a, 0x40, 0x27, 0x54, 0xa1, 0xad, 0x32, 0xa5,
	0xc9, 0x87, 0x70, 0x3f, 0xb6, 0x9f, 0x52, 0x50, 0x1e, 0x31, 0x61, 0x78, 0x9f, 0xf7, 0x92, 0x6e,
	0x8a, 0x8e, 0xbc, 0x5b, 0x4f, 0xde, 0x7a, 0x76, 0xe3, 0x85, 0xba, 0x9f, 0x5e, 0x4f, 0xea, 0x53,
	0x1b, 0x65, 0x2f, 0xe4, 0xc2, 0x1d, 0x82, 0x3a, 0xe2, 0x5b, 0x4b, 0xf0, 0xa4, 0xa4, 0xc9, 0x3b,
	0xb0, 0x7d, 0x13, 0x3b, 0x15, 0xe3, 0xe1, 0xd0, 0xfb, 0xb5, 0x6c, 0x35, 0x2a, 0x41, 0x73, 0x35,
	0x4f, 0xdb, 0xb6, 0x91, 0x43, 0xb8, 0x93, 0x72, 0x99, 0x49, 0xcc, 0x2c, 0xa1, 0xf7, 0x50, 0xe2,
	0xad, 0x91, 0xf1, 0xc6, 0x85, 0x61, 0x03, 0xa6, 0xd0, 0x5c, 0x15, 0x21, 0xe7, 0x16, 0xd1, 0x8a,
	0x88, 0x0f, 0x5b, 0xcb, 0x14, 0x68, 0xe0, 0x37, 0x34, 0x70, 0x77, 0xb1, 0x37, 0x91, 0x3c, 0x80,
	0xdb, 0x63, 0xc1, 0x3f, 0x19, 0x27, 0x6a, 0x85, 0xdc, 0x3b, 0x51, 0xc1, 0x66, 0x2b, 0xf4, 0x14,
	0xdc, 0x99, 0x01, 0x51, 0xe3, 0x77, 0xd4, 0xa8, 0x4e, 0x5b, 0x12, 0xfe, 0x57, 0x00, 0x62, 0x9c,
	0x09, 0x27, 0xf0, 0x70, 0xfe, 0xe5, 0xdc, 0x4e, 0xdb, 0xad, 0xc4, 0x33, 0xb0, 0x39, 0xc7, 0xa2,
	0xc6, 0x1f, 0xa8, 0xf1, 0xc8, 0xac, 0x29, 0x11, 0xd9, 0x87, 0xb2, 0x96, 0xca, 0x50, 0x21, 0xbd,
	0x62, 0xbe, 0x42, 0xc9, 0xf5, 0xb6, 0x25, 0xd9, 0x86, 0x6a, 0x8a, 0x42, 0xee, 0x3f, 0x91, 0x1b,
	0xb0, 0x9c, 0x10, 0x9f, 0xc2, 0x16, 0x17, 0xbd, 0xe1, 0x38, 0x62, 0xb4, 0xeb, 0x46, 0x7a, 0x42,
	0x7b, 0x32, 0x62, 0x5e, 0xe9, 0x5a, 0x91, 0xae, 0x94, 0x43, 0x16, 0xe2, 0xf3, 0x0c, 0x1e, 0x4d,
	0x71, 0xc9, 0x26, 0x4c, 0x8e, 0x2d, 0x8a, 0xbc, 0x0c, 0xde, 0x35, 0x64, 0xa8, 0xfd, 0x17, 0x6a,
	0x3f, 0x7e, 0x05, 0x95, 0xd8, 0xb8, 0x80, 0xda, 0xf4, 0x46, 0xa4, 0xc8, 0xe9, 0xac, 0x31, 0xe5,
	0x95, 0x73, 0x1f, 0xda, 0xbd, 0x78, 0x61, 0x2b, 0x27, 0xad, 0x19, 0x94, 0x9c, 0x40, 0x73, 0x25,
	0x2f, 0xfa, 0xfa, 0x1b, 0x7d, 0x35, 0x56, 0x30, 0x24, 0xee, 0xde, 0x85, 0x7b, 0x9a, 0xc5, 0x76,
	0xdf, 0xac, 0x3e, 0xe5, 0xe9, 0x1e, 0xb8, 0xf1, 0xd7, 0x5e, 0x25, 0xd7, 0xdb, 0x63, 0x33, 0x68,
	0x0b, 0xf7, 0xc2, 0x7e, 0xad, 0xc9, 0x1b, 0x70, 0x7f, 0x05, 0x25, 0xda, 0xfa, 0x07, 0x6d, 0x79,
	0xd7, 0x81, 0x9d, 0xa7, 0x9d, 0x5f, 0xca, 0x50, 0x09, 0x98, 0x8e, 0xa5, 0xd0, 0x8c, 0x3c, 0x07,
	0xc5, 0x24, 0x60, 0xb2, 0x9b, 0x9e, 0x26, 0x17, 0x86, 0xcf, 0x9b, 0xee, 0x6f, 0x80, 0x8d, 0xe4,
	0x7d, 0xb8, 0xeb, 0xa2, 0x85, 0x2e, 0x64, 0x8b, 0x5d, 0xc5, 0x82, 0x05, 0xfb, 0x19, 0x70, 0x36,
	0x81, 0xce, 0xec, 0xb9, 0x35, 0x3f, 0x07, 0x9b, 0xa3, 0xe5, 0x2f, 0xec, 0x14, 0x94, 0xd3, 0x48,
	0xb3, 0xeb, 0xe6, 0x18, 0x9b, 0x57, 0x18, 0x31, 0xf0, 0xce, 0xf0, 0x33, 0x98, 0xb6, 0x93, 0xb7,
	0xa0, 0xa0, 0xe4, 0xa5, 0xdd, 0x21, 0x87, 0xda, 0xf7, 0xd7, 0x8b, 0x5f, 0x7f, 0x7a, 0x17, 0xfc,
	0x40, 0x5e, 0x06, 0x8e, 0xa0, 0xfe, 0x73, 0x11, 0x0a, 0xf6, 0x40, 0x9e, 0x80, 0x92, 0x3d, 0xba,
	0xb5, 0xfc, 0xa2, 0x6d, 0x6f, 0x4c, 0x31, 0x28, 0xda, 0xa3, 0x5d, 0xbb, 0xd7, 0x60, 0x23, 0x62,
	0xba, 0xa7, 0x78, 0x9c, 0x5c, 0xf7, 0x97, 0xed, 0xdc, 0x87, 0xb8, 0xd8, 0x4f, 0x5e, 0x87, 0x6a,
	0x4f, 0xda, 0x7d, 0xb3, 0x0f, 0xcc, 0x45, 0x90, 0xf7, 0xd5, 0x1a, 0xf8, 0x14, 0xe0, 0x72, 0x89,
	0xbc, 0x77, 0xd3, 0xb0, 0x7f, 0xdd, 0xfe, 0xff, 0xd3, 0x7e, 0x00, 0x95, 0x3e, 0x1f, 0x32, 0x61,
	0x7f, 0x17, 0xbc, 0x6f, 0xf2, 0x79, 0x66, 0xcd, 0xe4, 0x18, 0x36, 0xdd, 0xff, 0x9a, 0x7f, 0xc6,
	0xdc, 0x30, 0x7e, 0x4c, 0xbb, 0xde, 0xb7, 0xed, 0x35, 0x82, 0x79, 0x0a, 0x6a, 0x89, 0xd3, 0x23,
	0x32, 0x80, 0xdd, 0x61, 0xa8, 0x0d, 0x1d, 0xc9, 0xc8, 0xd9, 0x89, 0x68, 0x68, 0x68, 0x14, 0x1a,
	0x46, 0x43, 0x11, 0x51, 0xc3, 0x47, 0x8c, 0xf6, 0x3e, 0x0a, 0x95, 0xf7, 0x5d, 0xbe, 0xb1, 0x07,
	0x8e, 0xe7, 0x2c, 0xa5, 0x39, 0x34, 0x27, 0x96, 0xe4, 0x50, 0x44, 0xe7, 0x96, 0xe2, 0xd8, 0x32,
	0x90, 0x97, 0xe6, 0x61, 0xf8, 0x7d, 0x7b, 0xfd, 0x34, 0x0c, 0xa1, 0x79, 0xb3, 0x3f, 0xef, 0x07,
	0x64, 0x7b, 0x90, 0x61, 0x73, 0x35, 0x6d, 0xc2, 0x51, 0x8c, 0x7c, 0xb5, 0x95, 0xee, 0xc8, 0xab,
	0xb0, 0xb1, 0x98, 0xa2, 0x3f, 0xfd, 0x88, 0xfb, 0x58, 0xcb, 0xe6, 0xe8, 0xc4, 0x30, 0x8d, 0x64,
	0xd0, 0x9d, 0x05, 0xe1, 0x51, 0x07, 0x1a, 0x5c, 0x66, 0xa6, 0x7e, 0xfe, 0xb6, 0xf2, 0xc1, 0xf3,
	0xff, 0xf9, 0x3d, 0xa6, 0x5b, 0x4a, 0x5e, 0x17, 0x5e, 0xfc, 0x37, 0x00, 0x00, 0xff, 0xff, 0x78,
	0x55, 0x84, 0x2a, 0x03, 0x09, 0x00, 0x00,
}
