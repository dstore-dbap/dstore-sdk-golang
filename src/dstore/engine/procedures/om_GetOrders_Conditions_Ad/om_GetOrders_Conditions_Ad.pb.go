// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/om_GetOrders_Conditions_Ad.proto
// DO NOT EDIT!

/*
Package om_GetOrders_Conditions_Ad is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/om_GetOrders_Conditions_Ad.proto

It has these top-level messages:
	Parameters
	Response
*/
package om_GetOrders_Conditions_Ad

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "dstore/values"
import dstore_engine_error "dstore/engine/error"
import dstore_engine_message "dstore/engine/message"
import dstore_engine_metainformation "dstore/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	OrderByColumn                     *dstore_values.IntegerValue   `protobuf:"bytes,1,opt,name=order_by_column,json=orderByColumn" json:"order_by_column,omitempty"`
	OrderByColumnNull                 bool                          `protobuf:"varint,1001,opt,name=order_by_column_null,json=orderByColumnNull" json:"order_by_column_null,omitempty"`
	CreateValidOrderInfos             *dstore_values.BooleanValue   `protobuf:"bytes,2,opt,name=create_valid_order_infos,json=createValidOrderInfos" json:"create_valid_order_infos,omitempty"`
	CreateValidOrderInfosNull         bool                          `protobuf:"varint,1002,opt,name=create_valid_order_infos_null,json=createValidOrderInfosNull" json:"create_valid_order_infos_null,omitempty"`
	BruttoSum                         *dstore_values.StringValue    `protobuf:"bytes,3,opt,name=brutto_sum,json=bruttoSum" json:"brutto_sum,omitempty"`
	BruttoSumNull                     bool                          `protobuf:"varint,1003,opt,name=brutto_sum_null,json=bruttoSumNull" json:"brutto_sum_null,omitempty"`
	CurrencyId                        *dstore_values.IntegerValue   `protobuf:"bytes,4,opt,name=currency_id,json=currencyId" json:"currency_id,omitempty"`
	CurrencyIdNull                    bool                          `protobuf:"varint,1004,opt,name=currency_id_null,json=currencyIdNull" json:"currency_id_null,omitempty"`
	QuantityForOneOrderContent        *dstore_values.StringValue    `protobuf:"bytes,5,opt,name=quantity_for_one_order_content,json=quantityForOneOrderContent" json:"quantity_for_one_order_content,omitempty"`
	QuantityForOneOrderContentNull    bool                          `protobuf:"varint,1005,opt,name=quantity_for_one_order_content_null,json=quantityForOneOrderContentNull" json:"quantity_for_one_order_content_null,omitempty"`
	Combination                       *dstore_values.StringValue    `protobuf:"bytes,6,opt,name=combination" json:"combination,omitempty"`
	CombinationNull                   bool                          `protobuf:"varint,1006,opt,name=combination_null,json=combinationNull" json:"combination_null,omitempty"`
	FromDate                          *dstore_values.TimestampValue `protobuf:"bytes,7,opt,name=from_date,json=fromDate" json:"from_date,omitempty"`
	FromDateNull                      bool                          `protobuf:"varint,1007,opt,name=from_date_null,json=fromDateNull" json:"from_date_null,omitempty"`
	ToDate                            *dstore_values.TimestampValue `protobuf:"bytes,8,opt,name=to_date,json=toDate" json:"to_date,omitempty"`
	ToDateNull                        bool                          `protobuf:"varint,1008,opt,name=to_date_null,json=toDateNull" json:"to_date_null,omitempty"`
	OrderDesc                         *dstore_values.BooleanValue   `protobuf:"bytes,9,opt,name=order_desc,json=orderDesc" json:"order_desc,omitempty"`
	OrderDescNull                     bool                          `protobuf:"varint,1009,opt,name=order_desc_null,json=orderDescNull" json:"order_desc_null,omitempty"`
	DateAndTimeFormat                 *dstore_values.IntegerValue   `protobuf:"bytes,10,opt,name=date_and_time_format,json=dateAndTimeFormat" json:"date_and_time_format,omitempty"`
	DateAndTimeFormatNull             bool                          `protobuf:"varint,1010,opt,name=date_and_time_format_null,json=dateAndTimeFormatNull" json:"date_and_time_format_null,omitempty"`
	IncludeTime                       *dstore_values.BooleanValue   `protobuf:"bytes,11,opt,name=include_time,json=includeTime" json:"include_time,omitempty"`
	IncludeTimeNull                   bool                          `protobuf:"varint,1011,opt,name=include_time_null,json=includeTimeNull" json:"include_time_null,omitempty"`
	GetInfoForValidOrderContent       *dstore_values.BooleanValue   `protobuf:"bytes,12,opt,name=get_info_for_valid_order_content,json=getInfoForValidOrderContent" json:"get_info_for_valid_order_content,omitempty"`
	GetInfoForValidOrderContentNull   bool                          `protobuf:"varint,1012,opt,name=get_info_for_valid_order_content_null,json=getInfoForValidOrderContentNull" json:"get_info_for_valid_order_content_null,omitempty"`
	OrderStateList                    *dstore_values.StringValue    `protobuf:"bytes,13,opt,name=order_state_list,json=orderStateList" json:"order_state_list,omitempty"`
	OrderStateListNull                bool                          `protobuf:"varint,1013,opt,name=order_state_list_null,json=orderStateListNull" json:"order_state_list_null,omitempty"`
	SkipOHavingDifferentOStates       *dstore_values.BooleanValue   `protobuf:"bytes,14,opt,name=skip_o_having_different_o_states,json=skipOHavingDifferentOStates" json:"skip_o_having_different_o_states,omitempty"`
	SkipOHavingDifferentOStatesNull   bool                          `protobuf:"varint,1014,opt,name=skip_o_having_different_o_states_null,json=skipOHavingDifferentOStatesNull" json:"skip_o_having_different_o_states_null,omitempty"`
	PaymentTypeIdList                 *dstore_values.StringValue    `protobuf:"bytes,15,opt,name=payment_type_id_list,json=paymentTypeIdList" json:"payment_type_id_list,omitempty"`
	PaymentTypeIdListNull             bool                          `protobuf:"varint,1015,opt,name=payment_type_id_list_null,json=paymentTypeIdListNull" json:"payment_type_id_list_null,omitempty"`
	ShippingTypeIdList                *dstore_values.StringValue    `protobuf:"bytes,16,opt,name=shipping_type_id_list,json=shippingTypeIdList" json:"shipping_type_id_list,omitempty"`
	ShippingTypeIdListNull            bool                          `protobuf:"varint,1016,opt,name=shipping_type_id_list_null,json=shippingTypeIdListNull" json:"shipping_type_id_list_null,omitempty"`
	ShowPersonCharacteristics         *dstore_values.BooleanValue   `protobuf:"bytes,17,opt,name=show_person_characteristics,json=showPersonCharacteristics" json:"show_person_characteristics,omitempty"`
	ShowPersonCharacteristicsNull     bool                          `protobuf:"varint,1017,opt,name=show_person_characteristics_null,json=showPersonCharacteristicsNull" json:"show_person_characteristics_null,omitempty"`
	ConvertResultToCurrencyId         *dstore_values.IntegerValue   `protobuf:"bytes,18,opt,name=convert_result_to_currency_id,json=convertResultToCurrencyId" json:"convert_result_to_currency_id,omitempty"`
	ConvertResultToCurrencyIdNull     bool                          `protobuf:"varint,1018,opt,name=convert_result_to_currency_id_null,json=convertResultToCurrencyIdNull" json:"convert_result_to_currency_id_null,omitempty"`
	ConvertResultToGivenCurrency      *dstore_values.BooleanValue   `protobuf:"bytes,19,opt,name=convert_result_to_given_currency,json=convertResultToGivenCurrency" json:"convert_result_to_given_currency,omitempty"`
	ConvertResultToGivenCurrencyNull  bool                          `protobuf:"varint,1019,opt,name=convert_result_to_given_currency_null,json=convertResultToGivenCurrencyNull" json:"convert_result_to_given_currency_null,omitempty"`
	PurchaseOrder                     *dstore_values.BooleanValue   `protobuf:"bytes,20,opt,name=purchase_order,json=purchaseOrder" json:"purchase_order,omitempty"`
	PurchaseOrderNull                 bool                          `protobuf:"varint,1020,opt,name=purchase_order_null,json=purchaseOrderNull" json:"purchase_order_null,omitempty"`
	InputNestLevelOInfoConds          *dstore_values.IntegerValue   `protobuf:"bytes,21,opt,name=input_nest_level_o_info_conds,json=inputNestLevelOInfoConds" json:"input_nest_level_o_info_conds,omitempty"`
	InputNestLevelOInfoCondsNull      bool                          `protobuf:"varint,1021,opt,name=input_nest_level_o_info_conds_null,json=inputNestLevelOInfoCondsNull" json:"input_nest_level_o_info_conds_null,omitempty"`
	ValueSeparatorINOperator          *dstore_values.StringValue    `protobuf:"bytes,22,opt,name=value_separator_i_n_operator,json=valueSeparatorINOperator" json:"value_separator_i_n_operator,omitempty"`
	ValueSeparatorINOperatorNull      bool                          `protobuf:"varint,1022,opt,name=value_separator_i_n_operator_null,json=valueSeparatorINOperatorNull" json:"value_separator_i_n_operator_null,omitempty"`
	Country                           *dstore_values.StringValue    `protobuf:"bytes,23,opt,name=country" json:"country,omitempty"`
	CountryNull                       bool                          `protobuf:"varint,1023,opt,name=country_null,json=countryNull" json:"country_null,omitempty"`
	LanguageId                        *dstore_values.IntegerValue   `protobuf:"bytes,24,opt,name=language_id,json=languageId" json:"language_id,omitempty"`
	LanguageIdNull                    bool                          `protobuf:"varint,1024,opt,name=language_id_null,json=languageIdNull" json:"language_id_null,omitempty"`
	InputNestLevelOConInfoConds       *dstore_values.IntegerValue   `protobuf:"bytes,25,opt,name=input_nest_level_o_con_info_conds,json=inputNestLevelOConInfoConds" json:"input_nest_level_o_con_info_conds,omitempty"`
	InputNestLevelOConInfoCondsNull   bool                          `protobuf:"varint,1025,opt,name=input_nest_level_o_con_info_conds_null,json=inputNestLevelOConInfoCondsNull" json:"input_nest_level_o_con_info_conds_null,omitempty"`
	CondsMustBeFulfilledForOConId     *dstore_values.BooleanValue   `protobuf:"bytes,26,opt,name=conds_must_be_fulfilled_for_o_con_id,json=condsMustBeFulfilledForOConId" json:"conds_must_be_fulfilled_for_o_con_id,omitempty"`
	CondsMustBeFulfilledForOConIdNull bool                          `protobuf:"varint,1026,opt,name=conds_must_be_fulfilled_for_o_con_id_null,json=condsMustBeFulfilledForOConIdNull" json:"conds_must_be_fulfilled_for_o_con_id_null,omitempty"`
	FilterByNodeIdsInOneId            *dstore_values.IntegerValue   `protobuf:"bytes,27,opt,name=filter_by_node_ids_in_one_id,json=filterByNodeIdsInOneId" json:"filter_by_node_ids_in_one_id,omitempty"`
	FilterByNodeIdsInOneIdNull        bool                          `protobuf:"varint,1027,opt,name=filter_by_node_ids_in_one_id_null,json=filterByNodeIdsInOneIdNull" json:"filter_by_node_ids_in_one_id_null,omitempty"`
	GetComputedSum                    *dstore_values.BooleanValue   `protobuf:"bytes,28,opt,name=get_computed_sum,json=getComputedSum" json:"get_computed_sum,omitempty"`
	GetComputedSumNull                bool                          `protobuf:"varint,1028,opt,name=get_computed_sum_null,json=getComputedSumNull" json:"get_computed_sum_null,omitempty"`
	OnlyValidPosForComputedSum        *dstore_values.BooleanValue   `protobuf:"bytes,29,opt,name=only_valid_pos_for_computed_sum,json=onlyValidPosForComputedSum" json:"only_valid_pos_for_computed_sum,omitempty"`
	OnlyValidPosForComputedSumNull    bool                          `protobuf:"varint,1029,opt,name=only_valid_pos_for_computed_sum_null,json=onlyValidPosForComputedSumNull" json:"only_valid_pos_for_computed_sum_null,omitempty"`
	OrderSurchIdsForComputedSum       *dstore_values.StringValue    `protobuf:"bytes,30,opt,name=order_surch_ids_for_computed_sum,json=orderSurchIdsForComputedSum" json:"order_surch_ids_for_computed_sum,omitempty"`
	OrderSurchIdsForComputedSumNull   bool                          `protobuf:"varint,1030,opt,name=order_surch_ids_for_computed_sum_null,json=orderSurchIdsForComputedSumNull" json:"order_surch_ids_for_computed_sum_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetOrderByColumn() *dstore_values.IntegerValue {
	if m != nil {
		return m.OrderByColumn
	}
	return nil
}

func (m *Parameters) GetCreateValidOrderInfos() *dstore_values.BooleanValue {
	if m != nil {
		return m.CreateValidOrderInfos
	}
	return nil
}

func (m *Parameters) GetBruttoSum() *dstore_values.StringValue {
	if m != nil {
		return m.BruttoSum
	}
	return nil
}

func (m *Parameters) GetCurrencyId() *dstore_values.IntegerValue {
	if m != nil {
		return m.CurrencyId
	}
	return nil
}

func (m *Parameters) GetQuantityForOneOrderContent() *dstore_values.StringValue {
	if m != nil {
		return m.QuantityForOneOrderContent
	}
	return nil
}

func (m *Parameters) GetCombination() *dstore_values.StringValue {
	if m != nil {
		return m.Combination
	}
	return nil
}

func (m *Parameters) GetFromDate() *dstore_values.TimestampValue {
	if m != nil {
		return m.FromDate
	}
	return nil
}

func (m *Parameters) GetToDate() *dstore_values.TimestampValue {
	if m != nil {
		return m.ToDate
	}
	return nil
}

func (m *Parameters) GetOrderDesc() *dstore_values.BooleanValue {
	if m != nil {
		return m.OrderDesc
	}
	return nil
}

func (m *Parameters) GetDateAndTimeFormat() *dstore_values.IntegerValue {
	if m != nil {
		return m.DateAndTimeFormat
	}
	return nil
}

func (m *Parameters) GetIncludeTime() *dstore_values.BooleanValue {
	if m != nil {
		return m.IncludeTime
	}
	return nil
}

func (m *Parameters) GetGetInfoForValidOrderContent() *dstore_values.BooleanValue {
	if m != nil {
		return m.GetInfoForValidOrderContent
	}
	return nil
}

func (m *Parameters) GetOrderStateList() *dstore_values.StringValue {
	if m != nil {
		return m.OrderStateList
	}
	return nil
}

func (m *Parameters) GetSkipOHavingDifferentOStates() *dstore_values.BooleanValue {
	if m != nil {
		return m.SkipOHavingDifferentOStates
	}
	return nil
}

func (m *Parameters) GetPaymentTypeIdList() *dstore_values.StringValue {
	if m != nil {
		return m.PaymentTypeIdList
	}
	return nil
}

func (m *Parameters) GetShippingTypeIdList() *dstore_values.StringValue {
	if m != nil {
		return m.ShippingTypeIdList
	}
	return nil
}

func (m *Parameters) GetShowPersonCharacteristics() *dstore_values.BooleanValue {
	if m != nil {
		return m.ShowPersonCharacteristics
	}
	return nil
}

func (m *Parameters) GetConvertResultToCurrencyId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ConvertResultToCurrencyId
	}
	return nil
}

func (m *Parameters) GetConvertResultToGivenCurrency() *dstore_values.BooleanValue {
	if m != nil {
		return m.ConvertResultToGivenCurrency
	}
	return nil
}

func (m *Parameters) GetPurchaseOrder() *dstore_values.BooleanValue {
	if m != nil {
		return m.PurchaseOrder
	}
	return nil
}

func (m *Parameters) GetInputNestLevelOInfoConds() *dstore_values.IntegerValue {
	if m != nil {
		return m.InputNestLevelOInfoConds
	}
	return nil
}

func (m *Parameters) GetValueSeparatorINOperator() *dstore_values.StringValue {
	if m != nil {
		return m.ValueSeparatorINOperator
	}
	return nil
}

func (m *Parameters) GetCountry() *dstore_values.StringValue {
	if m != nil {
		return m.Country
	}
	return nil
}

func (m *Parameters) GetLanguageId() *dstore_values.IntegerValue {
	if m != nil {
		return m.LanguageId
	}
	return nil
}

func (m *Parameters) GetInputNestLevelOConInfoConds() *dstore_values.IntegerValue {
	if m != nil {
		return m.InputNestLevelOConInfoConds
	}
	return nil
}

func (m *Parameters) GetCondsMustBeFulfilledForOConId() *dstore_values.BooleanValue {
	if m != nil {
		return m.CondsMustBeFulfilledForOConId
	}
	return nil
}

func (m *Parameters) GetFilterByNodeIdsInOneId() *dstore_values.IntegerValue {
	if m != nil {
		return m.FilterByNodeIdsInOneId
	}
	return nil
}

func (m *Parameters) GetGetComputedSum() *dstore_values.BooleanValue {
	if m != nil {
		return m.GetComputedSum
	}
	return nil
}

func (m *Parameters) GetOnlyValidPosForComputedSum() *dstore_values.BooleanValue {
	if m != nil {
		return m.OnlyValidPosForComputedSum
	}
	return nil
}

func (m *Parameters) GetOrderSurchIdsForComputedSum() *dstore_values.StringValue {
	if m != nil {
		return m.OrderSurchIdsForComputedSum
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId                        int32                       `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	OrderDateAndTime             *dstore_values.StringValue  `protobuf:"bytes,10001,opt,name=order_date_and_time,json=orderDateAndTime" json:"order_date_and_time,omitempty"`
	PaymentCost                  *dstore_values.DecimalValue `protobuf:"bytes,10002,opt,name=payment_cost,json=paymentCost" json:"payment_cost,omitempty"`
	DeliveryDateAndTime          *dstore_values.StringValue  `protobuf:"bytes,10003,opt,name=delivery_date_and_time,json=deliveryDateAndTime" json:"delivery_date_and_time,omitempty"`
	NetShippingCost              *dstore_values.DecimalValue `protobuf:"bytes,10004,opt,name=net_shipping_cost,json=netShippingCost" json:"net_shipping_cost,omitempty"`
	OrderNo                      *dstore_values.StringValue  `protobuf:"bytes,10005,opt,name=order_no,json=orderNo" json:"order_no,omitempty"`
	NettoSum                     *dstore_values.DecimalValue `protobuf:"bytes,10006,opt,name=netto_sum,json=nettoSum" json:"netto_sum,omitempty"`
	LastEditedByUserId           *dstore_values.IntegerValue `protobuf:"bytes,10007,opt,name=last_edited_by_user_id,json=lastEditedByUserId" json:"last_edited_by_user_id,omitempty"`
	OrderId                      *dstore_values.IntegerValue `protobuf:"bytes,10008,opt,name=order_id,json=orderId" json:"order_id,omitempty"`
	BruttoSum                    *dstore_values.DecimalValue `protobuf:"bytes,10009,opt,name=brutto_sum,json=bruttoSum" json:"brutto_sum,omitempty"`
	PreciseNetShippingCost       *dstore_values.DecimalValue `protobuf:"bytes,10010,opt,name=precise_net_shipping_cost,json=preciseNetShippingCost" json:"precise_net_shipping_cost,omitempty"`
	CharacVal2RestrByPattern     *dstore_values.StringValue  `protobuf:"bytes,10011,opt,name=charac_val2_restr_by_pattern,json=characVal2RestrByPattern" json:"charac_val2_restr_by_pattern,omitempty"`
	NetSum                       *dstore_values.DecimalValue `protobuf:"bytes,10012,opt,name=net_sum,json=netSum" json:"net_sum,omitempty"`
	ValidContentNetSum           *dstore_values.DecimalValue `protobuf:"bytes,10013,opt,name=valid_content_net_sum,json=validContentNetSum" json:"valid_content_net_sum,omitempty"`
	PreciseValidContentNetSum    *dstore_values.DecimalValue `protobuf:"bytes,10014,opt,name=precise_valid_content_net_sum,json=preciseValidContentNetSum" json:"precise_valid_content_net_sum,omitempty"`
	PersonId                     *dstore_values.IntegerValue `protobuf:"bytes,10015,opt,name=person_id,json=personId" json:"person_id,omitempty"`
	PaymentTypeDescription       *dstore_values.StringValue  `protobuf:"bytes,10016,opt,name=payment_type_description,json=paymentTypeDescription" json:"payment_type_description,omitempty"`
	ValidContentBruttoSum        *dstore_values.DecimalValue `protobuf:"bytes,10017,opt,name=valid_content_brutto_sum,json=validContentBruttoSum" json:"valid_content_brutto_sum,omitempty"`
	PreciseNetSum                *dstore_values.DecimalValue `protobuf:"bytes,10018,opt,name=precise_net_sum,json=preciseNetSum" json:"precise_net_sum,omitempty"`
	PositionCount                *dstore_values.IntegerValue `protobuf:"bytes,10019,opt,name=position_count,json=positionCount" json:"position_count,omitempty"`
	OrderStateId                 *dstore_values.IntegerValue `protobuf:"bytes,10020,opt,name=order_state_id,json=orderStateId" json:"order_state_id,omitempty"`
	ShippingTypeId               *dstore_values.IntegerValue `protobuf:"bytes,10021,opt,name=shipping_type_id,json=shippingTypeId" json:"shipping_type_id,omitempty"`
	PersonTypeId                 *dstore_values.IntegerValue `protobuf:"bytes,10022,opt,name=person_type_id,json=personTypeId" json:"person_type_id,omitempty"`
	PreciseComputedGrossSum      *dstore_values.DecimalValue `protobuf:"bytes,10023,opt,name=precise_computed_gross_sum,json=preciseComputedGrossSum" json:"precise_computed_gross_sum,omitempty"`
	HasValidContents             *dstore_values.BooleanValue `protobuf:"bytes,10024,opt,name=has_valid_contents,json=hasValidContents" json:"has_valid_contents,omitempty"`
	NetPaymentCost               *dstore_values.DecimalValue `protobuf:"bytes,10025,opt,name=net_payment_cost,json=netPaymentCost" json:"net_payment_cost,omitempty"`
	DeliveryPersonId             *dstore_values.IntegerValue `protobuf:"bytes,10026,opt,name=delivery_person_id,json=deliveryPersonId" json:"delivery_person_id,omitempty"`
	ShippingTypeDescription      *dstore_values.StringValue  `protobuf:"bytes,10027,opt,name=shipping_type_description,json=shippingTypeDescription" json:"shipping_type_description,omitempty"`
	GrossSum                     *dstore_values.DecimalValue `protobuf:"bytes,10028,opt,name=gross_sum,json=grossSum" json:"gross_sum,omitempty"`
	UnitSymbol                   *dstore_values.StringValue  `protobuf:"bytes,10029,opt,name=unit_symbol,json=unitSymbol" json:"unit_symbol,omitempty"`
	PreciseNetPaymentCost        *dstore_values.DecimalValue `protobuf:"bytes,10030,opt,name=precise_net_payment_cost,json=preciseNetPaymentCost" json:"precise_net_payment_cost,omitempty"`
	CustomerCharacteristicValue2 *dstore_values.StringValue  `protobuf:"bytes,10031,opt,name=customer_characteristic_value2,json=customerCharacteristicValue2" json:"customer_characteristic_value2,omitempty"`
	PublicDescription            *dstore_values.StringValue  `protobuf:"bytes,10032,opt,name=public_description,json=publicDescription" json:"public_description,omitempty"`
	CurrencyId                   *dstore_values.IntegerValue `protobuf:"bytes,10033,opt,name=currency_id,json=currencyId" json:"currency_id,omitempty"`
	CustomerCharacteristicValue1 *dstore_values.StringValue  `protobuf:"bytes,10034,opt,name=customer_characteristic_value1,json=customerCharacteristicValue1" json:"customer_characteristic_value1,omitempty"`
	PreciseGrossSum              *dstore_values.DecimalValue `protobuf:"bytes,10035,opt,name=precise_gross_sum,json=preciseGrossSum" json:"precise_gross_sum,omitempty"`
	ComputedGrossSum             *dstore_values.DecimalValue `protobuf:"bytes,10036,opt,name=computed_gross_sum,json=computedGrossSum" json:"computed_gross_sum,omitempty"`
	ValidContentNettoSum         *dstore_values.DecimalValue `protobuf:"bytes,10037,opt,name=valid_content_netto_sum,json=validContentNettoSum" json:"valid_content_netto_sum,omitempty"`
	ShippingCost                 *dstore_values.DecimalValue `protobuf:"bytes,10038,opt,name=shipping_cost,json=shippingCost" json:"shipping_cost,omitempty"`
	CharacVal1RestrByPattern     *dstore_values.StringValue  `protobuf:"bytes,10039,opt,name=charac_val1_restr_by_pattern,json=characVal1RestrByPattern" json:"charac_val1_restr_by_pattern,omitempty"`
	PaymentTypeId                *dstore_values.IntegerValue `protobuf:"bytes,10040,opt,name=payment_type_id,json=paymentTypeId" json:"payment_type_id,omitempty"`
	PreciseValidContentGrossSum  *dstore_values.DecimalValue `protobuf:"bytes,10041,opt,name=precise_valid_content_gross_sum,json=preciseValidContentGrossSum" json:"precise_valid_content_gross_sum,omitempty"`
	PreciseComputedNetSum        *dstore_values.DecimalValue `protobuf:"bytes,10042,opt,name=precise_computed_net_sum,json=preciseComputedNetSum" json:"precise_computed_net_sum,omitempty"`
	OrderState                   *dstore_values.StringValue  `protobuf:"bytes,10043,opt,name=order_state,json=orderState" json:"order_state,omitempty"`
	ComputedNetSum               *dstore_values.DecimalValue `protobuf:"bytes,10044,opt,name=computed_net_sum,json=computedNetSum" json:"computed_net_sum,omitempty"`
	ValidContentGrossSum         *dstore_values.DecimalValue `protobuf:"bytes,10045,opt,name=valid_content_gross_sum,json=validContentGrossSum" json:"valid_content_gross_sum,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetOrderDateAndTime() *dstore_values.StringValue {
	if m != nil {
		return m.OrderDateAndTime
	}
	return nil
}

func (m *Response_Row) GetPaymentCost() *dstore_values.DecimalValue {
	if m != nil {
		return m.PaymentCost
	}
	return nil
}

func (m *Response_Row) GetDeliveryDateAndTime() *dstore_values.StringValue {
	if m != nil {
		return m.DeliveryDateAndTime
	}
	return nil
}

func (m *Response_Row) GetNetShippingCost() *dstore_values.DecimalValue {
	if m != nil {
		return m.NetShippingCost
	}
	return nil
}

func (m *Response_Row) GetOrderNo() *dstore_values.StringValue {
	if m != nil {
		return m.OrderNo
	}
	return nil
}

func (m *Response_Row) GetNettoSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.NettoSum
	}
	return nil
}

func (m *Response_Row) GetLastEditedByUserId() *dstore_values.IntegerValue {
	if m != nil {
		return m.LastEditedByUserId
	}
	return nil
}

func (m *Response_Row) GetOrderId() *dstore_values.IntegerValue {
	if m != nil {
		return m.OrderId
	}
	return nil
}

func (m *Response_Row) GetBruttoSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.BruttoSum
	}
	return nil
}

func (m *Response_Row) GetPreciseNetShippingCost() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseNetShippingCost
	}
	return nil
}

func (m *Response_Row) GetCharacVal2RestrByPattern() *dstore_values.StringValue {
	if m != nil {
		return m.CharacVal2RestrByPattern
	}
	return nil
}

func (m *Response_Row) GetNetSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.NetSum
	}
	return nil
}

func (m *Response_Row) GetValidContentNetSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.ValidContentNetSum
	}
	return nil
}

func (m *Response_Row) GetPreciseValidContentNetSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseValidContentNetSum
	}
	return nil
}

func (m *Response_Row) GetPersonId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonId
	}
	return nil
}

func (m *Response_Row) GetPaymentTypeDescription() *dstore_values.StringValue {
	if m != nil {
		return m.PaymentTypeDescription
	}
	return nil
}

func (m *Response_Row) GetValidContentBruttoSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.ValidContentBruttoSum
	}
	return nil
}

func (m *Response_Row) GetPreciseNetSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseNetSum
	}
	return nil
}

func (m *Response_Row) GetPositionCount() *dstore_values.IntegerValue {
	if m != nil {
		return m.PositionCount
	}
	return nil
}

func (m *Response_Row) GetOrderStateId() *dstore_values.IntegerValue {
	if m != nil {
		return m.OrderStateId
	}
	return nil
}

func (m *Response_Row) GetShippingTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ShippingTypeId
	}
	return nil
}

func (m *Response_Row) GetPersonTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonTypeId
	}
	return nil
}

func (m *Response_Row) GetPreciseComputedGrossSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseComputedGrossSum
	}
	return nil
}

func (m *Response_Row) GetHasValidContents() *dstore_values.BooleanValue {
	if m != nil {
		return m.HasValidContents
	}
	return nil
}

func (m *Response_Row) GetNetPaymentCost() *dstore_values.DecimalValue {
	if m != nil {
		return m.NetPaymentCost
	}
	return nil
}

func (m *Response_Row) GetDeliveryPersonId() *dstore_values.IntegerValue {
	if m != nil {
		return m.DeliveryPersonId
	}
	return nil
}

func (m *Response_Row) GetShippingTypeDescription() *dstore_values.StringValue {
	if m != nil {
		return m.ShippingTypeDescription
	}
	return nil
}

func (m *Response_Row) GetGrossSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.GrossSum
	}
	return nil
}

func (m *Response_Row) GetUnitSymbol() *dstore_values.StringValue {
	if m != nil {
		return m.UnitSymbol
	}
	return nil
}

func (m *Response_Row) GetPreciseNetPaymentCost() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseNetPaymentCost
	}
	return nil
}

func (m *Response_Row) GetCustomerCharacteristicValue2() *dstore_values.StringValue {
	if m != nil {
		return m.CustomerCharacteristicValue2
	}
	return nil
}

func (m *Response_Row) GetPublicDescription() *dstore_values.StringValue {
	if m != nil {
		return m.PublicDescription
	}
	return nil
}

func (m *Response_Row) GetCurrencyId() *dstore_values.IntegerValue {
	if m != nil {
		return m.CurrencyId
	}
	return nil
}

func (m *Response_Row) GetCustomerCharacteristicValue1() *dstore_values.StringValue {
	if m != nil {
		return m.CustomerCharacteristicValue1
	}
	return nil
}

func (m *Response_Row) GetPreciseGrossSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseGrossSum
	}
	return nil
}

func (m *Response_Row) GetComputedGrossSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.ComputedGrossSum
	}
	return nil
}

func (m *Response_Row) GetValidContentNettoSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.ValidContentNettoSum
	}
	return nil
}

func (m *Response_Row) GetShippingCost() *dstore_values.DecimalValue {
	if m != nil {
		return m.ShippingCost
	}
	return nil
}

func (m *Response_Row) GetCharacVal1RestrByPattern() *dstore_values.StringValue {
	if m != nil {
		return m.CharacVal1RestrByPattern
	}
	return nil
}

func (m *Response_Row) GetPaymentTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PaymentTypeId
	}
	return nil
}

func (m *Response_Row) GetPreciseValidContentGrossSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseValidContentGrossSum
	}
	return nil
}

func (m *Response_Row) GetPreciseComputedNetSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.PreciseComputedNetSum
	}
	return nil
}

func (m *Response_Row) GetOrderState() *dstore_values.StringValue {
	if m != nil {
		return m.OrderState
	}
	return nil
}

func (m *Response_Row) GetComputedNetSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.ComputedNetSum
	}
	return nil
}

func (m *Response_Row) GetValidContentGrossSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.ValidContentGrossSum
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.om_GetOrders_Conditions_Ad.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.om_GetOrders_Conditions_Ad.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.om_GetOrders_Conditions_Ad.Response.Row")
}

var fileDescriptor0 = []byte{
	// 2361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xa4, 0x5a, 0xe7, 0x77, 0xdc, 0xc6,
	0x11, 0x7f, 0xb6, 0x22, 0x96, 0x65, 0x07, 0x8b, 0x96, 0xc7, 0x22, 0x92, 0xb6, 0x12, 0x3b, 0x79,
	0x8f, 0xb2, 0xe8, 0x44, 0x89, 0xe3, 0x94, 0x27, 0x1e, 0x55, 0xe8, 0x88, 0x47, 0xbe, 0xa3, 0xac,
	0x3c, 0xdb, 0x89, 0x11, 0xdc, 0x01, 0x24, 0xf1, 0x82, 0xc3, 0x5e, 0x50, 0xa8, 0x77, 0xdf, 0xd2,
	0x3f, 0xa7, 0x77, 0xa5, 0xf7, 0xde, 0x7b, 0xfe, 0xa0, 0xf4, 0xde, 0x8b, 0x33, 0x3b, 0xb3, 0x38,
	0x00, 0xd7, 0x16, 0x4a, 0xbe, 0xd8, 0x02, 0x31, 0xbf, 0xdf, 0xfc, 0x30, 0x3b, 0x33, 0x3b, 0xbb,
	0x24, 0x7b, 0xcc, 0x0e, 0x23, 0x11, 0x38, 0x17, 0x1d, 0xff, 0xd8, 0xf5, 0x9d, 0x8b, 0xcd, 0x40,
	0xd4, 0x1d, 0x3b, 0x0e, 0x9c, 0xf0, 0xa2, 0x68, 0x98, 0xd7, 0x9d, 0x68, 0x3f, 0xb0, 0x9d, 0x20,
	0x34, 0xcb, 0xc2, 0xb7, 0xdd, 0xc8, 0x15, 0x7e, 0x68, 0x5e, 0xb1, 0x37, 0xc1, 0x2a, 0x12, 0xc6,
	0x43, 0x04, 0xdd, 0x24, 0xe8, 0x66, 0x7f, 0xfb, 0xd2, 0xac, 0x72, 0x72, 0x6a, 0x79, 0xb1, 0x13,
	0x12, 0xbc, 0xb4, 0x98, 0xf7, 0xec, 0x04, 0x81, 0x08, 0xd4, 0xab, 0xa5, 0xfc, 0xab, 0x86, 0x13,
	0x86, 0xd6, 0xb1, 0xa3, 0x5e, 0x3e, 0xd0, 0xf9, 0x32, 0xb2, 0x5c, 0xff, 0x48, 0x04, 0x0d, 0x4b,
	0xfa, 0x23, 0xa3, 0x8d, 0xbb, 0xeb, 0x8c, 0x1d, 0x58, 0x81, 0x05, 0x6f, 0x41, 0x8e, 0x51, 0x66,
	0x53, 0x42, 0x0a, 0x33, 0x6b, 0x2d, 0xb3, 0x2e, 0xbc, 0xb8, 0xe1, 0xf3, 0xfb, 0xd6, 0xee, 0x7b,
	0x68, 0x6c, 0x6b, 0x69, 0x53, 0x7d, 0x84, 0x92, 0xe6, 0xfa, 0x91, 0x73, 0xec, 0x04, 0xb7, 0xe5,
	0x53, 0x75, 0x02, 0x31, 0xdb, 0xad, 0x32, 0x22, 0x8c, 0x47, 0xd8, 0x5c, 0x07, 0x89, 0xe9, 0xc7,
	0x9e, 0xc7, 0x7f, 0x3e, 0x0c, 0x54, 0x23, 0xd5, 0x99, 0x9c, 0x75, 0x05, 0xde, 0x18, 0xb7, 0x18,
	0xaf, 0x07, 0x8e, 0x15, 0x39, 0x26, 0xd0, 0xbb, 0xb6, 0x49, 0x70, 0xa9, 0x36, 0xe4, 0xf7, 0xf7,
	0xf4, 0x5f, 0x13, 0xc2, 0x73, 0x2c, 0x9f, 0xfc, 0xcf, 0x13, 0xf8, 0xb6, 0xc4, 0x62, 0x5c, 0x77,
	0x25, 0xd2, 0xb8, 0xc2, 0x56, 0xfa, 0xb1, 0x92, 0xa0, 0x5f, 0x90, 0xa0, 0xc5, 0x9e, 0x70, 0x14,
	0xf6, 0x18, 0x63, 0xb5, 0x20, 0x8e, 0x22, 0x61, 0x86, 0x71, 0x83, 0x9f, 0x41, 0x29, 0xa5, 0x0e,
	0x29, 0x61, 0x14, 0xb8, 0xfe, 0x31, 0x29, 0x19, 0x25, 0xeb, 0xc3, 0xb8, 0x61, 0xbc, 0x80, 0x4d,
	0xa5, 0x50, 0xf2, 0xf7, 0x4b, 0xf2, 0x37, 0xd1, 0x36, 0x42, 0x1f, 0xaf, 0x60, 0x63, 0xf5, 0x38,
	0x08, 0x1c, 0xbf, 0xde, 0x32, 0x5d, 0x9b, 0x3f, 0x4f, 0x1f, 0x6f, 0x96, 0xd8, 0xef, 0xda, 0xc6,
	0xc3, 0x6c, 0x3a, 0x83, 0x26, 0x3f, 0xbf, 0x22, 0x3f, 0x93, 0xa9, 0x19, 0x3a, 0x7a, 0x96, 0xad,
	0xbe, 0x29, 0xb6, 0xfc, 0xc8, 0x8d, 0x5a, 0x26, 0xe4, 0x81, 0x29, 0x7c, 0x47, 0xc5, 0xa4, 0x2e,
	0x80, 0xde, 0x8f, 0xf8, 0x59, 0xed, 0x07, 0x96, 0x12, 0x86, 0x6b, 0x22, 0xd8, 0xf7, 0x1d, 0x0c,
	0x57, 0x99, 0xd0, 0xc6, 0x4d, 0xf6, 0xc0, 0x60, 0x7e, 0x52, 0xf7, 0x6b, 0x52, 0xb7, 0xda, 0x9f,
	0xa9, 0x1d, 0x16, 0xd1, 0xa8, 0xb9, 0x3e, 0xa6, 0x2b, 0x1f, 0xd2, 0x4a, 0xcb, 0x9a, 0x1b, 0x2f,
	0x84, 0xb0, 0xa4, 0x8f, 0xe4, 0xf8, 0x37, 0xe4, 0x78, 0x2a, 0xf3, 0x02, 0x3d, 0xbd, 0x9c, 0x8d,
	0x1e, 0x05, 0x50, 0x95, 0x36, 0x24, 0x01, 0x1f, 0x46, 0x3f, 0x2b, 0x1d, 0x7e, 0x22, 0x17, 0x6a,
	0x2b, 0xb2, 0x1a, 0x4d, 0x72, 0x35, 0x22, 0xed, 0x77, 0xc0, 0xdc, 0xb8, 0xc0, 0x26, 0xdb, 0x58,
	0xf2, 0xf2, 0x5b, 0xf2, 0x32, 0x9e, 0x98, 0xa0, 0x8b, 0xcb, 0x6c, 0x18, 0x12, 0x01, 0x1d, 0x8c,
	0x14, 0x71, 0x30, 0x14, 0x09, 0xa4, 0x5f, 0x67, 0xe3, 0x0a, 0x47, 0xe4, 0xbf, 0x23, 0x72, 0x46,
	0xaf, 0x95, 0x7a, 0x46, 0x41, 0xb6, 0x9d, 0xb0, 0xce, 0x47, 0xf5, 0xd5, 0x32, 0x8a, 0xe6, 0x3b,
	0x60, 0x2d, 0x73, 0x34, 0xc5, 0x92, 0x87, 0xdf, 0xab, 0x1c, 0x6d, 0x1b, 0xa1, 0x93, 0x9b, 0x6c,
	0x0e, 0x45, 0x58, 0xbe, 0x6d, 0x4a, 0xa9, 0x26, 0xf5, 0x11, 0xce, 0xf4, 0xc9, 0x3a, 0x23, 0x81,
	0x57, 0x7c, 0xfb, 0x16, 0xc0, 0xae, 0x21, 0x0a, 0xaa, 0x6a, 0xb1, 0x17, 0x1b, 0x09, 0xf8, 0x03,
	0x09, 0x98, 0xef, 0x82, 0xa1, 0x90, 0x57, 0xb1, 0x71, 0xd7, 0xaf, 0x7b, 0xb1, 0xed, 0x20, 0x92,
	0x8f, 0xe9, 0xbf, 0x77, 0x4c, 0x01, 0x24, 0x93, 0xf1, 0x22, 0x36, 0x93, 0xc5, 0x93, 0xcb, 0x3f,
	0xaa, 0xc4, 0xc8, 0x18, 0xa2, 0xb3, 0x1a, 0x5b, 0x3b, 0x76, 0x22, 0xec, 0x18, 0x98, 0xd0, 0xd9,
	0x36, 0x92, 0x94, 0xcc, 0xb8, 0x5e, 0xc0, 0x12, 0x90, 0xc8, 0x96, 0x02, 0x9f, 0x91, 0xf6, 0x98,
	0xa4, 0x68, 0xf6, 0xd9, 0x05, 0x9d, 0x0f, 0x12, 0xf9, 0x27, 0x12, 0x79, 0x7e, 0x00, 0x19, 0x8a,
	0xde, 0x61, 0xd3, 0x84, 0x86, 0x74, 0x82, 0x18, 0x7b, 0x6e, 0x18, 0xf1, 0x09, 0x6d, 0xf1, 0x4c,
	0x22, 0xe6, 0x50, 0x42, 0x6e, 0x02, 0xc2, 0xd8, 0x62, 0xf3, 0x9d, 0x2c, 0x24, 0xe3, 0xcf, 0x24,
	0xc3, 0xc8, 0xdb, 0x27, 0xe1, 0x0a, 0xdf, 0xe8, 0x36, 0x4d, 0x61, 0x9e, 0x58, 0xa7, 0xc0, 0x6c,
	0xda, 0xee, 0xd1, 0x91, 0x13, 0xc8, 0x2f, 0x10, 0xc4, 0x13, 0xf2, 0xc9, 0x02, 0xe1, 0x92, 0x24,
	0xfb, 0x37, 0x90, 0x62, 0x27, 0x61, 0xd8, 0x47, 0x57, 0xa1, 0x0c, 0x97, 0xce, 0x07, 0xe9, 0xfc,
	0x8b, 0x0a, 0xd7, 0x00, 0x32, 0x14, 0xfd, 0x1a, 0x36, 0xd7, 0xb4, 0x5a, 0x0d, 0x49, 0x10, 0xb5,
	0x9a, 0x8e, 0xec, 0xa1, 0x18, 0xb2, 0x29, 0x6d, 0xc8, 0x66, 0x14, 0xee, 0x16, 0xc0, 0x76, 0x6d,
	0x8c, 0x1a, 0x24, 0x76, 0x2f, 0x32, 0x52, 0xf4, 0x57, 0x95, 0xd8, 0x5d, 0x30, 0xd4, 0xb1, 0xc7,
	0xe6, 0xc3, 0x13, 0xb7, 0xd9, 0x94, 0xdf, 0x94, 0x13, 0x32, 0xad, 0x15, 0x62, 0x24, 0xc0, 0x8c,
	0x92, 0xc7, 0x59, 0xa9, 0x27, 0x1d, 0x49, 0xf9, 0x1b, 0x49, 0x59, 0xe8, 0x06, 0xa2, 0x96, 0x67,
	0xd8, 0x52, 0x78, 0x22, 0xee, 0x98, 0x4d, 0x18, 0x09, 0xa0, 0x79, 0xd6, 0x4f, 0x60, 0x40, 0xa8,
	0xc3, 0x7c, 0x00, 0xef, 0xdd, 0x7a, 0xc8, 0x67, 0xf4, 0x6b, 0xb8, 0x28, 0xf1, 0x07, 0x08, 0x2f,
	0xe7, 0xd1, 0xc6, 0x0d, 0xc8, 0x92, 0xfe, 0xe4, 0xa4, 0xef, 0xef, 0xa4, 0x6f, 0xa5, 0x2f, 0x0b,
	0xca, 0x7c, 0x3d, 0xec, 0xef, 0xc2, 0x3f, 0x75, 0x82, 0xc8, 0x84, 0x39, 0x2c, 0xf6, 0x20, 0xe8,
	0xc2, 0xcc, 0x6e, 0xa5, 0x86, 0xbe, 0x3b, 0x2d, 0x2a, 0x86, 0x2a, 0x12, 0xdc, 0x12, 0xe5, 0x74,
	0x67, 0x7d, 0x82, 0x6d, 0x0c, 0xa4, 0x27, 0xa9, 0xff, 0x50, 0x52, 0xfb, 0xf2, 0xa0, 0xd4, 0x3a,
	0x5b, 0xeb, 0xe6, 0x3a, 0x76, 0x4f, 0x1d, 0xbf, 0xcd, 0xc8, 0x67, 0xf5, 0x61, 0x5d, 0xee, 0xf0,
	0x72, 0x5d, 0x32, 0x24, 0xae, 0x8c, 0x03, 0x76, 0x41, 0xe7, 0x84, 0x34, 0xff, 0x93, 0x34, 0xaf,
	0x0d, 0x62, 0x43, 0xd9, 0xdb, 0x6c, 0xb2, 0x19, 0x07, 0xb0, 0x44, 0xa1, 0xda, 0xc9, 0xf9, 0x9c,
	0x5e, 0xe4, 0x44, 0x02, 0xc1, 0xd6, 0x64, 0x5c, 0x64, 0xb3, 0x79, 0x0e, 0xd2, 0xf0, 0x2f, 0x35,
	0x0c, 0xe6, 0x8c, 0xd1, 0xe9, 0xeb, 0xd8, 0x8a, 0xeb, 0x37, 0x63, 0x48, 0x55, 0xd8, 0x11, 0x4d,
	0xcf, 0x39, 0x75, 0x3c, 0xa8, 0x6d, 0x6c, 0x90, 0x20, 0xd8, 0x0e, 0xf9, 0xbc, 0x7e, 0x59, 0x39,
	0x32, 0x54, 0x80, 0xe0, 0xa6, 0xc4, 0xef, 0xcb, 0x8e, 0x29, 0x47, 0xed, 0xd0, 0xd8, 0x65, 0x1b,
	0x03, 0xd9, 0x49, 0xdd, 0xbf, 0x49, 0xdd, 0x72, 0x3f, 0x1a, 0x14, 0xfa, 0x34, 0x5b, 0x46, 0xdf,
	0x66, 0xe8, 0x34, 0x21, 0x3b, 0x41, 0x8c, 0xe9, 0x9a, 0xbe, 0x29, 0x20, 0xb3, 0xe5, 0x03, 0x5f,
	0xd0, 0x56, 0x2e, 0xc7, 0x9f, 0x1d, 0x26, 0xf0, 0xdd, 0xca, 0xbe, 0xc2, 0x42, 0x95, 0xac, 0x0f,
	0xe2, 0x26, 0x95, 0xff, 0x51, 0x2a, 0xfb, 0xb1, 0xa0, 0xca, 0x17, 0xb3, 0xe1, 0xba, 0x88, 0xfd,
	0x28, 0x68, 0xf1, 0x73, 0x5a, 0x41, 0x89, 0xa9, 0xb1, 0xc1, 0xc6, 0xd5, 0x3f, 0xc9, 0xd5, 0x73,
	0xe4, 0x6a, 0x4c, 0xfd, 0x30, 0x99, 0xd0, 0x3c, 0xcb, 0x3f, 0x8e, 0xe1, 0xc8, 0x21, 0xab, 0x8d,
	0x17, 0x18, 0x5c, 0x13, 0x7b, 0x1a, 0x5c, 0x33, 0x68, 0xf2, 0xf2, 0xe6, 0x11, 0x1a, 0x5c, 0x53,
	0x33, 0x55, 0x3d, 0xeb, 0x3d, 0xd6, 0x0c, 0x96, 0x2b, 0x9b, 0x15, 0x8b, 0x7a, 0xf7, 0x4b, 0x1d,
	0xcb, 0x09, 0x4b, 0x99, 0x26, 0xc6, 0x01, 0x7b, 0xbe, 0xd6, 0x09, 0xa9, 0x7c, 0x0b, 0xa9, 0x3c,
	0x3f, 0x80, 0x0d, 0x65, 0x9f, 0xb0, 0x07, 0x09, 0xd5, 0x88, 0x81, 0xb1, 0x06, 0x63, 0x4e, 0xec,
	0x1d, 0xb9, 0x9e, 0xe7, 0xd8, 0x34, 0x1e, 0x13, 0xb9, 0xcd, 0x4b, 0xfa, 0x9a, 0x5a, 0x41, 0xa2,
	0x3d, 0xe0, 0xd9, 0x76, 0xae, 0x25, 0x2c, 0x72, 0x70, 0x96, 0x4e, 0x6d, 0xe3, 0x49, 0xf6, 0x70,
	0x11, 0x4f, 0x24, 0xff, 0xad, 0x24, 0x7f, 0x7d, 0x20, 0x25, 0x7e, 0xc0, 0x53, 0x6c, 0x19, 0x7e,
	0x1c, 0xd1, 0x49, 0xce, 0x17, 0xb6, 0x5c, 0xa8, 0x10, 0xc2, 0x81, 0x93, 0x3d, 0x08, 0x5f, 0xd2,
	0x87, 0x7c, 0x81, 0x08, 0xb6, 0x5b, 0x15, 0x80, 0xef, 0xda, 0xe1, 0xae, 0x0f, 0xb3, 0x3e, 0x28,
	0xbe, 0xc6, 0xd6, 0x07, 0x51, 0x93, 0xd2, 0xb7, 0x91, 0xd2, 0x52, 0x6f, 0x0e, 0x94, 0x78, 0x95,
	0x4d, 0xcb, 0xf1, 0x09, 0x46, 0x7a, 0x58, 0x0b, 0xf8, 0x5c, 0x79, 0x4c, 0x5b, 0xd6, 0xc7, 0x73,
	0x12, 0x40, 0x65, 0x85, 0x91, 0x87, 0x35, 0x18, 0x77, 0x3a, 0x69, 0x48, 0xc2, 0xdb, 0x49, 0x82,
	0x91, 0xb7, 0x47, 0xd7, 0x6f, 0x60, 0xe7, 0x85, 0xef, 0xb5, 0xd4, 0xc4, 0xd6, 0x84, 0x43, 0xa5,
	0x8c, 0x75, 0x4e, 0xc9, 0x8a, 0x5e, 0x49, 0x49, 0x72, 0xe0, 0x24, 0x77, 0x20, 0x42, 0x08, 0x7f,
	0x56, 0xd5, 0x1e, 0x7b, 0x50, 0xe3, 0x81, 0x44, 0xbe, 0x83, 0x44, 0xae, 0xf6, 0xa7, 0x42, 0xc1,
	0x16, 0x5b, 0x53, 0x33, 0x9d, 0xec, 0xb9, 0x18, 0xf0, 0x2e, 0xc5, 0xab, 0xda, 0x16, 0xb1, 0x44,
	0x93, 0x9f, 0xa4, 0x80, 0xb5, 0xe8, 0x50, 0x0c, 0xe3, 0x99, 0xce, 0x05, 0x49, 0x7e, 0xa7, 0xaa,
	0xa1, 0x01, 0x64, 0x52, 0xf3, 0xc6, 0xdd, 0x15, 0x36, 0x02, 0xfb, 0x53, 0x53, 0xf8, 0xa1, 0x63,
	0x3c, 0xc2, 0xce, 0xe2, 0xed, 0x87, 0xba, 0x93, 0x68, 0xab, 0x54, 0x17, 0x2b, 0x74, 0x33, 0x72,
	0x55, 0xfe, 0xb7, 0x4a, 0x86, 0x90, 0xc1, 0xd3, 0xf2, 0xde, 0xc3, 0xcc, 0x5c, 0x7c, 0xf0, 0xfb,
	0xd7, 0xce, 0x00, 0x78, 0xb3, 0x03, 0xdc, 0x79, 0x3d, 0xb2, 0x07, 0xcf, 0xbb, 0xe9, 0x73, 0x75,
	0xaa, 0x91, 0xff, 0x81, 0xf1, 0x32, 0x36, 0xac, 0xee, 0x5b, 0xf8, 0x19, 0x64, 0x5c, 0xed, 0x62,
	0xa4, 0xdb, 0x98, 0x3d, 0xfa, 0x7f, 0x35, 0x31, 0x87, 0xde, 0x7e, 0x26, 0x10, 0x77, 0xe0, 0xa0,
	0x2f, 0x51, 0x97, 0x37, 0x8b, 0xde, 0x0e, 0x6d, 0x26, 0x71, 0xd8, 0xac, 0x8a, 0x3b, 0x55, 0x49,
	0x51, 0x7a, 0xae, 0xc4, 0xce, 0xc0, 0x83, 0xb1, 0xc0, 0x86, 0xe0, 0x51, 0x96, 0xe4, 0xbb, 0x2a,
	0x10, 0x9a, 0xb3, 0xd5, 0xb3, 0xf0, 0x88, 0x23, 0xcc, 0xac, 0x3a, 0xdf, 0x65, 0x8f, 0x5b, 0xfc,
	0xdd, 0x15, 0xed, 0x2a, 0xd3, 0x19, 0x62, 0x27, 0x3d, 0x83, 0x19, 0xaf, 0x66, 0xe3, 0xc9, 0x6c,
	0x5b, 0x17, 0x30, 0x97, 0xbe, 0xa7, 0xd2, 0x33, 0xb9, 0x6d, 0xa7, 0xee, 0x36, 0x2c, 0x4f, 0x1d,
	0xbd, 0x14, 0xa2, 0x0c, 0x00, 0x68, 0xb0, 0x0b, 0xb6, 0xe3, 0xc1, 0x8c, 0x01, 0x7b, 0x4a, 0x5e,
	0xcf, 0x7b, 0xf5, 0x7a, 0x66, 0x13, 0x68, 0x56, 0xd2, 0x0d, 0x36, 0xe3, 0x43, 0xd5, 0xb6, 0x07,
	0x5d, 0xd4, 0xf5, 0xbe, 0x02, 0xba, 0xa6, 0x00, 0x76, 0xa8, 0x50, 0xa8, 0xed, 0x32, 0x1b, 0x51,
	0xb3, 0x89, 0xe0, 0xef, 0xd7, 0xab, 0x19, 0x46, 0xe3, 0x8a, 0x80, 0x81, 0x7f, 0x14, 0xa8, 0xd4,
	0xf5, 0xd0, 0x07, 0x0a, 0x78, 0x1e, 0x41, 0x73, 0x59, 0x2a, 0x10, 0x0e, 0xcf, 0x82, 0x6e, 0xed,
	0xc0, 0x0a, 0x43, 0x65, 0x40, 0x1b, 0x8c, 0x43, 0x79, 0x3d, 0x65, 0xf3, 0x0f, 0x56, 0xf4, 0x7d,
	0xd5, 0x90, 0xd8, 0xab, 0x08, 0xdd, 0x6e, 0x3d, 0x09, 0x40, 0x58, 0xed, 0x97, 0x26, 0x1f, 0x01,
	0x1c, 0x1f, 0x2a, 0xc0, 0x41, 0x5f, 0x01, 0xc0, 0xc7, 0x73, 0xb7, 0x5c, 0x1f, 0x2e, 0xf0, 0x19,
	0x99, 0x7b, 0xae, 0xd7, 0xc2, 0x99, 0x27, 0x80, 0x77, 0x30, 0xde, 0x75, 0x2f, 0xc6, 0x47, 0x0a,
	0x70, 0x2d, 0x28, 0x78, 0xa5, 0x63, 0x4d, 0x9e, 0x61, 0xcb, 0x74, 0x38, 0x90, 0xfd, 0x6f, 0x4b,
	0x8e, 0xb4, 0x11, 0xee, 0x16, 0x4d, 0x2b, 0x82, 0xdd, 0xc0, 0xe7, 0x1f, 0xd5, 0xaf, 0x13, 0x27,
	0x02, 0x78, 0xd8, 0xaa, 0x4a, 0xf8, 0x76, 0xeb, 0x80, 0xc0, 0xc6, 0x4b, 0xd8, 0x30, 0xaa, 0x85,
	0xef, 0xfd, 0x58, 0x01, 0x8d, 0x43, 0x32, 0x61, 0xb0, 0xbf, 0xcd, 0x53, 0x33, 0x6e, 0x1f, 0xcd,
	0x15, 0xc9, 0xdd, 0x02, 0x24, 0x06, 0x42, 0x93, 0xb3, 0x3a, 0x11, 0x3e, 0xcb, 0x56, 0x92, 0xe8,
	0xf5, 0x26, 0xfe, 0x78, 0x01, 0xe2, 0x64, 0x01, 0x6e, 0x77, 0xf3, 0x43, 0x82, 0xaa, 0x83, 0x16,
	0x24, 0xc5, 0x27, 0x0a, 0x24, 0xc5, 0x08, 0x99, 0xe3, 0x50, 0xc1, 0x73, 0x87, 0x59, 0x79, 0x47,
	0x14, 0xb8, 0x4d, 0xec, 0xa1, 0x9f, 0xd4, 0xc7, 0x7e, 0x21, 0x73, 0xce, 0xdd, 0x49, 0xa1, 0x92,
	0x36, 0xff, 0xa5, 0x99, 0xd4, 0xfb, 0x54, 0x81, 0x8f, 0x9d, 0xcf, 0x46, 0x71, 0xbb, 0x9d, 0x86,
	0x3b, 0x6c, 0x2a, 0x97, 0x86, 0xc0, 0xf6, 0xe9, 0x02, 0x6c, 0x13, 0x99, 0xe4, 0x03, 0x96, 0x32,
	0x1c, 0x78, 0x44, 0x88, 0x2d, 0xd7, 0xc4, 0x51, 0x97, 0x7f, 0xa6, 0x40, 0xcc, 0x26, 0x12, 0x4c,
	0x59, 0x42, 0xe4, 0xa9, 0x29, 0x7b, 0x77, 0x02, 0x81, 0xff, 0x6c, 0x01, 0x92, 0xf1, 0xf4, 0x46,
	0x05, 0xe7, 0xa3, 0xe9, 0xce, 0xf3, 0x3b, 0xff, 0x5c, 0x01, 0x96, 0xc9, 0xfc, 0x91, 0x1e, 0x4f,
	0x70, 0xb4, 0xfe, 0x09, 0xcb, 0xe7, 0x8b, 0x68, 0x21, 0x8c, 0xe2, 0x78, 0x8a, 0x95, 0x92, 0xd0,
	0xb6, 0x37, 0xf2, 0xe3, 0x40, 0x84, 0x21, 0x46, 0xf9, 0x0b, 0x05, 0xa2, 0x7c, 0x4e, 0xe1, 0x93,
	0xdd, 0xfd, 0xba, 0x44, 0xcb, 0x78, 0x3f, 0xc1, 0x0c, 0x38, 0xfc, 0xe5, 0x53, 0x3f, 0xe4, 0x5f,
	0xac, 0xe8, 0xe7, 0xa6, 0x69, 0xc0, 0x65, 0xf3, 0x3d, 0x94, 0x21, 0x93, 0x2b, 0x9f, 0xdb, 0xa4,
	0xbe, 0x54, 0x40, 0xdc, 0x24, 0xa0, 0x0e, 0x32, 0xfb, 0x14, 0x68, 0x6a, 0xef, 0x53, 0x69, 0xed,
	0x7c, 0xb9, 0x40, 0xd8, 0xa6, 0x13, 0xdc, 0x41, 0x52, 0x43, 0xd0, 0x1c, 0xf3, 0xcb, 0x98, 0x2d,
	0xa2, 0xaf, 0xe8, 0x8b, 0xe8, 0x5c, 0x76, 0x39, 0xb3, 0x55, 0x04, 0x75, 0x9d, 0x2e, 0xc1, 0x57,
	0x8b, 0x6c, 0x3c, 0xc7, 0x49, 0xcc, 0xe1, 0xd8, 0x16, 0xfb, 0x2e, 0x94, 0x48, 0xab, 0x51, 0x13,
	0x1e, 0xff, 0x9a, 0x5e, 0x05, 0x93, 0xf6, 0x87, 0x68, 0x8e, 0x5d, 0x21, 0x53, 0x67, 0xb9, 0x68,
	0x7f, 0xbd, 0x48, 0xf9, 0xa6, 0x05, 0x97, 0x0d, 0xba, 0xc5, 0x56, 0xeb, 0x70, 0x14, 0x11, 0x0d,
	0x79, 0xed, 0x99, 0xbb, 0xeb, 0x31, 0x91, 0x65, 0x8b, 0x7f, 0x43, 0xaf, 0x73, 0x39, 0xa1, 0xc8,
	0xdf, 0x16, 0xe1, 0xcb, 0x2d, 0xb9, 0xae, 0xcd, 0xb8, 0xe6, 0x01, 0x63, 0x76, 0x11, 0xbe, 0x59,
	0x29, 0x70, 0xd1, 0x87, 0xb0, 0x6c, 0xf8, 0x5f, 0x99, 0xff, 0x9d, 0xcd, 0xb7, 0x2a, 0xf7, 0xf6,
	0x4b, 0x1b, 0xdd, 0xd7, 0x5e, 0xe2, 0xdf, 0xfe, 0xff, 0xbe, 0xf6, 0x92, 0x9c, 0x8d, 0x92, 0x75,
	0x4a, 0x13, 0xe5, 0x3b, 0x45, 0x66, 0x23, 0x05, 0xcb, 0xd6, 0x68, 0x8f, 0xb2, 0xff, 0x6e, 0x01,
	0xaa, 0xe9, 0x7a, 0x67, 0xbd, 0x1f, 0xb2, 0x73, 0x5d, 0xdb, 0x9c, 0xea, 0xfd, 0xdf, 0x2b, 0x40,
	0x38, 0xd7, 0xb1, 0x83, 0x52, 0xeb, 0xbf, 0xc2, 0x26, 0xf2, 0x53, 0xc7, 0xf7, 0x0b, 0x50, 0x8d,
	0x87, 0x7d, 0x67, 0x8d, 0x4b, 0xdd, 0xb3, 0xc6, 0x0f, 0xee, 0x65, 0xd6, 0xb8, 0xd4, 0x31, 0x6b,
	0xc8, 0xad, 0x29, 0x7f, 0x2b, 0xcc, 0x7f, 0x58, 0x68, 0x57, 0xc9, 0x5e, 0x14, 0x1b, 0x35, 0x76,
	0xbe, 0xf7, 0xa4, 0x90, 0xae, 0xc9, 0x8f, 0x0a, 0x7c, 0xf7, 0x52, 0x8f, 0x59, 0xa1, 0xbd, 0x3c,
	0x99, 0xe2, 0x6e, 0x2f, 0x79, 0xb2, 0x9b, 0xfe, 0xf8, 0x1e, 0x8a, 0x3b, 0xe9, 0xf3, 0x6a, 0x57,
	0x85, 0x8e, 0x93, 0xd9, 0x10, 0xf9, 0x4f, 0x0a, 0x74, 0x9c, 0x74, 0x33, 0x94, 0x7d, 0xbd, 0x4b,
	0xcc, 0x4f, 0x8b, 0xf4, 0xf5, 0x7a, 0x5e, 0x45, 0x57, 0xee, 0xa5, 0x81, 0xfb, 0xd9, 0xbd, 0xe6,
	0x5e, 0x12, 0xb1, 0xed, 0x2a, 0x5b, 0x72, 0x45, 0xc7, 0x11, 0x2e, 0xfd, 0xdb, 0x80, 0xa7, 0x1f,
	0xfd, 0x1f, 0xfe, 0x6a, 0xa0, 0x36, 0x84, 0xbf, 0x9a, 0x7f, 0xf4, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x6b, 0x4c, 0x75, 0x02, 0x73, 0x20, 0x00, 0x00,
}
