// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/om_CreateSimpleCampItemCond_Ad.proto
// DO NOT EDIT!

/*
Package om_CreateSimpleCampItemCond_Ad is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/om_CreateSimpleCampItemCond_Ad.proto

It has these top-level messages:
	Parameters
	Response
*/
package om_CreateSimpleCampItemCond_Ad

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "dstore/values"
import dstore_engine_error "dstore/engine/error"
import dstore_engine_message "dstore/engine/message"
import dstore_engine_metainformation "dstore/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	CampaignId                       *dstore_values.IntegerValue `protobuf:"bytes,1,opt,name=campaign_id,json=campaignId" json:"campaign_id,omitempty"`
	CampaignIdNull                   bool                        `protobuf:"varint,1001,opt,name=campaign_id_null,json=campaignIdNull" json:"campaign_id_null,omitempty"`
	ConditionDescription             *dstore_values.StringValue  `protobuf:"bytes,2,opt,name=condition_description,json=conditionDescription" json:"condition_description,omitempty"`
	ConditionDescriptionNull         bool                        `protobuf:"varint,1002,opt,name=condition_description_null,json=conditionDescriptionNull" json:"condition_description_null,omitempty"`
	LevelIds                         *dstore_values.StringValue  `protobuf:"bytes,3,opt,name=level_ids,json=levelIds" json:"level_ids,omitempty"`
	LevelIdsNull                     bool                        `protobuf:"varint,1003,opt,name=level_ids_null,json=levelIdsNull" json:"level_ids_null,omitempty"`
	DomainTreeNodeIds                *dstore_values.StringValue  `protobuf:"bytes,4,opt,name=domain_tree_node_ids,json=domainTreeNodeIds" json:"domain_tree_node_ids,omitempty"`
	DomainTreeNodeIdsNull            bool                        `protobuf:"varint,1004,opt,name=domain_tree_node_ids_null,json=domainTreeNodeIdsNull" json:"domain_tree_node_ids_null,omitempty"`
	NodeCharacteristicId             *dstore_values.IntegerValue `protobuf:"bytes,5,opt,name=node_characteristic_id,json=nodeCharacteristicId" json:"node_characteristic_id,omitempty"`
	NodeCharacteristicIdNull         bool                        `protobuf:"varint,1005,opt,name=node_characteristic_id_null,json=nodeCharacteristicIdNull" json:"node_characteristic_id_null,omitempty"`
	Operator1                        *dstore_values.StringValue  `protobuf:"bytes,6,opt,name=operator1" json:"operator1,omitempty"`
	Operator1Null                    bool                        `protobuf:"varint,1006,opt,name=operator1_null,json=operator1Null" json:"operator1_null,omitempty"`
	Condition1                       *dstore_values.StringValue  `protobuf:"bytes,7,opt,name=condition1" json:"condition1,omitempty"`
	Condition1Null                   bool                        `protobuf:"varint,1007,opt,name=condition1_null,json=condition1Null" json:"condition1_null,omitempty"`
	Operator2                        *dstore_values.StringValue  `protobuf:"bytes,8,opt,name=operator2" json:"operator2,omitempty"`
	Operator2Null                    bool                        `protobuf:"varint,1008,opt,name=operator2_null,json=operator2Null" json:"operator2_null,omitempty"`
	Condition2                       *dstore_values.StringValue  `protobuf:"bytes,9,opt,name=condition2" json:"condition2,omitempty"`
	Condition2Null                   bool                        `protobuf:"varint,1009,opt,name=condition2_null,json=condition2Null" json:"condition2_null,omitempty"`
	InheritDepth                     *dstore_values.IntegerValue `protobuf:"bytes,10,opt,name=inherit_depth,json=inheritDepth" json:"inherit_depth,omitempty"`
	InheritDepthNull                 bool                        `protobuf:"varint,1010,opt,name=inherit_depth_null,json=inheritDepthNull" json:"inherit_depth_null,omitempty"`
	RecursiveEvaluation              *dstore_values.IntegerValue `protobuf:"bytes,11,opt,name=recursive_evaluation,json=recursiveEvaluation" json:"recursive_evaluation,omitempty"`
	RecursiveEvaluationNull          bool                        `protobuf:"varint,1011,opt,name=recursive_evaluation_null,json=recursiveEvaluationNull" json:"recursive_evaluation_null,omitempty"`
	Country                          *dstore_values.StringValue  `protobuf:"bytes,12,opt,name=country" json:"country,omitempty"`
	CountryNull                      bool                        `protobuf:"varint,1012,opt,name=country_null,json=countryNull" json:"country_null,omitempty"`
	ExtendedConditionDescription     *dstore_values.StringValue  `protobuf:"bytes,13,opt,name=extended_condition_description,json=extendedConditionDescription" json:"extended_condition_description,omitempty"`
	ExtendedConditionDescriptionNull bool                        `protobuf:"varint,1013,opt,name=extended_condition_description_null,json=extendedConditionDescriptionNull" json:"extended_condition_description_null,omitempty"`
	MinNumberOfItems                 *dstore_values.IntegerValue `protobuf:"bytes,14,opt,name=min_number_of_items,json=minNumberOfItems" json:"min_number_of_items,omitempty"`
	MinNumberOfItemsNull             bool                        `protobuf:"varint,1014,opt,name=min_number_of_items_null,json=minNumberOfItemsNull" json:"min_number_of_items_null,omitempty"`
	MaxNumberOfItems                 *dstore_values.IntegerValue `protobuf:"bytes,15,opt,name=max_number_of_items,json=maxNumberOfItems" json:"max_number_of_items,omitempty"`
	MaxNumberOfItemsNull             bool                        `protobuf:"varint,1015,opt,name=max_number_of_items_null,json=maxNumberOfItemsNull" json:"max_number_of_items_null,omitempty"`
	FromQuantity                     *dstore_values.IntegerValue `protobuf:"bytes,16,opt,name=from_quantity,json=fromQuantity" json:"from_quantity,omitempty"`
	FromQuantityNull                 bool                        `protobuf:"varint,1016,opt,name=from_quantity_null,json=fromQuantityNull" json:"from_quantity_null,omitempty"`
	ToQuantity                       *dstore_values.IntegerValue `protobuf:"bytes,17,opt,name=to_quantity,json=toQuantity" json:"to_quantity,omitempty"`
	ToQuantityNull                   bool                        `protobuf:"varint,1017,opt,name=to_quantity_null,json=toQuantityNull" json:"to_quantity_null,omitempty"`
	FromItemBasicPrice               *dstore_values.DecimalValue `protobuf:"bytes,18,opt,name=from_item_basic_price,json=fromItemBasicPrice" json:"from_item_basic_price,omitempty"`
	FromItemBasicPriceNull           bool                        `protobuf:"varint,1018,opt,name=from_item_basic_price_null,json=fromItemBasicPriceNull" json:"from_item_basic_price_null,omitempty"`
	ToItemBasicPrice                 *dstore_values.DecimalValue `protobuf:"bytes,19,opt,name=to_item_basic_price,json=toItemBasicPrice" json:"to_item_basic_price,omitempty"`
	ToItemBasicPriceNull             bool                        `protobuf:"varint,1019,opt,name=to_item_basic_price_null,json=toItemBasicPriceNull" json:"to_item_basic_price_null,omitempty"`
	FromBasicPriceSum                *dstore_values.DecimalValue `protobuf:"bytes,20,opt,name=from_basic_price_sum,json=fromBasicPriceSum" json:"from_basic_price_sum,omitempty"`
	FromBasicPriceSumNull            bool                        `protobuf:"varint,1020,opt,name=from_basic_price_sum_null,json=fromBasicPriceSumNull" json:"from_basic_price_sum_null,omitempty"`
	ToBasicPriceSum                  *dstore_values.DecimalValue `protobuf:"bytes,21,opt,name=to_basic_price_sum,json=toBasicPriceSum" json:"to_basic_price_sum,omitempty"`
	ToBasicPriceSumNull              bool                        `protobuf:"varint,1021,opt,name=to_basic_price_sum_null,json=toBasicPriceSumNull" json:"to_basic_price_sum_null,omitempty"`
	CombineGroupsWithANDOperator     *dstore_values.BooleanValue `protobuf:"bytes,22,opt,name=combine_groups_with_a_n_d_operator,json=combineGroupsWithANDOperator" json:"combine_groups_with_a_n_d_operator,omitempty"`
	CombineGroupsWithANDOperatorNull bool                        `protobuf:"varint,1022,opt,name=combine_groups_with_a_n_d_operator_null,json=combineGroupsWithANDOperatorNull" json:"combine_groups_with_a_n_d_operator_null,omitempty"`
	CombinePartsWithANDOperator      *dstore_values.BooleanValue `protobuf:"bytes,23,opt,name=combine_parts_with_a_n_d_operator,json=combinePartsWithANDOperator" json:"combine_parts_with_a_n_d_operator,omitempty"`
	CombinePartsWithANDOperatorNull  bool                        `protobuf:"varint,1023,opt,name=combine_parts_with_a_n_d_operator_null,json=combinePartsWithANDOperatorNull" json:"combine_parts_with_a_n_d_operator_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetCampaignId() *dstore_values.IntegerValue {
	if m != nil {
		return m.CampaignId
	}
	return nil
}

func (m *Parameters) GetConditionDescription() *dstore_values.StringValue {
	if m != nil {
		return m.ConditionDescription
	}
	return nil
}

func (m *Parameters) GetLevelIds() *dstore_values.StringValue {
	if m != nil {
		return m.LevelIds
	}
	return nil
}

func (m *Parameters) GetDomainTreeNodeIds() *dstore_values.StringValue {
	if m != nil {
		return m.DomainTreeNodeIds
	}
	return nil
}

func (m *Parameters) GetNodeCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeCharacteristicId
	}
	return nil
}

func (m *Parameters) GetOperator1() *dstore_values.StringValue {
	if m != nil {
		return m.Operator1
	}
	return nil
}

func (m *Parameters) GetCondition1() *dstore_values.StringValue {
	if m != nil {
		return m.Condition1
	}
	return nil
}

func (m *Parameters) GetOperator2() *dstore_values.StringValue {
	if m != nil {
		return m.Operator2
	}
	return nil
}

func (m *Parameters) GetCondition2() *dstore_values.StringValue {
	if m != nil {
		return m.Condition2
	}
	return nil
}

func (m *Parameters) GetInheritDepth() *dstore_values.IntegerValue {
	if m != nil {
		return m.InheritDepth
	}
	return nil
}

func (m *Parameters) GetRecursiveEvaluation() *dstore_values.IntegerValue {
	if m != nil {
		return m.RecursiveEvaluation
	}
	return nil
}

func (m *Parameters) GetCountry() *dstore_values.StringValue {
	if m != nil {
		return m.Country
	}
	return nil
}

func (m *Parameters) GetExtendedConditionDescription() *dstore_values.StringValue {
	if m != nil {
		return m.ExtendedConditionDescription
	}
	return nil
}

func (m *Parameters) GetMinNumberOfItems() *dstore_values.IntegerValue {
	if m != nil {
		return m.MinNumberOfItems
	}
	return nil
}

func (m *Parameters) GetMaxNumberOfItems() *dstore_values.IntegerValue {
	if m != nil {
		return m.MaxNumberOfItems
	}
	return nil
}

func (m *Parameters) GetFromQuantity() *dstore_values.IntegerValue {
	if m != nil {
		return m.FromQuantity
	}
	return nil
}

func (m *Parameters) GetToQuantity() *dstore_values.IntegerValue {
	if m != nil {
		return m.ToQuantity
	}
	return nil
}

func (m *Parameters) GetFromItemBasicPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.FromItemBasicPrice
	}
	return nil
}

func (m *Parameters) GetToItemBasicPrice() *dstore_values.DecimalValue {
	if m != nil {
		return m.ToItemBasicPrice
	}
	return nil
}

func (m *Parameters) GetFromBasicPriceSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.FromBasicPriceSum
	}
	return nil
}

func (m *Parameters) GetToBasicPriceSum() *dstore_values.DecimalValue {
	if m != nil {
		return m.ToBasicPriceSum
	}
	return nil
}

func (m *Parameters) GetCombineGroupsWithANDOperator() *dstore_values.BooleanValue {
	if m != nil {
		return m.CombineGroupsWithANDOperator
	}
	return nil
}

func (m *Parameters) GetCombinePartsWithANDOperator() *dstore_values.BooleanValue {
	if m != nil {
		return m.CombinePartsWithANDOperator
	}
	return nil
}

type Response struct {
	Error                *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation      []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message              []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row                  []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
	ConditionId          *dstore_values.IntegerValue                      `protobuf:"bytes,101,opt,name=condition_id,json=conditionId" json:"condition_id,omitempty"`
	ItemConditionId      *dstore_values.IntegerValue                      `protobuf:"bytes,102,opt,name=item_condition_id,json=itemConditionId" json:"item_condition_id,omitempty"`
	ItemConditionGroupId *dstore_values.IntegerValue                      `protobuf:"bytes,103,opt,name=item_condition_group_id,json=itemConditionGroupId" json:"item_condition_group_id,omitempty"`
	ItemConditionPartId  *dstore_values.IntegerValue                      `protobuf:"bytes,104,opt,name=item_condition_part_id,json=itemConditionPartId" json:"item_condition_part_id,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

func (m *Response) GetConditionId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ConditionId
	}
	return nil
}

func (m *Response) GetItemConditionId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ItemConditionId
	}
	return nil
}

func (m *Response) GetItemConditionGroupId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ItemConditionGroupId
	}
	return nil
}

func (m *Response) GetItemConditionPartId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ItemConditionPartId
	}
	return nil
}

type Response_Row struct {
	RowId int32 `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.om_CreateSimpleCampItemCond_Ad.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.om_CreateSimpleCampItemCond_Ad.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.om_CreateSimpleCampItemCond_Ad.Response.Row")
}

var fileDescriptor0 = []byte{
	// 1217 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x57, 0xe9, 0x73, 0xdb, 0x44,
	0x14, 0x9f, 0x92, 0xa6, 0x49, 0x5f, 0x6e, 0xc5, 0x49, 0x14, 0x07, 0x4a, 0x49, 0x87, 0x52, 0x66,
	0xc0, 0xa1, 0x06, 0xa6, 0x50, 0x28, 0x43, 0x9b, 0x74, 0x8a, 0x81, 0x3a, 0xa9, 0xca, 0x94, 0x81,
	0x2f, 0x42, 0x91, 0x36, 0xce, 0xce, 0x58, 0x5a, 0xb3, 0x92, 0x93, 0xf4, 0x7f, 0xe0, 0x03, 0xff,
	0x26, 0x47, 0xb9, 0xef, 0xfb, 0xed, 0xbe, 0x95, 0x6c, 0xc9, 0x9a, 0xc8, 0xe5, 0x4b, 0x62, 0x49,
	0xef, 0x77, 0xbc, 0x7d, 0x7b, 0xbc, 0x85, 0x1b, 0x41, 0x9c, 0x08, 0xc9, 0xb6, 0x58, 0xd4, 0xe1,
	0x11, 0xdb, 0xea, 0x49, 0xe1, 0xb3, 0xa0, 0x2f, 0x59, 0xbc, 0x25, 0x42, 0x77, 0x5b, 0x32, 0x2f,
	0x61, 0xf7, 0x79, 0xd8, 0xeb, 0xb2, 0x6d, 0x2f, 0xec, 0xb5, 0x12, 0x16, 0x6e, 0x8b, 0x28, 0x70,
	0x6f, 0x06, 0x0d, 0x8c, 0x4c, 0x84, 0xf5, 0x02, 0xc1, 0x1b, 0x04, 0x6f, 0x9c, 0x8e, 0xa9, 0x2f,
	0x1b, 0xb1, 0x23, 0xaf, 0xdb, 0x67, 0x31, 0x51, 0xd4, 0xd7, 0xf3, 0x0e, 0x98, 0x94, 0x42, 0x9a,
	0x4f, 0x1b, 0xf9, 0x4f, 0x21, 0x8b, 0x63, 0xaf, 0xc3, 0xcc, 0xc7, 0x4b, 0xc5, 0x8f, 0x89, 0xc7,
	0xa3, 0x03, 0x21, 0x43, 0x2f, 0xe1, 0x22, 0xa2, 0xa0, 0xcd, 0xcf, 0xd6, 0x00, 0xf6, 0x3c, 0xe9,
	0xe1, 0x57, 0x26, 0x63, 0xeb, 0x4d, 0x98, 0xf1, 0xd1, 0x93, 0xc7, 0x3b, 0x91, 0xcb, 0x03, 0xfb,
	0xcc, 0xc5, 0x33, 0x57, 0x66, 0x9a, 0x1b, 0x0d, 0x93, 0x84, 0xb1, 0xc5, 0xa3, 0x84, 0x75, 0x98,
	0x7c, 0xa0, 0x9e, 0x1c, 0x48, 0xe3, 0x5b, 0x81, 0xf5, 0x3c, 0x2c, 0x0e, 0xa1, 0xdd, 0xa8, 0xdf,
	0xed, 0xda, 0x5f, 0x4c, 0x21, 0xc7, 0xb4, 0x33, 0x3f, 0x08, 0x6b, 0xe3, 0x6b, 0x6b, 0x17, 0x56,
	0x7c, 0x4c, 0x9a, 0x2b, 0x2b, 0x6e, 0xc0, 0x62, 0x5f, 0xf2, 0x9e, 0xfa, 0x6d, 0x3f, 0xa1, 0x25,
	0xeb, 0x05, 0xc9, 0x38, 0x91, 0x3c, 0xea, 0x90, 0x62, 0x2d, 0x03, 0xee, 0x0c, 0x70, 0xd6, 0x0d,
	0xa8, 0x97, 0x12, 0x92, 0x8b, 0x2f, 0xc9, 0x85, 0x5d, 0x06, 0xd5, 0x7e, 0xae, 0xc1, 0xf9, 0x2e,
	0x3b, 0x62, 0x5d, 0xf4, 0x1d, 0xdb, 0x13, 0x95, 0x1e, 0xa6, 0x75, 0x70, 0x2b, 0x88, 0xad, 0x67,
	0x61, 0x3e, 0x03, 0x92, 0xd6, 0x57, 0xa4, 0x35, 0x9b, 0x86, 0x68, 0xfe, 0xf7, 0xa0, 0x16, 0x88,
	0x10, 0x0b, 0xe0, 0x26, 0x92, 0x31, 0x37, 0x12, 0x01, 0xd3, 0x52, 0x67, 0x2b, 0xa5, 0x96, 0x08,
	0xf7, 0x01, 0xc2, 0xda, 0x88, 0x52, 0x9a, 0xaf, 0xc3, 0x7a, 0x19, 0x19, 0xc9, 0x7f, 0x4d, 0xf2,
	0x2b, 0x23, 0x30, 0xed, 0xe3, 0x1e, 0xac, 0xea, 0x70, 0xff, 0x10, 0x8b, 0xee, 0x63, 0xcd, 0x79,
	0x9c, 0x70, 0x5f, 0xd5, 0x7a, 0xb2, 0xba, 0xd6, 0x35, 0x05, 0xdd, 0xce, 0x21, 0xb1, 0xea, 0x6f,
	0xc1, 0x46, 0x39, 0x25, 0xf9, 0x79, 0x64, 0x86, 0xbe, 0x0c, 0xab, 0x2d, 0xbd, 0x06, 0xe7, 0x45,
	0x8f, 0x49, 0x0f, 0x65, 0xaf, 0xda, 0xe7, 0x2a, 0xc7, 0x63, 0x10, 0x6c, 0x5d, 0x86, 0xf9, 0xec,
	0x81, 0xc4, 0xbe, 0x21, 0xb1, 0xb9, 0xec, 0xb5, 0x56, 0xb8, 0x0e, 0x90, 0x15, 0xfe, 0xaa, 0x3d,
	0x55, 0x29, 0x31, 0x14, 0x6d, 0x5d, 0x81, 0x85, 0xc1, 0x13, 0x89, 0x7c, 0x9b, 0x4e, 0xe9, 0xec,
	0x7d, 0x31, 0x8f, 0xa6, 0x3d, 0x3d, 0x7e, 0x1e, 0xcd, 0xe1, 0x3c, 0x9a, 0x24, 0xf1, 0x5d, 0x21,
	0x8f, 0xe6, 0x48, 0x1e, 0x4d, 0xfb, 0xfc, 0x63, 0xe4, 0xd1, 0xcc, 0xe5, 0x61, 0x44, 0xbe, 0x2f,
	0xe6, 0x41, 0x2a, 0x6f, 0xc3, 0x1c, 0x8f, 0x0e, 0xb1, 0x46, 0x09, 0xae, 0xa3, 0x5e, 0x72, 0x68,
	0x43, 0xf5, 0xcc, 0x98, 0x35, 0x88, 0x1d, 0x05, 0xb0, 0x5e, 0x04, 0x2b, 0xc7, 0x40, 0x72, 0x3f,
	0x90, 0xdc, 0xe2, 0x70, 0xa8, 0x16, 0x6c, 0x43, 0x4d, 0x32, 0xbf, 0x2f, 0x63, 0x7e, 0xc4, 0x5c,
	0xa6, 0xe8, 0xf5, 0x0e, 0x65, 0xcf, 0x54, 0xeb, 0x2e, 0x67, 0xc0, 0xdb, 0x19, 0xce, 0x7a, 0x03,
	0xd6, 0xcb, 0xf8, 0xc8, 0xc5, 0x8f, 0xe4, 0x62, 0xad, 0x04, 0xa8, 0xcd, 0xbc, 0x02, 0x53, 0xbe,
	0xe8, 0x47, 0x89, 0x7c, 0x68, 0xcf, 0x56, 0x0e, 0x70, 0x1a, 0x6a, 0x6d, 0xc2, 0xac, 0xf9, 0x49,
	0x2a, 0x3f, 0x91, 0xca, 0x8c, 0x79, 0xa9, 0x99, 0x3f, 0x81, 0x0b, 0xec, 0x24, 0x61, 0x51, 0xc0,
	0x02, 0xb7, 0x7c, 0xef, 0x9b, 0xab, 0x14, 0x7c, 0x32, 0x65, 0xd8, 0x2e, 0xdb, 0x03, 0xdb, 0x70,
	0xe9, 0x74, 0x05, 0x32, 0xf7, 0x33, 0x99, 0xbb, 0x78, 0x1a, 0x97, 0x76, 0xfc, 0x2e, 0x2c, 0x87,
	0x5c, 0x81, 0xc2, 0x7d, 0x26, 0x5d, 0x71, 0xe0, 0x72, 0x3c, 0xab, 0x62, 0x7b, 0xbe, 0xba, 0x2e,
	0x8b, 0x88, 0x6b, 0x6b, 0xd8, 0xee, 0x81, 0x3a, 0xe0, 0x62, 0xdc, 0x60, 0xed, 0x12, 0x2e, 0x32,
	0xf4, 0x0b, 0x19, 0xaa, 0x15, 0x41, 0x99, 0x09, 0xef, 0x64, 0xc4, 0xc4, 0xc2, 0x38, 0x26, 0xbc,
	0x93, 0x51, 0x13, 0xa3, 0x5c, 0x64, 0xe2, 0xd7, 0xd4, 0x44, 0x01, 0x94, 0xae, 0x89, 0x03, 0x89,
	0x87, 0xf7, 0xa7, 0x7d, 0x2f, 0x4a, 0x78, 0xf2, 0xd0, 0x5e, 0x1c, 0x63, 0x4d, 0x28, 0xc4, 0x3d,
	0x03, 0x50, 0x6b, 0x22, 0xc7, 0x40, 0xa2, 0xbf, 0x99, 0x35, 0x31, 0x1c, 0xaa, 0x05, 0xf1, 0x20,
	0x4e, 0xc4, 0x40, 0x6e, 0x69, 0x8c, 0x83, 0x38, 0x11, 0x99, 0x18, 0x1e, 0xc4, 0x43, 0x68, 0x92,
	0xfa, 0xdd, 0xac, 0xf6, 0x41, 0x98, 0x59, 0x7c, 0x2b, 0xda, 0x97, 0x1a, 0x09, 0x77, 0xdf, 0x8b,
	0x71, 0xe7, 0xee, 0x49, 0xee, 0x33, 0xdb, 0x2a, 0x95, 0x0c, 0x98, 0xcf, 0x43, 0xaf, 0x4b, 0x92,
	0x3a, 0x23, 0x35, 0x48, 0xb7, 0x14, 0x6e, 0x4f, 0xc1, 0x70, 0xf1, 0xd5, 0x4b, 0xf9, 0xc8, 0xc4,
	0x1f, 0x64, 0x62, 0x75, 0x14, 0x98, 0xd6, 0x1a, 0x7d, 0x8f, 0x58, 0x59, 0xae, 0xb6, 0x82, 0xf9,
	0x16, 0x8c, 0x60, 0xad, 0x4b, 0xb8, 0xc8, 0xc6, 0x9f, 0xa6, 0xd6, 0x45, 0x90, 0x36, 0xf1, 0x3e,
	0xd4, 0x74, 0x06, 0xc3, 0xa8, 0xb8, 0x1f, 0xda, 0xb5, 0x6a, 0x17, 0x4b, 0x0a, 0x38, 0xa0, 0xbb,
	0xdf, 0x0f, 0xd5, 0x59, 0x5d, 0xc6, 0x46, 0x3e, 0xfe, 0x32, 0x67, 0xf5, 0x08, 0x4c, 0x1b, 0x79,
	0x07, 0x2c, 0xcc, 0xa0, 0x68, 0x63, 0xa5, 0xda, 0xc6, 0x42, 0x22, 0xf2, 0x26, 0x5e, 0x85, 0xb5,
	0x51, 0x26, 0xb2, 0xf0, 0x37, 0x59, 0x58, 0x2e, 0x40, 0xb4, 0x01, 0x06, 0x9b, 0xbe, 0x08, 0xf7,
	0xb1, 0x7b, 0x74, 0x3b, 0x52, 0xf4, 0x7b, 0xb1, 0x7b, 0xcc, 0x71, 0x37, 0xf7, 0x5c, 0xdc, 0x54,
	0xdc, 0xf4, 0x68, 0xb2, 0x57, 0x4b, 0x0d, 0xed, 0x0b, 0xd1, 0x65, 0x5e, 0x64, 0xb6, 0x2d, 0x43,
	0x73, 0x47, 0xb3, 0x7c, 0x88, 0x24, 0x37, 0xdb, 0x3b, 0xbb, 0x86, 0xc0, 0x72, 0xe0, 0xb9, 0x6a,
	0x19, 0x72, 0xfb, 0x8f, 0xd9, 0xba, 0x4e, 0xe3, 0xd3, 0xd6, 0x7d, 0x78, 0x26, 0xe5, 0xec, 0x79,
	0x32, 0x29, 0x77, 0xbe, 0x56, 0xed, 0x7c, 0xc3, 0xb0, 0xec, 0x29, 0x92, 0xa2, 0xf1, 0x3d, 0xb8,
	0x5c, 0x29, 0x42, 0xbe, 0xff, 0x25, 0xdf, 0x4f, 0x9f, 0xc2, 0xa6, 0x6c, 0x6f, 0x3e, 0x3a, 0x0b,
	0xd3, 0x0e, 0x8b, 0x7b, 0x22, 0x8a, 0x99, 0xf5, 0x12, 0x4c, 0xea, 0x66, 0xdf, 0xb4, 0xe1, 0xd9,
	0xb9, 0x60, 0xee, 0x12, 0x74, 0x11, 0xb8, 0xad, 0xfe, 0x3a, 0x14, 0x68, 0x7d, 0x04, 0x8b, 0xaa,
	0xcd, 0x77, 0x87, 0xfa, 0x7c, 0x6c, 0xa8, 0x27, 0x10, 0xdc, 0x28, 0x80, 0x8b, 0xb7, 0x81, 0xbb,
	0xf8, 0xdc, 0x1a, 0x3c, 0x3b, 0x0b, 0x61, 0xfe, 0x05, 0x76, 0x37, 0x53, 0xe6, 0x7a, 0x81, 0xed,
	0xb1, 0x62, 0xbc, 0x30, 0xc2, 0x48, 0x97, 0x8f, 0xbb, 0xf4, 0xdf, 0x49, 0xc3, 0x71, 0x3d, 0x4d,
	0x48, 0x71, 0x8c, 0x9d, 0xae, 0x42, 0x5d, 0x6f, 0x3c, 0xce, 0x85, 0xa8, 0x91, 0x8e, 0x45, 0xc3,
	0x11, 0xc7, 0x8e, 0xa2, 0xc1, 0x6e, 0x73, 0x76, 0x70, 0xb4, 0x61, 0xdb, 0xca, 0xaa, 0x77, 0xc6,
	0x99, 0x0c, 0x80, 0xdd, 0xea, 0x1d, 0x58, 0xd2, 0x7b, 0x42, 0x8e, 0xe4, 0xa0, 0x9a, 0x64, 0x81,
	0x1b, 0x5b, 0x29, 0x91, 0x03, 0x6b, 0x05, 0x22, 0x3d, 0x79, 0x15, 0x5d, 0x67, 0x8c, 0x56, 0x3a,
	0x47, 0xa7, 0xe7, 0x31, 0x72, 0xee, 0xc1, 0x6a, 0x81, 0x53, 0xcd, 0x2b, 0x45, 0x79, 0x38, 0x46,
	0x2f, 0x94, 0xa3, 0x54, 0x53, 0xac, 0x15, 0xd4, 0x9f, 0x82, 0x09, 0x1c, 0x3a, 0x6b, 0x15, 0xce,
	0xe1, 0xe0, 0x29, 0xa2, 0xcf, 0xdb, 0xc8, 0x34, 0xe9, 0x4c, 0xe2, 0x63, 0x2b, 0xb8, 0xf5, 0x00,
	0x36, 0xb8, 0x28, 0x94, 0x64, 0x70, 0xc5, 0xfd, 0xf8, 0xda, 0xff, 0xbc, 0xfc, 0xee, 0x9f, 0xd3,
	0xb7, 0xcb, 0x97, 0xff, 0x0b, 0x00, 0x00, 0xff, 0xff, 0x90, 0xe3, 0x52, 0x56, 0x3e, 0x0f, 0x00,
	0x00,
}
