// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/om_GetPersonSurcharges_Ad.proto
// DO NOT EDIT!

/*
Package om_GetPersonSurcharges_Ad is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/om_GetPersonSurcharges_Ad.proto

It has these top-level messages:
	Parameters
	Response
*/
package om_GetPersonSurcharges_Ad

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "dstore/values"
import dstore_engine_error "dstore/engine/error"
import dstore_engine_message "dstore/engine/message"
import dstore_engine_metainformation "dstore/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	PersonTypeId                *dstore_values.IntegerValue `protobuf:"bytes,1,opt,name=person_type_id,json=personTypeId" json:"person_type_id,omitempty"`
	PersonTypeIdNull            bool                        `protobuf:"varint,1001,opt,name=person_type_id_null,json=personTypeIdNull" json:"person_type_id_null,omitempty"`
	PersonId                    *dstore_values.IntegerValue `protobuf:"bytes,2,opt,name=person_id,json=personId" json:"person_id,omitempty"`
	PersonIdNull                bool                        `protobuf:"varint,1002,opt,name=person_id_null,json=personIdNull" json:"person_id_null,omitempty"`
	TreeNodeId                  *dstore_values.IntegerValue `protobuf:"bytes,3,opt,name=tree_node_id,json=treeNodeId" json:"tree_node_id,omitempty"`
	TreeNodeIdNull              bool                        `protobuf:"varint,1003,opt,name=tree_node_id_null,json=treeNodeIdNull" json:"tree_node_id_null,omitempty"`
	OutputCharacteristicId1     *dstore_values.IntegerValue `protobuf:"bytes,4,opt,name=output_characteristic_id1,json=outputCharacteristicId1" json:"output_characteristic_id1,omitempty"`
	OutputCharacteristicId1Null bool                        `protobuf:"varint,1004,opt,name=output_characteristic_id1_null,json=outputCharacteristicId1Null" json:"output_characteristic_id1_null,omitempty"`
	OutputCharacteristicId2     *dstore_values.IntegerValue `protobuf:"bytes,5,opt,name=output_characteristic_id2,json=outputCharacteristicId2" json:"output_characteristic_id2,omitempty"`
	OutputCharacteristicId2Null bool                        `protobuf:"varint,1005,opt,name=output_characteristic_id2_null,json=outputCharacteristicId2Null" json:"output_characteristic_id2_null,omitempty"`
	OutputCharacteristicId3     *dstore_values.IntegerValue `protobuf:"bytes,6,opt,name=output_characteristic_id3,json=outputCharacteristicId3" json:"output_characteristic_id3,omitempty"`
	OutputCharacteristicId3Null bool                        `protobuf:"varint,1006,opt,name=output_characteristic_id3_null,json=outputCharacteristicId3Null" json:"output_characteristic_id3_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetPersonTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonTypeId
	}
	return nil
}

func (m *Parameters) GetPersonId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonId
	}
	return nil
}

func (m *Parameters) GetTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.TreeNodeId
	}
	return nil
}

func (m *Parameters) GetOutputCharacteristicId1() *dstore_values.IntegerValue {
	if m != nil {
		return m.OutputCharacteristicId1
	}
	return nil
}

func (m *Parameters) GetOutputCharacteristicId2() *dstore_values.IntegerValue {
	if m != nil {
		return m.OutputCharacteristicId2
	}
	return nil
}

func (m *Parameters) GetOutputCharacteristicId3() *dstore_values.IntegerValue {
	if m != nil {
		return m.OutputCharacteristicId3
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId                     int32                       `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	Value1RestrictedByPattern *dstore_values.StringValue  `protobuf:"bytes,10001,opt,name=value1_restricted_by_pattern,json=value1RestrictedByPattern" json:"value1_restricted_by_pattern,omitempty"`
	Value2RestrictedByPattern *dstore_values.StringValue  `protobuf:"bytes,10002,opt,name=value2_restricted_by_pattern,json=value2RestrictedByPattern" json:"value2_restricted_by_pattern,omitempty"`
	Relative                  *dstore_values.BooleanValue `protobuf:"bytes,10003,opt,name=relative" json:"relative,omitempty"`
	Value3                    *dstore_values.StringValue  `protobuf:"bytes,10004,opt,name=value3" json:"value3,omitempty"`
	Value1                    *dstore_values.StringValue  `protobuf:"bytes,10005,opt,name=value1" json:"value1,omitempty"`
	UnitSymbol                *dstore_values.StringValue  `protobuf:"bytes,10006,opt,name=unit_symbol,json=unitSymbol" json:"unit_symbol,omitempty"`
	Value2                    *dstore_values.StringValue  `protobuf:"bytes,10007,opt,name=value2" json:"value2,omitempty"`
	SurchargeValue            *dstore_values.DecimalValue `protobuf:"bytes,10008,opt,name=surcharge_value,json=surchargeValue" json:"surcharge_value,omitempty"`
	NodeDescription           *dstore_values.StringValue  `protobuf:"bytes,10009,opt,name=node_description,json=nodeDescription" json:"node_description,omitempty"`
	Active                    *dstore_values.BooleanValue `protobuf:"bytes,10010,opt,name=active" json:"active,omitempty"`
	PersonId                  *dstore_values.IntegerValue `protobuf:"bytes,10011,opt,name=person_id,json=personId" json:"person_id,omitempty"`
	UnitId                    *dstore_values.IntegerValue `protobuf:"bytes,10012,opt,name=unit_id,json=unitId" json:"unit_id,omitempty"`
	Brutto                    *dstore_values.BooleanValue `protobuf:"bytes,10013,opt,name=brutto" json:"brutto,omitempty"`
	TreeNodeId                *dstore_values.IntegerValue `protobuf:"bytes,10014,opt,name=tree_node_id,json=treeNodeId" json:"tree_node_id,omitempty"`
	NodeId                    *dstore_values.IntegerValue `protobuf:"bytes,10015,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	SurchargeTypeDescription  *dstore_values.StringValue  `protobuf:"bytes,10016,opt,name=surcharge_type_description,json=surchargeTypeDescription" json:"surcharge_type_description,omitempty"`
	SurchargeTypeId           *dstore_values.IntegerValue `protobuf:"bytes,10017,opt,name=surcharge_type_id,json=surchargeTypeId" json:"surcharge_type_id,omitempty"`
	Value3RestrictedByPattern *dstore_values.StringValue  `protobuf:"bytes,10018,opt,name=value3_restricted_by_pattern,json=value3RestrictedByPattern" json:"value3_restricted_by_pattern,omitempty"`
	LevelId                   *dstore_values.IntegerValue `protobuf:"bytes,10019,opt,name=level_id,json=levelId" json:"level_id,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetValue1RestrictedByPattern() *dstore_values.StringValue {
	if m != nil {
		return m.Value1RestrictedByPattern
	}
	return nil
}

func (m *Response_Row) GetValue2RestrictedByPattern() *dstore_values.StringValue {
	if m != nil {
		return m.Value2RestrictedByPattern
	}
	return nil
}

func (m *Response_Row) GetRelative() *dstore_values.BooleanValue {
	if m != nil {
		return m.Relative
	}
	return nil
}

func (m *Response_Row) GetValue3() *dstore_values.StringValue {
	if m != nil {
		return m.Value3
	}
	return nil
}

func (m *Response_Row) GetValue1() *dstore_values.StringValue {
	if m != nil {
		return m.Value1
	}
	return nil
}

func (m *Response_Row) GetUnitSymbol() *dstore_values.StringValue {
	if m != nil {
		return m.UnitSymbol
	}
	return nil
}

func (m *Response_Row) GetValue2() *dstore_values.StringValue {
	if m != nil {
		return m.Value2
	}
	return nil
}

func (m *Response_Row) GetSurchargeValue() *dstore_values.DecimalValue {
	if m != nil {
		return m.SurchargeValue
	}
	return nil
}

func (m *Response_Row) GetNodeDescription() *dstore_values.StringValue {
	if m != nil {
		return m.NodeDescription
	}
	return nil
}

func (m *Response_Row) GetActive() *dstore_values.BooleanValue {
	if m != nil {
		return m.Active
	}
	return nil
}

func (m *Response_Row) GetPersonId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonId
	}
	return nil
}

func (m *Response_Row) GetUnitId() *dstore_values.IntegerValue {
	if m != nil {
		return m.UnitId
	}
	return nil
}

func (m *Response_Row) GetBrutto() *dstore_values.BooleanValue {
	if m != nil {
		return m.Brutto
	}
	return nil
}

func (m *Response_Row) GetTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.TreeNodeId
	}
	return nil
}

func (m *Response_Row) GetNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *Response_Row) GetSurchargeTypeDescription() *dstore_values.StringValue {
	if m != nil {
		return m.SurchargeTypeDescription
	}
	return nil
}

func (m *Response_Row) GetSurchargeTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.SurchargeTypeId
	}
	return nil
}

func (m *Response_Row) GetValue3RestrictedByPattern() *dstore_values.StringValue {
	if m != nil {
		return m.Value3RestrictedByPattern
	}
	return nil
}

func (m *Response_Row) GetLevelId() *dstore_values.IntegerValue {
	if m != nil {
		return m.LevelId
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.om_GetPersonSurcharges_Ad.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.om_GetPersonSurcharges_Ad.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.om_GetPersonSurcharges_Ad.Response.Row")
}

var fileDescriptor0 = []byte{
	// 846 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0xdb, 0x6e, 0xeb, 0x44,
	0x14, 0x55, 0x09, 0xb9, 0x30, 0x8d, 0x9a, 0x76, 0x2a, 0x81, 0x9b, 0xa0, 0x0a, 0x15, 0x21, 0x10,
	0x0f, 0x2e, 0xb1, 0xa9, 0x28, 0x12, 0x20, 0xb5, 0xb4, 0x94, 0x3c, 0x34, 0x2a, 0x2e, 0x02, 0x15,
	0x21, 0x59, 0x4e, 0x3c, 0x04, 0x4b, 0x8e, 0x27, 0x1a, 0x8f, 0x5b, 0xe5, 0x2f, 0x7a, 0xee, 0xf7,
	0xfb, 0xcb, 0x79, 0x39, 0x1f, 0x76, 0xae, 0xdf, 0x70, 0xf6, 0xcc, 0x38, 0x17, 0xe7, 0x24, 0xb1,
	0xdb, 0x97, 0x56, 0x93, 0x59, 0x6b, 0xaf, 0x95, 0xbd, 0x67, 0xcd, 0x04, 0x6d, 0xbb, 0x21, 0xa7,
	0x8c, 0x6c, 0x92, 0xa0, 0xe3, 0x05, 0x64, 0xb3, 0xc7, 0x68, 0x9b, 0xb8, 0x11, 0x23, 0xe1, 0x26,
	0xed, 0xda, 0x07, 0x84, 0x1f, 0x11, 0x16, 0xd2, 0xe0, 0x38, 0x62, 0xed, 0xff, 0x1d, 0xd6, 0x21,
	0xa1, 0xbd, 0xe3, 0xea, 0x00, 0xe2, 0x14, 0x7f, 0xad, 0x98, 0xba, 0x62, 0xea, 0x33, 0xe1, 0xd5,
	0xd5, 0x58, 0xe2, 0xd4, 0xf1, 0x23, 0x12, 0x2a, 0x76, 0x75, 0x2d, 0xa9, 0x4b, 0x18, 0xa3, 0x2c,
	0xde, 0xaa, 0x25, 0xb7, 0xba, 0x24, 0x0c, 0x9d, 0x0e, 0x89, 0x37, 0xbf, 0x9c, 0xdc, 0xe4, 0x8e,
	0x17, 0xfc, 0x47, 0x59, 0xd7, 0xe1, 0x1e, 0x0d, 0x14, 0x68, 0xe3, 0x79, 0x01, 0xa1, 0x23, 0x87,
	0x39, 0xb0, 0x0b, 0x7e, 0xf0, 0x0e, 0x5a, 0xea, 0x49, 0x5f, 0x36, 0xef, 0xf7, 0x88, 0xed, 0xb9,
	0xda, 0xc2, 0x17, 0x0b, 0xdf, 0x2c, 0x1a, 0x35, 0x3d, 0xfe, 0x0a, 0xb1, 0x33, 0x2f, 0xe0, 0xa4,
	0x43, 0xd8, 0x5f, 0x62, 0x65, 0x95, 0x15, 0xe5, 0x4f, 0x60, 0x34, 0x5c, 0xac, 0xa3, 0xd5, 0x64,
	0x09, 0x3b, 0x88, 0x7c, 0x5f, 0x7b, 0x59, 0x84, 0x42, 0x25, 0x6b, 0x79, 0x1c, 0xdb, 0x84, 0x0d,
	0xbc, 0x8d, 0x3e, 0x89, 0xf1, 0xa0, 0xf6, 0x51, 0xba, 0x5a, 0x49, 0xa1, 0x41, 0xe9, 0xab, 0xa1,
	0xd9, 0x81, 0xc8, 0x2b, 0x25, 0x52, 0x1e, 0x40, 0xa4, 0xc0, 0xcf, 0xa8, 0xcc, 0x19, 0x21, 0x76,
	0x40, 0x5d, 0xf9, 0x8d, 0x72, 0xe9, 0x1a, 0x48, 0x10, 0x9a, 0x80, 0x07, 0x95, 0x6f, 0xd1, 0xca,
	0x38, 0x5d, 0x09, 0xbd, 0x56, 0x42, 0x4b, 0x23, 0x9c, 0x94, 0xfa, 0x1b, 0xad, 0xd1, 0x88, 0xf7,
	0x22, 0x6e, 0x8b, 0xa1, 0x3a, 0x6d, 0xe8, 0xa9, 0x17, 0x72, 0xaf, 0x0d, 0xbc, 0xba, 0xf6, 0x71,
	0xba, 0xee, 0x67, 0x8a, 0xfd, 0x6b, 0x82, 0xdc, 0x70, 0xeb, 0x78, 0x0f, 0xad, 0xcf, 0x2c, 0xac,
	0x1c, 0xbd, 0x51, 0x8e, 0x6a, 0x33, 0x2a, 0xa4, 0xd9, 0x33, 0xb4, 0xfc, 0xa5, 0xed, 0x19, 0xf3,
	0xec, 0x19, 0xca, 0xde, 0xdb, 0xb9, 0xf6, 0x8c, 0x34, 0x7b, 0xa6, 0x56, 0xb8, 0xb4, 0x3d, 0x73,
	0x9e, 0x3d, 0x53, 0xd9, 0x7b, 0x37, 0xd7, 0x9e, 0x29, 0xec, 0x6d, 0xbc, 0x28, 0xa3, 0x92, 0x45,
	0xc2, 0x1e, 0x0d, 0x42, 0x82, 0xbf, 0x43, 0x79, 0x19, 0xc4, 0x38, 0x1f, 0x55, 0x3d, 0x19, 0x71,
	0x15, 0xd2, 0x7d, 0xf1, 0xd7, 0x52, 0x40, 0x7c, 0x82, 0x96, 0x45, 0x04, 0xed, 0xb1, 0x0c, 0xc2,
	0x71, 0xcf, 0x01, 0x59, 0x9f, 0x20, 0x4f, 0x26, 0xf5, 0x10, 0xd6, 0x8d, 0xd1, 0xda, 0xaa, 0x74,
	0x93, 0x1f, 0x40, 0x84, 0x8a, 0x71, 0xf4, 0xe1, 0x70, 0x8b, 0x8a, 0xeb, 0x1f, 0x54, 0x54, 0x17,
	0xc3, 0xa1, 0xfa, 0x6f, 0x0d, 0xe0, 0xf8, 0x00, 0xe5, 0x18, 0x3d, 0x83, 0xa3, 0x29, 0x58, 0x5b,
	0x7a, 0xc6, 0x7b, 0x4a, 0x1f, 0xb4, 0x41, 0xb7, 0xe8, 0x99, 0x25, 0x2a, 0x54, 0xcf, 0x11, 0xca,
	0xc1, 0x02, 0x7f, 0x8a, 0x0a, 0xb0, 0x14, 0x31, 0x3b, 0x6f, 0x42, 0x67, 0xf2, 0x56, 0x1e, 0x96,
	0x90, 0xa2, 0x7f, 0xd1, 0xe7, 0x72, 0x64, 0x75, 0x1b, 0x2e, 0x4c, 0xce, 0x3c, 0xe8, 0xae, 0x6b,
	0xb7, 0xfa, 0x76, 0xcf, 0xe1, 0xd0, 0xe7, 0x40, 0xbb, 0xd2, 0x4c, 0xf6, 0x31, 0x9e, 0xaf, 0x80,
	0x06, 0x1d, 0x35, 0xde, 0x35, 0x55, 0xc0, 0x1a, 0xf2, 0x77, 0xfb, 0x47, 0x8a, 0x3d, 0xac, 0x6e,
	0xcc, 0xa8, 0x7e, 0x35, 0x6b, 0x75, 0x63, 0x5a, 0xf5, 0x6d, 0x54, 0x62, 0xc4, 0x87, 0x56, 0x9f,
	0x12, 0xed, 0x5a, 0x73, 0xea, 0x39, 0x6c, 0x51, 0xea, 0x13, 0x27, 0x88, 0x6f, 0xa8, 0x01, 0x1a,
	0x9b, 0xa8, 0x20, 0x01, 0xa6, 0x76, 0x3d, 0xdd, 0x41, 0x0c, 0x1d, 0x92, 0xea, 0xda, 0x8d, 0xac,
	0xa4, 0x3a, 0xfe, 0x09, 0x2d, 0x46, 0x81, 0xc7, 0xed, 0xb0, 0xdf, 0x6d, 0x51, 0x5f, 0xbb, 0x99,
	0xce, 0x44, 0x02, 0x7f, 0x2c, 0xe1, 0x43, 0x49, 0x43, 0xbb, 0x95, 0x55, 0xd2, 0xc0, 0xfb, 0xa8,
	0x12, 0x0e, 0x4e, 0x85, 0x2d, 0x3f, 0xd3, 0x6e, 0x4f, 0xef, 0x8e, 0x4b, 0xda, 0x5e, 0xd7, 0xf1,
	0x15, 0x7d, 0x69, 0x48, 0x92, 0x6b, 0xfc, 0x1b, 0x5a, 0x96, 0x57, 0xab, 0x4b, 0xc2, 0x36, 0xf3,
	0x7a, 0x32, 0x17, 0x77, 0xd2, 0x5d, 0x54, 0x04, 0x69, 0x6f, 0xc4, 0xc1, 0xdf, 0xa3, 0x02, 0x64,
	0x56, 0xcc, 0xe8, 0x6e, 0x86, 0x19, 0xc5, 0x58, 0xfc, 0xe3, 0xf8, 0xeb, 0x73, 0xaf, 0x79, 0x91,
	0xe7, 0x67, 0x0b, 0x15, 0x65, 0xcb, 0x81, 0x78, 0x3f, 0x03, 0xb1, 0x20, 0xc0, 0x40, 0x03, 0x9f,
	0x2d, 0x16, 0x71, 0x4e, 0xb5, 0x07, 0x59, 0x7c, 0x2a, 0x2c, 0xfe, 0x65, 0xe2, 0x11, 0x7b, 0xd8,
	0xbc, 0xd8, 0x2b, 0x06, 0x66, 0x07, 0xd4, 0x47, 0x59, 0xcc, 0x06, 0x8a, 0x76, 0x82, 0xaa, 0xa3,
	0x19, 0xcb, 0xf7, 0x7c, 0x7c, 0x4c, 0x8f, 0xd3, 0xc7, 0xa4, 0x0d, 0xe9, 0xe2, 0xc9, 0x1f, 0x9f,
	0xd7, 0xef, 0x68, 0x65, 0xa2, 0x34, 0x78, 0x7b, 0x92, 0xc1, 0x5b, 0x25, 0x51, 0x72, 0xec, 0x6e,
	0x31, 0x67, 0xa4, 0xff, 0x69, 0xd6, 0xf4, 0x9b, 0xd3, 0xd2, 0xff, 0x03, 0x2a, 0xf9, 0xe4, 0x94,
	0xf8, 0xc2, 0xde, 0xb3, 0x0c, 0xf6, 0x8a, 0x12, 0xdd, 0x70, 0x77, 0xff, 0x40, 0x35, 0x8f, 0x4e,
	0x5c, 0xa9, 0xa3, 0x1f, 0x8d, 0xff, 0x18, 0x17, 0xff, 0x39, 0xd9, 0x2a, 0xc8, 0x1f, 0x6d, 0xe6,
	0xfb, 0x00, 0x00, 0x00, 0xff, 0xff, 0x19, 0x87, 0xdc, 0x6c, 0x8b, 0x0a, 0x00, 0x00,
}
