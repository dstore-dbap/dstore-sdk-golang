// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/im_SearchCharacteristics_Pu.proto
// DO NOT EDIT!

/*
Package im_SearchCharacteristics_Pu is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/im_SearchCharacteristics_Pu.proto

It has these top-level messages:
	Parameters
	Response
*/
package im_SearchCharacteristics_Pu

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "dstore/values"
import dstore_engine_error "dstore/engine/error"
import dstore_engine_message "dstore/engine/message"
import dstore_engine_metainformation "dstore/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	NodeCharacteristicIds        *dstore_values.StringValue    `protobuf:"bytes,1,opt,name=node_characteristic_ids,json=nodeCharacteristicIds" json:"node_characteristic_ids,omitempty"`
	NodeCharacteristicIdsNull    bool                          `protobuf:"varint,1001,opt,name=node_characteristic_ids_null,json=nodeCharacteristicIdsNull" json:"node_characteristic_ids_null,omitempty"`
	Value                        *dstore_values.StringValue    `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	ValueNull                    bool                          `protobuf:"varint,1002,opt,name=value_null,json=valueNull" json:"value_null,omitempty"`
	IsLike                       *dstore_values.BooleanValue   `protobuf:"bytes,3,opt,name=is_like,json=isLike" json:"is_like,omitempty"`
	IsLikeNull                   bool                          `protobuf:"varint,1003,opt,name=is_like_null,json=isLikeNull" json:"is_like_null,omitempty"`
	Date                         *dstore_values.TimestampValue `protobuf:"bytes,4,opt,name=date" json:"date,omitempty"`
	DateNull                     bool                          `protobuf:"varint,1004,opt,name=date_null,json=dateNull" json:"date_null,omitempty"`
	IncludeInherited             *dstore_values.BooleanValue   `protobuf:"bytes,5,opt,name=include_inherited,json=includeInherited" json:"include_inherited,omitempty"`
	IncludeInheritedNull         bool                          `protobuf:"varint,1005,opt,name=include_inherited_null,json=includeInheritedNull" json:"include_inherited_null,omitempty"`
	LanguageId                   *dstore_values.IntegerValue   `protobuf:"bytes,6,opt,name=language_id,json=languageId" json:"language_id,omitempty"`
	LanguageIdNull               bool                          `protobuf:"varint,1006,opt,name=language_id_null,json=languageIdNull" json:"language_id_null,omitempty"`
	IncludeNodeDescription       *dstore_values.BooleanValue   `protobuf:"bytes,7,opt,name=include_node_description,json=includeNodeDescription" json:"include_node_description,omitempty"`
	IncludeNodeDescriptionNull   bool                          `protobuf:"varint,1007,opt,name=include_node_description_null,json=includeNodeDescriptionNull" json:"include_node_description_null,omitempty"`
	ResultUpToLevelNo            *dstore_values.IntegerValue   `protobuf:"bytes,8,opt,name=result_up_to_level_no,json=resultUpToLevelNo" json:"result_up_to_level_no,omitempty"`
	ResultUpToLevelNoNull        bool                          `protobuf:"varint,1008,opt,name=result_up_to_level_no_null,json=resultUpToLevelNoNull" json:"result_up_to_level_no_null,omitempty"`
	SearchUpToLevelNo            *dstore_values.IntegerValue   `protobuf:"bytes,9,opt,name=search_up_to_level_no,json=searchUpToLevelNo" json:"search_up_to_level_no,omitempty"`
	SearchUpToLevelNoNull        bool                          `protobuf:"varint,1009,opt,name=search_up_to_level_no_null,json=searchUpToLevelNoNull" json:"search_up_to_level_no_null,omitempty"`
	StartAtRowNo                 *dstore_values.IntegerValue   `protobuf:"bytes,10,opt,name=start_at_row_no,json=startAtRowNo" json:"start_at_row_no,omitempty"`
	StartAtRowNoNull             bool                          `protobuf:"varint,1010,opt,name=start_at_row_no_null,json=startAtRowNoNull" json:"start_at_row_no_null,omitempty"`
	RowCount                     *dstore_values.IntegerValue   `protobuf:"bytes,11,opt,name=row_count,json=rowCount" json:"row_count,omitempty"`
	RowCountNull                 bool                          `protobuf:"varint,1011,opt,name=row_count_null,json=rowCountNull" json:"row_count_null,omitempty"`
	MaintainSearchItemLacks      *dstore_values.BooleanValue   `protobuf:"bytes,12,opt,name=maintain_search_item_lacks,json=maintainSearchItemLacks" json:"maintain_search_item_lacks,omitempty"`
	MaintainSearchItemLacksNull  bool                          `protobuf:"varint,1012,opt,name=maintain_search_item_lacks_null,json=maintainSearchItemLacksNull" json:"maintain_search_item_lacks_null,omitempty"`
	FilterByCharacteristicId     *dstore_values.IntegerValue   `protobuf:"bytes,13,opt,name=filter_by_characteristic_id,json=filterByCharacteristicId" json:"filter_by_characteristic_id,omitempty"`
	FilterByCharacteristicIdNull bool                          `protobuf:"varint,1013,opt,name=filter_by_characteristic_id_null,json=filterByCharacteristicIdNull" json:"filter_by_characteristic_id_null,omitempty"`
	FilterByCharacValue          *dstore_values.StringValue    `protobuf:"bytes,14,opt,name=filter_by_charac_value,json=filterByCharacValue" json:"filter_by_charac_value,omitempty"`
	FilterByCharacValueNull      bool                          `protobuf:"varint,1014,opt,name=filter_by_charac_value_null,json=filterByCharacValueNull" json:"filter_by_charac_value_null,omitempty"`
	SortResult                   *dstore_values.BooleanValue   `protobuf:"bytes,15,opt,name=sort_result,json=sortResult" json:"sort_result,omitempty"`
	SortResultNull               bool                          `protobuf:"varint,1015,opt,name=sort_result_null,json=sortResultNull" json:"sort_result_null,omitempty"`
	NegateFilterByParams         *dstore_values.BooleanValue   `protobuf:"bytes,16,opt,name=negate_filter_by_params,json=negateFilterByParams" json:"negate_filter_by_params,omitempty"`
	NegateFilterByParamsNull     bool                          `protobuf:"varint,1016,opt,name=negate_filter_by_params_null,json=negateFilterByParamsNull" json:"negate_filter_by_params_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetNodeCharacteristicIds() *dstore_values.StringValue {
	if m != nil {
		return m.NodeCharacteristicIds
	}
	return nil
}

func (m *Parameters) GetValue() *dstore_values.StringValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Parameters) GetIsLike() *dstore_values.BooleanValue {
	if m != nil {
		return m.IsLike
	}
	return nil
}

func (m *Parameters) GetDate() *dstore_values.TimestampValue {
	if m != nil {
		return m.Date
	}
	return nil
}

func (m *Parameters) GetIncludeInherited() *dstore_values.BooleanValue {
	if m != nil {
		return m.IncludeInherited
	}
	return nil
}

func (m *Parameters) GetLanguageId() *dstore_values.IntegerValue {
	if m != nil {
		return m.LanguageId
	}
	return nil
}

func (m *Parameters) GetIncludeNodeDescription() *dstore_values.BooleanValue {
	if m != nil {
		return m.IncludeNodeDescription
	}
	return nil
}

func (m *Parameters) GetResultUpToLevelNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.ResultUpToLevelNo
	}
	return nil
}

func (m *Parameters) GetSearchUpToLevelNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.SearchUpToLevelNo
	}
	return nil
}

func (m *Parameters) GetStartAtRowNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.StartAtRowNo
	}
	return nil
}

func (m *Parameters) GetRowCount() *dstore_values.IntegerValue {
	if m != nil {
		return m.RowCount
	}
	return nil
}

func (m *Parameters) GetMaintainSearchItemLacks() *dstore_values.BooleanValue {
	if m != nil {
		return m.MaintainSearchItemLacks
	}
	return nil
}

func (m *Parameters) GetFilterByCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.FilterByCharacteristicId
	}
	return nil
}

func (m *Parameters) GetFilterByCharacValue() *dstore_values.StringValue {
	if m != nil {
		return m.FilterByCharacValue
	}
	return nil
}

func (m *Parameters) GetSortResult() *dstore_values.BooleanValue {
	if m != nil {
		return m.SortResult
	}
	return nil
}

func (m *Parameters) GetNegateFilterByParams() *dstore_values.BooleanValue {
	if m != nil {
		return m.NegateFilterByParams
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId                      int32                       `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	Inherited                  *dstore_values.BooleanValue `protobuf:"bytes,10001,opt,name=inherited" json:"inherited,omitempty"`
	LevelNo                    *dstore_values.IntegerValue `protobuf:"bytes,10002,opt,name=level_no,json=levelNo" json:"level_no,omitempty"`
	NodeCharacteristicId       *dstore_values.IntegerValue `protobuf:"bytes,10003,opt,name=node_characteristic_id,json=nodeCharacteristicId" json:"node_characteristic_id,omitempty"`
	ValueId                    *dstore_values.IntegerValue `protobuf:"bytes,10004,opt,name=value_id,json=valueId" json:"value_id,omitempty"`
	NodeDescription            *dstore_values.StringValue  `protobuf:"bytes,10005,opt,name=node_description,json=nodeDescription" json:"node_description,omitempty"`
	HTreeNodeId                *dstore_values.IntegerValue `protobuf:"bytes,10006,opt,name=h_tree_node_id,json=hTreeNodeId" json:"h_tree_node_id,omitempty"`
	TreeNodeId                 *dstore_values.IntegerValue `protobuf:"bytes,10007,opt,name=tree_node_id,json=treeNodeId" json:"tree_node_id,omitempty"`
	NodeId                     *dstore_values.IntegerValue `protobuf:"bytes,10008,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	Value                      *dstore_values.StringValue  `protobuf:"bytes,10009,opt,name=value" json:"value,omitempty"`
	PrePredecessorsDescription *dstore_values.StringValue  `protobuf:"bytes,10010,opt,name=pre_predecessors_description,json=prePredecessorsDescription" json:"pre_predecessors_description,omitempty"`
	PrePredecessorsTreeNodeId  *dstore_values.IntegerValue `protobuf:"bytes,10011,opt,name=pre_predecessors_tree_node_id,json=prePredecessorsTreeNodeId" json:"pre_predecessors_tree_node_id,omitempty"`
	PredecessorsTreeNodeId     *dstore_values.IntegerValue `protobuf:"bytes,10012,opt,name=predecessors_tree_node_id,json=predecessorsTreeNodeId" json:"predecessors_tree_node_id,omitempty"`
	PredecessorsDescription    *dstore_values.StringValue  `protobuf:"bytes,10013,opt,name=predecessors_description,json=predecessorsDescription" json:"predecessors_description,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetInherited() *dstore_values.BooleanValue {
	if m != nil {
		return m.Inherited
	}
	return nil
}

func (m *Response_Row) GetLevelNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.LevelNo
	}
	return nil
}

func (m *Response_Row) GetNodeCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeCharacteristicId
	}
	return nil
}

func (m *Response_Row) GetValueId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ValueId
	}
	return nil
}

func (m *Response_Row) GetNodeDescription() *dstore_values.StringValue {
	if m != nil {
		return m.NodeDescription
	}
	return nil
}

func (m *Response_Row) GetHTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.HTreeNodeId
	}
	return nil
}

func (m *Response_Row) GetTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.TreeNodeId
	}
	return nil
}

func (m *Response_Row) GetNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *Response_Row) GetValue() *dstore_values.StringValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Response_Row) GetPrePredecessorsDescription() *dstore_values.StringValue {
	if m != nil {
		return m.PrePredecessorsDescription
	}
	return nil
}

func (m *Response_Row) GetPrePredecessorsTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PrePredecessorsTreeNodeId
	}
	return nil
}

func (m *Response_Row) GetPredecessorsTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PredecessorsTreeNodeId
	}
	return nil
}

func (m *Response_Row) GetPredecessorsDescription() *dstore_values.StringValue {
	if m != nil {
		return m.PredecessorsDescription
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.im_SearchCharacteristics_Pu.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.im_SearchCharacteristics_Pu.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.im_SearchCharacteristics_Pu.Response.Row")
}

var fileDescriptor0 = []byte{
	// 1136 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x57, 0x59, 0x6f, 0xdb, 0x46,
	0x10, 0x46, 0xea, 0xd8, 0x92, 0xc6, 0xae, 0xa5, 0x6c, 0x6c, 0x99, 0x96, 0xec, 0x34, 0x4d, 0x51,
	0xa0, 0x79, 0x91, 0x9b, 0x36, 0x41, 0x0a, 0xa3, 0x57, 0x9c, 0x26, 0xad, 0x00, 0x5b, 0x35, 0x98,
	0xa3, 0x6d, 0x80, 0x96, 0xa0, 0xc9, 0x8d, 0x44, 0x84, 0x22, 0x09, 0xee, 0x2a, 0x41, 0xfe, 0x45,
	0xef, 0xbb, 0xff, 0xa6, 0xff, 0x24, 0x4f, 0xbd, 0xef, 0xe3, 0xb1, 0xb3, 0x3b, 0x64, 0x24, 0x51,
	0x54, 0x48, 0xf4, 0x21, 0x91, 0x49, 0xce, 0x77, 0xec, 0x70, 0x77, 0x66, 0x08, 0xbb, 0xae, 0x90,
	0x61, 0xcc, 0x77, 0x78, 0xd0, 0xf7, 0x02, 0xbe, 0x13, 0xc5, 0xa1, 0xc3, 0xdd, 0x51, 0xcc, 0xc5,
	0x8e, 0x37, 0xb4, 0xae, 0x71, 0x3b, 0x76, 0x06, 0x97, 0x07, 0x76, 0x6c, 0x3b, 0x92, 0xc7, 0x9e,
	0x90, 0x9e, 0x23, 0xac, 0xc3, 0x51, 0x07, 0xc3, 0x64, 0xc8, 0xce, 0x12, 0xb6, 0x43, 0xd8, 0xce,
	0x23, 0x00, 0xad, 0x93, 0x89, 0xcc, 0x5d, 0xdb, 0x1f, 0x71, 0x41, 0xf8, 0xd6, 0xe6, 0xb4, 0x36,
	0x8f, 0xe3, 0x30, 0x4e, 0x1e, 0xb5, 0xa7, 0x1f, 0x0d, 0xb9, 0x10, 0x76, 0x9f, 0x27, 0x0f, 0x9f,
	0xca, 0x3e, 0x94, 0xb6, 0x17, 0xdc, 0x0e, 0xe3, 0xa1, 0x2d, 0xbd, 0x30, 0xa0, 0xa0, 0x33, 0x0f,
	0xea, 0x00, 0x87, 0xe8, 0x03, 0x9f, 0xf2, 0x58, 0x30, 0x13, 0x36, 0x82, 0xd0, 0xe5, 0x96, 0x33,
	0xe5, 0xcd, 0xf2, 0x5c, 0x61, 0x1c, 0x3b, 0x7d, 0xec, 0x99, 0xe5, 0xe7, 0x5a, 0x9d, 0x64, 0x35,
	0x89, 0x45, 0x21, 0x63, 0x2f, 0xe8, 0xdf, 0x54, 0x17, 0xe6, 0xba, 0x82, 0x4e, 0xaf, 0xaa, 0xeb,
	0x0a, 0xf6, 0x2a, 0x6c, 0xcd, 0xe1, 0xb4, 0x82, 0x91, 0xef, 0x1b, 0xdf, 0x55, 0x90, 0xb9, 0x6a,
	0x6e, 0xe6, 0xa2, 0x7b, 0x18, 0xc1, 0x9e, 0x85, 0x45, 0x2d, 0x67, 0x3c, 0x56, 0xe8, 0x81, 0x02,
	0xd9, 0x29, 0x00, 0xfd, 0x07, 0x29, 0x7c, 0x4f, 0x0a, 0x35, 0x7d, 0x4b, 0x33, 0x9e, 0x87, 0x8a,
	0x27, 0x2c, 0xdf, 0xbb, 0xc3, 0x8d, 0x05, 0xcd, 0xd9, 0xce, 0x70, 0x1e, 0x85, 0xa1, 0xcf, 0xed,
	0x80, 0x48, 0x97, 0x3c, 0xb1, 0x8f, 0xa1, 0xec, 0x49, 0x58, 0x49, 0x50, 0xc4, 0xfb, 0x03, 0xf1,
	0x02, 0x3d, 0xd6, 0xc4, 0xe7, 0xe0, 0xb8, 0x6b, 0x4b, 0x6e, 0x1c, 0xd7, 0xac, 0xdb, 0x19, 0x56,
	0xe9, 0xe1, 0x2b, 0x92, 0xf6, 0x30, 0x22, 0x5e, 0x1d, 0xca, 0xb6, 0xa0, 0xa6, 0x7e, 0x89, 0xf2,
	0x47, 0xa2, 0xac, 0xaa, 0x3b, 0x9a, 0xf0, 0x0d, 0x38, 0xe1, 0x05, 0x8e, 0x3f, 0xc2, 0x04, 0x7a,
	0xc1, 0x00, 0x13, 0x23, 0xb9, 0x6b, 0x2c, 0x16, 0x7b, 0x6e, 0x24, 0xa8, 0x6e, 0x0a, 0x62, 0x17,
	0xa0, 0x39, 0xc3, 0x44, 0xa2, 0x3f, 0x91, 0xe8, 0x5a, 0x16, 0xa2, 0x0d, 0xbc, 0x08, 0xcb, 0xbe,
	0x1d, 0xf4, 0x47, 0xb8, 0xb1, 0xf0, 0x9d, 0x19, 0x4b, 0xb9, 0xd2, 0x5e, 0x20, 0x79, 0x9f, 0xc7,
	0x24, 0x0d, 0x69, 0x7c, 0xd7, 0x65, 0x67, 0xa1, 0x31, 0x81, 0x26, 0xb9, 0x9f, 0x49, 0x6e, 0x75,
	0x1c, 0xa6, 0x85, 0x6e, 0x80, 0x91, 0xfa, 0xd3, 0xfb, 0xc5, 0xe5, 0xc2, 0x89, 0xbd, 0x48, 0x6d,
	0x56, 0xa3, 0x52, 0xbc, 0xe0, 0x74, 0x71, 0x3d, 0xc4, 0xbe, 0x36, 0x86, 0xb2, 0x3d, 0xd8, 0x9e,
	0x47, 0x4b, 0x76, 0x7e, 0x21, 0x3b, 0xad, 0x7c, 0xbc, 0xb6, 0x76, 0x00, 0xeb, 0x78, 0xd6, 0x47,
	0xbe, 0xb4, 0x46, 0x91, 0x25, 0x43, 0xcb, 0xe7, 0x77, 0xb9, 0x8f, 0x74, 0x46, 0xb5, 0x38, 0x1b,
	0x27, 0x08, 0x79, 0x23, 0xba, 0x1e, 0xee, 0x2b, 0x58, 0x2f, 0x64, 0xbb, 0xd0, 0xca, 0xa5, 0x23,
	0x3f, 0xbf, 0x92, 0x9f, 0xf5, 0x19, 0x5c, 0x6a, 0x45, 0xe8, 0xf2, 0x91, 0xb5, 0x52, 0x2b, 0x61,
	0x85, 0x90, 0x19, 0x2b, 0xb9, 0x74, 0x64, 0xe5, 0xb7, 0xc4, 0xca, 0x0c, 0x4e, 0x5b, 0xd9, 0x83,
	0x3a, 0x6e, 0xe6, 0x58, 0x5a, 0xb6, 0xb4, 0xe2, 0xf0, 0x9e, 0x32, 0x01, 0xc5, 0x26, 0x56, 0x34,
	0xe6, 0x92, 0x34, 0xc3, 0x7b, 0xa8, 0xbf, 0x03, 0x6b, 0x19, 0x0e, 0x52, 0xfe, 0x9d, 0x94, 0x1b,
	0x93, 0xc1, 0x5a, 0xf4, 0x05, 0xa8, 0xa9, 0x38, 0x27, 0x1c, 0x05, 0xd2, 0x58, 0x2e, 0x96, 0xab,
	0x62, 0xf4, 0x65, 0x15, 0xcc, 0x9e, 0x86, 0xd5, 0x87, 0x48, 0x12, 0xf9, 0x83, 0x44, 0x56, 0xd2,
	0x10, 0x2d, 0xf0, 0x36, 0xb4, 0x86, 0x58, 0x28, 0x55, 0xb1, 0xb4, 0x92, 0xd4, 0xe0, 0x59, 0x18,
	0x5a, 0xbe, 0xed, 0xdc, 0x11, 0xc6, 0x4a, 0xf1, 0x46, 0xdc, 0x48, 0xe1, 0x54, 0xe6, 0xbb, 0x08,
	0xde, 0x57, 0x58, 0x76, 0x05, 0x9e, 0x98, 0xcf, 0x4c, 0x8e, 0xfe, 0x24, 0x47, 0xed, 0x39, 0x14,
	0xda, 0xe0, 0x2d, 0x68, 0xdf, 0xf6, 0x7c, 0xac, 0x91, 0xd6, 0xd1, 0xfd, 0xd9, 0xa2, 0x6a, 0x3c,
	0x5e, 0x9c, 0x13, 0x83, 0xf0, 0x7b, 0xf7, 0xb3, 0xe5, 0x96, 0xbd, 0x0e, 0xa7, 0x1f, 0xc1, 0x4d,
	0x1e, 0xff, 0x22, 0x8f, 0x5b, 0xf3, 0x48, 0xb4, 0xc9, 0x37, 0xa1, 0x99, 0x25, 0xb2, 0xa8, 0x86,
	0xaf, 0x16, 0xd6, 0xf0, 0x93, 0xd3, 0xcc, 0xfa, 0x26, 0x7b, 0x69, 0x76, 0xd5, 0xd6, 0x44, 0x89,
	0xff, 0x9b, 0x4c, 0x6d, 0xe4, 0x40, 0xd3, 0x2a, 0x26, 0x42, 0xdc, 0x66, 0x74, 0xa8, 0x8c, 0x7a,
	0xf1, 0x6b, 0x04, 0x15, 0x6f, 0xea, 0x70, 0x55, 0xc5, 0x26, 0xd0, 0xa4, 0xf8, 0x4f, 0x52, 0xc5,
	0xc6, 0x61, 0x5a, 0x48, 0x75, 0x50, 0xde, 0x57, 0xf5, 0x7c, 0x6c, 0x37, 0x52, 0x0d, 0x56, 0x18,
	0x8d, 0x62, 0xd1, 0x35, 0xc2, 0x5e, 0x4d, 0x56, 0xa1, 0x3b, 0xb3, 0x60, 0xaf, 0x60, 0x07, 0xcd,
	0xe7, 0x24, 0x2b, 0xff, 0x92, 0x15, 0x23, 0x0f, 0xac, 0x4c, 0x9d, 0x79, 0x50, 0x83, 0x2a, 0x7a,
	0x8c, 0xc2, 0x40, 0x70, 0xd5, 0x4d, 0xf5, 0x0c, 0x91, 0xed, 0xe8, 0xc9, 0x7c, 0x42, 0xf3, 0xc5,
	0x15, 0xf5, 0xbf, 0x49, 0x81, 0xec, 0x1d, 0x68, 0xa8, 0xe9, 0xc1, 0x9a, 0x18, 0x1f, 0xb0, 0x15,
	0x2f, 0x20, 0xb8, 0x93, 0x01, 0x67, 0x87, 0x8c, 0x03, 0xbc, 0xee, 0x8e, 0xaf, 0xcd, 0xfa, 0x70,
	0xfa, 0x06, 0x1e, 0xe7, 0x4a, 0x32, 0xb5, 0x60, 0x23, 0x56, 0x8c, 0xa7, 0x66, 0x18, 0x69, 0xa6,
	0x39, 0xa0, 0x5f, 0x33, 0x0d, 0x67, 0x5d, 0x58, 0xc0, 0x73, 0x8b, 0x8d, 0x56, 0xa1, 0x2e, 0x76,
	0x4a, 0x0f, 0x59, 0x9d, 0x34, 0x11, 0x1d, 0x2c, 0x2a, 0xa6, 0xe2, 0x68, 0x7d, 0x5b, 0x81, 0x05,
	0xbc, 0x60, 0x4d, 0x58, 0x52, 0x15, 0x02, 0x0f, 0xd1, 0xfb, 0x3d, 0xcc, 0xcd, 0xa2, 0xb9, 0x88,
	0x97, 0x78, 0x2a, 0x76, 0xa1, 0x36, 0xee, 0xbd, 0x1f, 0xf4, 0x8a, 0x5f, 0xe3, 0x38, 0x9c, 0x5d,
	0x84, 0xea, 0xc3, 0x12, 0xfd, 0x61, 0xaf, 0xf8, 0x6c, 0x56, 0xfc, 0xa4, 0x32, 0x9b, 0xd0, 0xcc,
	0x1f, 0x9b, 0x8c, 0x8f, 0x4a, 0xd0, 0xac, 0xe5, 0x4d, 0x53, 0xca, 0x0c, 0x9d, 0x19, 0x64, 0xf9,
	0xb8, 0x8c, 0x19, 0x7d, 0x13, 0x81, 0x57, 0xa1, 0x31, 0xd3, 0x93, 0x3f, 0xe9, 0x15, 0x9e, 0xe4,
	0x7a, 0x90, 0x69, 0xc6, 0x97, 0x60, 0x75, 0x60, 0xc9, 0x98, 0x27, 0xbd, 0x18, 0x6d, 0x7c, 0x5a,
	0xc2, 0xc6, 0xf2, 0xe0, 0x3a, 0x42, 0x54, 0x63, 0x46, 0x2b, 0x2f, 0xc3, 0xca, 0x14, 0xc1, 0x67,
	0x25, 0x08, 0x40, 0x8e, 0xf1, 0x17, 0xa0, 0x92, 0x42, 0x3f, 0x2f, 0x01, 0x5d, 0x0a, 0x08, 0x76,
	0x2e, 0x9d, 0x41, 0xbf, 0xe8, 0x95, 0x1d, 0x42, 0xdf, 0x85, 0xad, 0x28, 0xe6, 0x16, 0xfe, 0x73,
	0xb9, 0x83, 0xbb, 0x36, 0x8c, 0xc5, 0x54, 0x02, 0xbf, 0x2c, 0x66, 0x6a, 0x21, 0xf8, 0x70, 0x02,
	0x3f, 0x99, 0xcb, 0xf7, 0x60, 0x7b, 0x86, 0x7e, 0x2a, 0x33, 0x5f, 0x95, 0x58, 0xde, 0x66, 0x46,
	0x60, 0x22, 0xd1, 0x6f, 0xc1, 0xe6, 0x7c, 0xee, 0xaf, 0x4b, 0x70, 0x37, 0xa3, 0x7c, 0xe2, 0x9b,
	0x60, 0xcc, 0xcd, 0xc9, 0x37, 0xc5, 0x39, 0xd9, 0x88, 0xf2, 0x13, 0xb2, 0x77, 0x0d, 0xda, 0x5e,
	0x98, 0x29, 0x04, 0xe3, 0x2f, 0xb5, 0x5b, 0xe7, 0xff, 0xcf, 0x37, 0xdc, 0xd1, 0x92, 0xfe, 0x4e,
	0x7a, 0xfe, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x2c, 0x16, 0x8b, 0x28, 0x02, 0x0e, 0x00, 0x00,
}
