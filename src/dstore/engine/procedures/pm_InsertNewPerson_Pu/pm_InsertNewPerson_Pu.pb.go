// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/pm_InsertNewPerson_Pu.proto
// DO NOT EDIT!

/*
Package pm_InsertNewPerson_Pu is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/pm_InsertNewPerson_Pu.proto

It has these top-level messages:
	Parameters
	Response
*/
package pm_InsertNewPerson_Pu

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "dstore/values"
import dstore_engine_error "dstore/engine/error"
import dstore_engine_message "dstore/engine/message"
import dstore_engine_metainformation "dstore/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	UniqueId                         *dstore_values.StringValue  `protobuf:"bytes,1,opt,name=unique_id,json=uniqueId" json:"unique_id,omitempty"`
	UniqueIdNull                     bool                        `protobuf:"varint,1001,opt,name=unique_id_null,json=uniqueIdNull" json:"unique_id_null,omitempty"`
	CharacteristicIdList1            *dstore_values.StringValue  `protobuf:"bytes,2,opt,name=characteristic_id_list1,json=characteristicIdList1" json:"characteristic_id_list1,omitempty"`
	CharacteristicIdList1Null        bool                        `protobuf:"varint,1002,opt,name=characteristic_id_list1_null,json=characteristicIdList1Null" json:"characteristic_id_list1_null,omitempty"`
	ValueList1                       *dstore_values.StringValue  `protobuf:"bytes,3,opt,name=value_list1,json=valueList1" json:"value_list1,omitempty"`
	ValueList1Null                   bool                        `protobuf:"varint,1003,opt,name=value_list1_null,json=valueList1Null" json:"value_list1_null,omitempty"`
	CharacteristicIdList2            *dstore_values.StringValue  `protobuf:"bytes,4,opt,name=characteristic_id_list2,json=characteristicIdList2" json:"characteristic_id_list2,omitempty"`
	CharacteristicIdList2Null        bool                        `protobuf:"varint,1004,opt,name=characteristic_id_list2_null,json=characteristicIdList2Null" json:"characteristic_id_list2_null,omitempty"`
	ValueList2                       *dstore_values.StringValue  `protobuf:"bytes,5,opt,name=value_list2,json=valueList2" json:"value_list2,omitempty"`
	ValueList2Null                   bool                        `protobuf:"varint,1005,opt,name=value_list2_null,json=valueList2Null" json:"value_list2_null,omitempty"`
	PersonCharacCategoryId           *dstore_values.IntegerValue `protobuf:"bytes,6,opt,name=person_charac_category_id,json=personCharacCategoryId" json:"person_charac_category_id,omitempty"`
	PersonCharacCategoryIdNull       bool                        `protobuf:"varint,1006,opt,name=person_charac_category_id_null,json=personCharacCategoryIdNull" json:"person_charac_category_id_null,omitempty"`
	ResultInErrorIdList              *dstore_values.BooleanValue `protobuf:"bytes,7,opt,name=result_in_error_id_list,json=resultInErrorIdList" json:"result_in_error_id_list,omitempty"`
	ResultInErrorIdListNull          bool                        `protobuf:"varint,1007,opt,name=result_in_error_id_list_null,json=resultInErrorIdListNull" json:"result_in_error_id_list_null,omitempty"`
	ValueIdsForPredefinedCharacs     *dstore_values.BooleanValue `protobuf:"bytes,8,opt,name=value_ids_for_predefined_characs,json=valueIdsForPredefinedCharacs" json:"value_ids_for_predefined_characs,omitempty"`
	ValueIdsForPredefinedCharacsNull bool                        `protobuf:"varint,1008,opt,name=value_ids_for_predefined_characs_null,json=valueIdsForPredefinedCharacsNull" json:"value_ids_for_predefined_characs_null,omitempty"`
	GeneratePassword                 *dstore_values.BooleanValue `protobuf:"bytes,9,opt,name=generate_password,json=generatePassword" json:"generate_password,omitempty"`
	GeneratePasswordNull             bool                        `protobuf:"varint,1009,opt,name=generate_password_null,json=generatePasswordNull" json:"generate_password_null,omitempty"`
	GenerateCustomerNo               *dstore_values.BooleanValue `protobuf:"bytes,10,opt,name=generate_customer_no,json=generateCustomerNo" json:"generate_customer_no,omitempty"`
	GenerateCustomerNoNull           bool                        `protobuf:"varint,1010,opt,name=generate_customer_no_null,json=generateCustomerNoNull" json:"generate_customer_no_null,omitempty"`
	CancelOnError                    *dstore_values.BooleanValue `protobuf:"bytes,11,opt,name=cancel_on_error,json=cancelOnError" json:"cancel_on_error,omitempty"`
	CancelOnErrorNull                bool                        `protobuf:"varint,1011,opt,name=cancel_on_error_null,json=cancelOnErrorNull" json:"cancel_on_error_null,omitempty"`
	SeparatorInLists                 *dstore_values.StringValue  `protobuf:"bytes,12,opt,name=separator_in_lists,json=separatorInLists" json:"separator_in_lists,omitempty"`
	SeparatorInListsNull             bool                        `protobuf:"varint,1012,opt,name=separator_in_lists_null,json=separatorInListsNull" json:"separator_in_lists_null,omitempty"`
	UpdateVisitorPersons             *dstore_values.BooleanValue `protobuf:"bytes,13,opt,name=update_visitor_persons,json=updateVisitorPersons" json:"update_visitor_persons,omitempty"`
	UpdateVisitorPersonsNull         bool                        `protobuf:"varint,1013,opt,name=update_visitor_persons_null,json=updateVisitorPersonsNull" json:"update_visitor_persons_null,omitempty"`
	PersonTypeId                     *dstore_values.IntegerValue `protobuf:"bytes,14,opt,name=person_type_id,json=personTypeId" json:"person_type_id,omitempty"`
	PersonTypeIdNull                 bool                        `protobuf:"varint,1014,opt,name=person_type_id_null,json=personTypeIdNull" json:"person_type_id_null,omitempty"`
	Country                          *dstore_values.StringValue  `protobuf:"bytes,15,opt,name=country" json:"country,omitempty"`
	CountryNull                      bool                        `protobuf:"varint,1015,opt,name=country_null,json=countryNull" json:"country_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetUniqueId() *dstore_values.StringValue {
	if m != nil {
		return m.UniqueId
	}
	return nil
}

func (m *Parameters) GetCharacteristicIdList1() *dstore_values.StringValue {
	if m != nil {
		return m.CharacteristicIdList1
	}
	return nil
}

func (m *Parameters) GetValueList1() *dstore_values.StringValue {
	if m != nil {
		return m.ValueList1
	}
	return nil
}

func (m *Parameters) GetCharacteristicIdList2() *dstore_values.StringValue {
	if m != nil {
		return m.CharacteristicIdList2
	}
	return nil
}

func (m *Parameters) GetValueList2() *dstore_values.StringValue {
	if m != nil {
		return m.ValueList2
	}
	return nil
}

func (m *Parameters) GetPersonCharacCategoryId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonCharacCategoryId
	}
	return nil
}

func (m *Parameters) GetResultInErrorIdList() *dstore_values.BooleanValue {
	if m != nil {
		return m.ResultInErrorIdList
	}
	return nil
}

func (m *Parameters) GetValueIdsForPredefinedCharacs() *dstore_values.BooleanValue {
	if m != nil {
		return m.ValueIdsForPredefinedCharacs
	}
	return nil
}

func (m *Parameters) GetGeneratePassword() *dstore_values.BooleanValue {
	if m != nil {
		return m.GeneratePassword
	}
	return nil
}

func (m *Parameters) GetGenerateCustomerNo() *dstore_values.BooleanValue {
	if m != nil {
		return m.GenerateCustomerNo
	}
	return nil
}

func (m *Parameters) GetCancelOnError() *dstore_values.BooleanValue {
	if m != nil {
		return m.CancelOnError
	}
	return nil
}

func (m *Parameters) GetSeparatorInLists() *dstore_values.StringValue {
	if m != nil {
		return m.SeparatorInLists
	}
	return nil
}

func (m *Parameters) GetUpdateVisitorPersons() *dstore_values.BooleanValue {
	if m != nil {
		return m.UpdateVisitorPersons
	}
	return nil
}

func (m *Parameters) GetPersonTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonTypeId
	}
	return nil
}

func (m *Parameters) GetCountry() *dstore_values.StringValue {
	if m != nil {
		return m.Country
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
	PersonId        *dstore_values.IntegerValue                      `protobuf:"bytes,101,opt,name=person_id,json=personId" json:"person_id,omitempty"`
	ErrorIdList     *dstore_values.StringValue                       `protobuf:"bytes,102,opt,name=error_id_list,json=errorIdList" json:"error_id_list,omitempty"`
	Password        *dstore_values.StringValue                       `protobuf:"bytes,103,opt,name=password" json:"password,omitempty"`
	CustomerNo      *dstore_values.StringValue                       `protobuf:"bytes,104,opt,name=customer_no,json=customerNo" json:"customer_no,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

func (m *Response) GetPersonId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonId
	}
	return nil
}

func (m *Response) GetErrorIdList() *dstore_values.StringValue {
	if m != nil {
		return m.ErrorIdList
	}
	return nil
}

func (m *Response) GetPassword() *dstore_values.StringValue {
	if m != nil {
		return m.Password
	}
	return nil
}

func (m *Response) GetCustomerNo() *dstore_values.StringValue {
	if m != nil {
		return m.CustomerNo
	}
	return nil
}

type Response_Row struct {
	RowId                  int32                       `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	PersonCharacteristicId *dstore_values.IntegerValue `protobuf:"bytes,10001,opt,name=person_characteristic_id,json=personCharacteristicId" json:"person_characteristic_id,omitempty"`
	ResultCode             *dstore_values.IntegerValue `protobuf:"bytes,10002,opt,name=result_code,json=resultCode" json:"result_code,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetPersonCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonCharacteristicId
	}
	return nil
}

func (m *Response_Row) GetResultCode() *dstore_values.IntegerValue {
	if m != nil {
		return m.ResultCode
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.pm_InsertNewPerson_Pu.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.pm_InsertNewPerson_Pu.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.pm_InsertNewPerson_Pu.Response.Row")
}

var fileDescriptor0 = []byte{
	// 979 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0xdd, 0x6f, 0xe3, 0x44,
	0x10, 0x57, 0x29, 0x69, 0xd3, 0x49, 0x3f, 0x72, 0xdb, 0x92, 0xba, 0x69, 0x75, 0xaa, 0x7a, 0x3a,
	0x09, 0x5e, 0x5c, 0x2e, 0x1c, 0x07, 0x02, 0x71, 0x02, 0x22, 0x10, 0x91, 0x68, 0x08, 0x16, 0xaa,
	0x04, 0x2f, 0x96, 0xcf, 0xde, 0xe6, 0x2c, 0x25, 0xbb, 0x66, 0xd7, 0xbe, 0xaa, 0xff, 0x05, 0xf0,
	0xb7, 0xdc, 0x23, 0xff, 0x10, 0xdf, 0xdf, 0xf0, 0xca, 0x78, 0x67, 0x93, 0xc6, 0x4e, 0x5a, 0xb7,
	0xf7, 0x94, 0xd8, 0x9e, 0xdf, 0xc7, 0xec, 0xce, 0xee, 0x0c, 0x3c, 0x8c, 0x74, 0x2a, 0x15, 0x3f,
	0xe6, 0x62, 0x18, 0x0b, 0x7e, 0x9c, 0x28, 0x19, 0xf2, 0x28, 0x53, 0x5c, 0x1f, 0x27, 0x63, 0xbf,
	0x27, 0x34, 0x57, 0x69, 0x9f, 0x9f, 0x0f, 0xb8, 0xd2, 0x52, 0xf8, 0x83, 0xcc, 0xc5, 0x80, 0x54,
	0xb2, 0x7b, 0x84, 0x72, 0x09, 0xe5, 0x2e, 0x0c, 0x6d, 0x6f, 0x5b, 0xea, 0x67, 0xc1, 0x28, 0xe3,
	0x9a, 0x90, 0xed, 0xbd, 0xa2, 0x1e, 0x57, 0x4a, 0x2a, 0xfb, 0x69, 0xbf, 0xf8, 0x69, 0xcc, 0xb5,
	0x0e, 0x86, 0xdc, 0x7e, 0xbc, 0x57, 0xfe, 0x98, 0x06, 0xb1, 0x38, 0x93, 0x6a, 0x1c, 0xa4, 0xb1,
	0x14, 0x14, 0x74, 0xf4, 0x7c, 0x0b, 0x60, 0x10, 0xa8, 0x00, 0xbf, 0xa2, 0x0b, 0xf6, 0x16, 0xac,
	0x65, 0x22, 0xfe, 0x3a, 0xe3, 0x7e, 0x1c, 0x39, 0x4b, 0x87, 0x4b, 0xaf, 0x36, 0x3a, 0x6d, 0xd7,
	0x3a, 0xb7, 0xa6, 0x74, 0xaa, 0x62, 0x31, 0x3c, 0xcd, 0x1f, 0xbc, 0x3a, 0x05, 0xf7, 0x22, 0x76,
	0x1f, 0x36, 0xa7, 0x40, 0x5f, 0x64, 0xa3, 0x91, 0xf3, 0xc3, 0x2a, 0xc2, 0xeb, 0xde, 0xfa, 0x24,
	0xa4, 0x8f, 0x2f, 0x99, 0x07, 0xbb, 0xe1, 0x53, 0x94, 0x0b, 0x51, 0x2d, 0xd6, 0x69, 0x1c, 0xe6,
	0xe1, 0x23, 0xfc, 0xf7, 0xc0, 0x79, 0xa9, 0x52, 0xed, 0x95, 0x22, 0xb4, 0x17, 0x7d, 0x9a, 0x03,
	0xd9, 0xfb, 0x70, 0x70, 0x05, 0x27, 0x19, 0xf9, 0x91, 0x8c, 0xec, 0x2d, 0x44, 0x1b, 0x57, 0xef,
	0x42, 0xc3, 0xc8, 0x59, 0x27, 0xcb, 0x95, 0x4e, 0xc0, 0xbc, 0x23, 0xf9, 0xd7, 0xa0, 0x39, 0x03,
	0x26, 0xc9, 0x9f, 0x48, 0x72, 0xf3, 0x32, 0xec, 0xfa, 0xec, 0x3b, 0xce, 0xcb, 0x2f, 0x96, 0x7d,
	0xe7, 0xea, 0xec, 0x3b, 0x64, 0xe5, 0xe7, 0x6b, 0xb2, 0xef, 0xcc, 0x67, 0xdf, 0x71, 0x6a, 0xb7,
	0xc8, 0xbe, 0x53, 0xcc, 0xde, 0x4a, 0xfe, 0x52, 0xce, 0x9e, 0x74, 0x4e, 0x61, 0x2f, 0xa1, 0x4a,
	0x27, 0x2f, 0x7e, 0x18, 0xa4, 0x7c, 0x28, 0xd5, 0x45, 0x5e, 0x6b, 0x2b, 0x46, 0x75, 0xbf, 0xa4,
	0x1a, 0x0b, 0x8c, 0xe0, 0x8a, 0x64, 0x5b, 0x84, 0xee, 0x1a, 0x70, 0xd7, 0x62, 0xb1, 0xf4, 0xba,
	0x70, 0xf7, 0x4a, 0x5e, 0x32, 0xf4, 0x2b, 0x19, 0x6a, 0x2f, 0x26, 0x30, 0xe6, 0x3e, 0x87, 0x5d,
	0x3c, 0xc1, 0xd9, 0x28, 0xf5, 0x63, 0xe1, 0x9b, 0x23, 0x36, 0x59, 0x47, 0x67, 0x75, 0xa1, 0xb5,
	0x27, 0x52, 0x8e, 0x78, 0x20, 0xc8, 0xda, 0x36, 0x61, 0x7b, 0xe2, 0xa3, 0x1c, 0x49, 0x8b, 0xcb,
	0x1e, 0xc3, 0xc1, 0x15, 0x94, 0xe4, 0xea, 0x37, 0x72, 0xb5, 0xbb, 0x00, 0x6b, 0x2c, 0x85, 0x70,
	0x48, 0x4b, 0x1b, 0x47, 0xda, 0xc7, 0x73, 0xeb, 0x27, 0x8a, 0x47, 0xfc, 0x0c, 0xcf, 0x72, 0x64,
	0x33, 0xd5, 0x4e, 0xbd, 0xda, 0xdb, 0x81, 0x79, 0xd9, 0x8b, 0xf4, 0xc7, 0x52, 0x0d, 0xa6, 0x0c,
	0xb4, 0x08, 0x9a, 0x0d, 0xe0, 0x7e, 0x95, 0x08, 0xb9, 0xfd, 0x9d, 0xdc, 0x1e, 0x5e, 0xc7, 0x66,
	0x6c, 0x7f, 0x02, 0x77, 0x86, 0x5c, 0x70, 0x85, 0xeb, 0xeb, 0x27, 0x81, 0xd6, 0xe7, 0x52, 0x45,
	0xce, 0x5a, 0xb5, 0xcf, 0xe6, 0x04, 0x35, 0xb0, 0x20, 0xf6, 0x26, 0xb4, 0xe6, 0x98, 0xc8, 0xcc,
	0x1f, 0x64, 0x66, 0xa7, 0x0c, 0x31, 0x06, 0x4e, 0x60, 0xfa, 0xde, 0x0f, 0x33, 0x14, 0x1c, 0x73,
	0xe5, 0x0b, 0xe9, 0x40, 0xb5, 0x07, 0x36, 0x01, 0x76, 0x2d, 0xae, 0x2f, 0xd9, 0x3b, 0xb0, 0xb7,
	0x88, 0x8e, 0x8c, 0xfc, 0x49, 0x46, 0x5a, 0xf3, 0x38, 0x63, 0xa5, 0x0b, 0x5b, 0x61, 0x20, 0x42,
	0x3e, 0xf2, 0xa5, 0x2d, 0x01, 0xa7, 0x51, 0xed, 0x62, 0x83, 0x30, 0x9f, 0x51, 0x45, 0xb0, 0xd7,
	0x61, 0xa7, 0x44, 0x42, 0xda, 0x7f, 0x91, 0xf6, 0x9d, 0x42, 0xb4, 0xdd, 0x02, 0xa6, 0x79, 0x82,
	0x5b, 0x92, 0xe6, 0x35, 0x27, 0x4c, 0xcd, 0x69, 0x67, 0xbd, 0xf2, 0x60, 0x37, 0xa7, 0xa8, 0x9e,
	0xc8, 0xcb, 0x50, 0xb3, 0x47, 0xb0, 0x3b, 0xcf, 0x44, 0xf2, 0x7f, 0xdb, 0x3d, 0x28, 0x63, 0xec,
	0x71, 0x6a, 0x65, 0x49, 0x94, 0x2f, 0xd9, 0xb3, 0x58, 0xc7, 0x39, 0x98, 0xce, 0x9e, 0x76, 0x36,
	0xaa, 0xf3, 0xdf, 0x21, 0xe8, 0x29, 0x21, 0xa9, 0x3b, 0x6a, 0x3c, 0x4e, 0xfb, 0x8b, 0x29, 0xc9,
	0xce, 0x3f, 0x64, 0xc7, 0x59, 0x84, 0x35, 0x96, 0x3e, 0x80, 0x4d, 0x7b, 0x4d, 0xa4, 0x17, 0x89,
	0xe9, 0x6f, 0x9b, 0xd5, 0x77, 0xce, 0x3a, 0x41, 0xbe, 0x40, 0x04, 0xde, 0x34, 0x2e, 0x6c, 0x17,
	0x29, 0x48, 0xfa, 0x5f, 0x92, 0x6e, 0xce, 0xc6, 0x1a, 0xc9, 0x87, 0xb0, 0x1a, 0xca, 0x4c, 0xa4,
	0xea, 0xc2, 0xd9, 0xaa, 0x5c, 0xfc, 0x49, 0x28, 0x3b, 0x82, 0x75, 0xfb, 0x97, 0xe8, 0xff, 0x23,
	0xfa, 0x86, 0x7d, 0x99, 0x33, 0x1f, 0x7d, 0x5f, 0x83, 0xba, 0xc7, 0x75, 0x82, 0xc9, 0x71, 0x2c,
	0x90, 0x1a, 0xd5, 0x56, 0xa9, 0x61, 0xdb, 0x51, 0x83, 0x06, 0x06, 0x53, 0x1d, 0x1e, 0x05, 0xb2,
	0x2f, 0xa1, 0x99, 0x8f, 0x03, 0xfe, 0xcc, 0x3c, 0x80, 0xfd, 0x77, 0x19, 0xc1, 0x6e, 0x09, 0x5c,
	0x9e, 0x1a, 0x4e, 0xf0, 0xb9, 0x77, 0xf9, 0xec, 0x6d, 0x8d, 0x8b, 0x2f, 0xd8, 0xdb, 0xb0, 0x6a,
	0xc7, 0x10, 0xec, 0xa3, 0x39, 0xe3, 0xdd, 0x39, 0x46, 0x1a, 0x52, 0x4e, 0xe8, 0xd7, 0x9b, 0x84,
	0xe3, 0x61, 0x59, 0x56, 0xf2, 0x1c, 0x3b, 0x61, 0x8e, 0x7a, 0xe0, 0xde, 0x60, 0x5e, 0x72, 0x27,
	0x4b, 0xe0, 0x7a, 0xf2, 0xdc, 0xcb, 0xd1, 0x28, 0xbf, 0x66, 0xb7, 0x08, 0x37, 0x98, 0x57, 0x6f,
	0x70, 0x9d, 0xa2, 0x71, 0x73, 0x1f, 0xc3, 0x46, 0xf1, 0xde, 0x3f, 0xab, 0xdc, 0xb2, 0x06, 0x9f,
	0xb9, 0xee, 0x1f, 0x41, 0x7d, 0x7a, 0xdd, 0x0d, 0xab, 0x27, 0xa7, 0x49, 0x6c, 0xde, 0x7e, 0x67,
	0x6f, 0xa9, 0xa7, 0xd5, 0xed, 0x37, 0x9c, 0x5e, 0x32, 0xed, 0xe7, 0x4b, 0xb0, 0x8c, 0xb9, 0xb3,
	0x16, 0xac, 0x60, 0xf6, 0x79, 0xce, 0xdf, 0xf4, 0x91, 0xa0, 0xe6, 0xd5, 0xf0, 0x11, 0x93, 0x3a,
	0x05, 0xa7, 0xd0, 0x1b, 0x67, 0x86, 0x04, 0xe7, 0xdb, 0xfe, 0x2d, 0x7b, 0xee, 0xe5, 0xf0, 0xc0,
	0xde, 0x83, 0x86, 0xed, 0x6d, 0xa1, 0x8c, 0xb8, 0xf3, 0xdd, 0x0d, 0xa8, 0x80, 0x00, 0x5d, 0x8c,
	0xff, 0xf0, 0x04, 0xf6, 0x63, 0x59, 0xde, 0xe1, 0xe9, 0x1c, 0xfd, 0x95, 0x7b, 0xbb, 0x09, 0xfb,
	0xc9, 0x8a, 0x99, 0x65, 0xdf, 0xf8, 0x3f, 0x00, 0x00, 0xff, 0xff, 0xc7, 0xdd, 0xfb, 0x41, 0x9a,
	0x0b, 0x00, 0x00,
}
