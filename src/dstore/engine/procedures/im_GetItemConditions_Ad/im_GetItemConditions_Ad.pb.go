// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/im_GetItemConditions_Ad.proto
// DO NOT EDIT!

/*
Package im_GetItemConditions_Ad is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/im_GetItemConditions_Ad.proto

It has these top-level messages:
	Parameters
	Response
*/
package im_GetItemConditions_Ad

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "dstore/values"
import dstore_engine_error "dstore/engine/error"
import dstore_engine_message "dstore/engine/message"
import dstore_engine_metainformation "dstore/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	ConditionId                  *dstore_values.IntegerValue `protobuf:"bytes,1,opt,name=condition_id,json=conditionId" json:"condition_id,omitempty"`
	ConditionIdNull              bool                        `protobuf:"varint,1001,opt,name=condition_id_null,json=conditionIdNull" json:"condition_id_null,omitempty"`
	ConditionDescriptionLike     *dstore_values.StringValue  `protobuf:"bytes,2,opt,name=condition_description_like,json=conditionDescriptionLike" json:"condition_description_like,omitempty"`
	ConditionDescriptionLikeNull bool                        `protobuf:"varint,1002,opt,name=condition_description_like_null,json=conditionDescriptionLikeNull" json:"condition_description_like_null,omitempty"`
	GetUnusedConditions          *dstore_values.BooleanValue `protobuf:"bytes,3,opt,name=get_unused_conditions,json=getUnusedConditions" json:"get_unused_conditions,omitempty"`
	GetUnusedConditionsNull      bool                        `protobuf:"varint,1003,opt,name=get_unused_conditions_null,json=getUnusedConditionsNull" json:"get_unused_conditions_null,omitempty"`
	OrderBy                      *dstore_values.IntegerValue `protobuf:"bytes,4,opt,name=order_by,json=orderBy" json:"order_by,omitempty"`
	OrderByNull                  bool                        `protobuf:"varint,1004,opt,name=order_by_null,json=orderByNull" json:"order_by_null,omitempty"`
	RowCount                     *dstore_values.IntegerValue `protobuf:"bytes,5,opt,name=row_count,json=rowCount" json:"row_count,omitempty"`
	RowCountNull                 bool                        `protobuf:"varint,1005,opt,name=row_count_null,json=rowCountNull" json:"row_count_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetConditionId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ConditionId
	}
	return nil
}

func (m *Parameters) GetConditionDescriptionLike() *dstore_values.StringValue {
	if m != nil {
		return m.ConditionDescriptionLike
	}
	return nil
}

func (m *Parameters) GetGetUnusedConditions() *dstore_values.BooleanValue {
	if m != nil {
		return m.GetUnusedConditions
	}
	return nil
}

func (m *Parameters) GetOrderBy() *dstore_values.IntegerValue {
	if m != nil {
		return m.OrderBy
	}
	return nil
}

func (m *Parameters) GetRowCount() *dstore_values.IntegerValue {
	if m != nil {
		return m.RowCount
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId                          int32                         `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	ConditionDescription           *dstore_values.StringValue    `protobuf:"bytes,10001,opt,name=condition_description,json=conditionDescription" json:"condition_description,omitempty"`
	Operator1                      *dstore_values.StringValue    `protobuf:"bytes,10002,opt,name=operator1" json:"operator1,omitempty"`
	Condition1                     *dstore_values.StringValue    `protobuf:"bytes,10003,opt,name=condition1" json:"condition1,omitempty"`
	Condition2                     *dstore_values.StringValue    `protobuf:"bytes,10004,opt,name=condition2" json:"condition2,omitempty"`
	Operator2                      *dstore_values.StringValue    `protobuf:"bytes,10005,opt,name=operator2" json:"operator2,omitempty"`
	ConditionGroupDescription      *dstore_values.StringValue    `protobuf:"bytes,10006,opt,name=condition_group_description,json=conditionGroupDescription" json:"condition_group_description,omitempty"`
	CombinePartsWithANDOperator    *dstore_values.BooleanValue   `protobuf:"bytes,10007,opt,name=combine_parts_with_a_n_d_operator,json=combinePartsWithANDOperator" json:"combine_parts_with_a_n_d_operator,omitempty"`
	RecursiveEvaluation            *dstore_values.IntegerValue   `protobuf:"bytes,10008,opt,name=recursive_evaluation,json=recursiveEvaluation" json:"recursive_evaluation,omitempty"`
	ConditionPartId                *dstore_values.IntegerValue   `protobuf:"bytes,10009,opt,name=condition_part_id,json=conditionPartId" json:"condition_part_id,omitempty"`
	DomainTreeNodeIds              *dstore_values.StringValue    `protobuf:"bytes,10010,opt,name=domain_tree_node_ids,json=domainTreeNodeIds" json:"domain_tree_node_ids,omitempty"`
	NodeCharacteristicId           *dstore_values.IntegerValue   `protobuf:"bytes,10011,opt,name=node_characteristic_id,json=nodeCharacteristicId" json:"node_characteristic_id,omitempty"`
	CreatedAtDateAndTime           *dstore_values.TimestampValue `protobuf:"bytes,10012,opt,name=created_at_date_and_time,json=createdAtDateAndTime" json:"created_at_date_and_time,omitempty"`
	CombineGroupsWithANDOperator   *dstore_values.BooleanValue   `protobuf:"bytes,10013,opt,name=combine_groups_with_a_n_d_operator,json=combineGroupsWithANDOperator" json:"combine_groups_with_a_n_d_operator,omitempty"`
	UsedAsCampaignBenefitCondition *dstore_values.BooleanValue   `protobuf:"bytes,10014,opt,name=used_as_campaign_benefit_condition,json=usedAsCampaignBenefitCondition" json:"used_as_campaign_benefit_condition,omitempty"`
	ConditionGroupId               *dstore_values.IntegerValue   `protobuf:"bytes,10015,opt,name=condition_group_id,json=conditionGroupId" json:"condition_group_id,omitempty"`
	LevelIds                       *dstore_values.StringValue    `protobuf:"bytes,10016,opt,name=level_ids,json=levelIds" json:"level_ids,omitempty"`
	EditedAtDateAndTime            *dstore_values.TimestampValue `protobuf:"bytes,10017,opt,name=edited_at_date_and_time,json=editedAtDateAndTime" json:"edited_at_date_and_time,omitempty"`
	UsedAsCampaignCondition        *dstore_values.BooleanValue   `protobuf:"bytes,10018,opt,name=used_as_campaign_condition,json=usedAsCampaignCondition" json:"used_as_campaign_condition,omitempty"`
	GroupSortNo                    *dstore_values.IntegerValue   `protobuf:"bytes,10019,opt,name=group_sort_no,json=groupSortNo" json:"group_sort_no,omitempty"`
	PartSortNo                     *dstore_values.IntegerValue   `protobuf:"bytes,10020,opt,name=part_sort_no,json=partSortNo" json:"part_sort_no,omitempty"`
	IsValid                        *dstore_values.IntegerValue   `protobuf:"bytes,10021,opt,name=is_valid,json=isValid" json:"is_valid,omitempty"`
	ConditionPartDescription       *dstore_values.StringValue    `protobuf:"bytes,10022,opt,name=condition_part_description,json=conditionPartDescription" json:"condition_part_description,omitempty"`
	InheritDepth                   *dstore_values.IntegerValue   `protobuf:"bytes,10023,opt,name=inherit_depth,json=inheritDepth" json:"inherit_depth,omitempty"`
	ConditionId                    *dstore_values.IntegerValue   `protobuf:"bytes,20006,opt,name=condition_id,json=conditionId" json:"condition_id,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetConditionDescription() *dstore_values.StringValue {
	if m != nil {
		return m.ConditionDescription
	}
	return nil
}

func (m *Response_Row) GetOperator1() *dstore_values.StringValue {
	if m != nil {
		return m.Operator1
	}
	return nil
}

func (m *Response_Row) GetCondition1() *dstore_values.StringValue {
	if m != nil {
		return m.Condition1
	}
	return nil
}

func (m *Response_Row) GetCondition2() *dstore_values.StringValue {
	if m != nil {
		return m.Condition2
	}
	return nil
}

func (m *Response_Row) GetOperator2() *dstore_values.StringValue {
	if m != nil {
		return m.Operator2
	}
	return nil
}

func (m *Response_Row) GetConditionGroupDescription() *dstore_values.StringValue {
	if m != nil {
		return m.ConditionGroupDescription
	}
	return nil
}

func (m *Response_Row) GetCombinePartsWithANDOperator() *dstore_values.BooleanValue {
	if m != nil {
		return m.CombinePartsWithANDOperator
	}
	return nil
}

func (m *Response_Row) GetRecursiveEvaluation() *dstore_values.IntegerValue {
	if m != nil {
		return m.RecursiveEvaluation
	}
	return nil
}

func (m *Response_Row) GetConditionPartId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ConditionPartId
	}
	return nil
}

func (m *Response_Row) GetDomainTreeNodeIds() *dstore_values.StringValue {
	if m != nil {
		return m.DomainTreeNodeIds
	}
	return nil
}

func (m *Response_Row) GetNodeCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeCharacteristicId
	}
	return nil
}

func (m *Response_Row) GetCreatedAtDateAndTime() *dstore_values.TimestampValue {
	if m != nil {
		return m.CreatedAtDateAndTime
	}
	return nil
}

func (m *Response_Row) GetCombineGroupsWithANDOperator() *dstore_values.BooleanValue {
	if m != nil {
		return m.CombineGroupsWithANDOperator
	}
	return nil
}

func (m *Response_Row) GetUsedAsCampaignBenefitCondition() *dstore_values.BooleanValue {
	if m != nil {
		return m.UsedAsCampaignBenefitCondition
	}
	return nil
}

func (m *Response_Row) GetConditionGroupId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ConditionGroupId
	}
	return nil
}

func (m *Response_Row) GetLevelIds() *dstore_values.StringValue {
	if m != nil {
		return m.LevelIds
	}
	return nil
}

func (m *Response_Row) GetEditedAtDateAndTime() *dstore_values.TimestampValue {
	if m != nil {
		return m.EditedAtDateAndTime
	}
	return nil
}

func (m *Response_Row) GetUsedAsCampaignCondition() *dstore_values.BooleanValue {
	if m != nil {
		return m.UsedAsCampaignCondition
	}
	return nil
}

func (m *Response_Row) GetGroupSortNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.GroupSortNo
	}
	return nil
}

func (m *Response_Row) GetPartSortNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.PartSortNo
	}
	return nil
}

func (m *Response_Row) GetIsValid() *dstore_values.IntegerValue {
	if m != nil {
		return m.IsValid
	}
	return nil
}

func (m *Response_Row) GetConditionPartDescription() *dstore_values.StringValue {
	if m != nil {
		return m.ConditionPartDescription
	}
	return nil
}

func (m *Response_Row) GetInheritDepth() *dstore_values.IntegerValue {
	if m != nil {
		return m.InheritDepth
	}
	return nil
}

func (m *Response_Row) GetConditionId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ConditionId
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.im_GetItemConditions_Ad.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.im_GetItemConditions_Ad.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.im_GetItemConditions_Ad.Response.Row")
}

var fileDescriptor0 = []byte{
	// 1052 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x56, 0x5b, 0x6f, 0x1b, 0x45,
	0x1b, 0x56, 0xbf, 0x34, 0x8d, 0xfb, 0x26, 0x69, 0xd3, 0x49, 0xda, 0x4c, 0x9d, 0x7e, 0x05, 0x52,
	0x55, 0x42, 0x42, 0x72, 0xda, 0x54, 0x2a, 0x20, 0x10, 0xc2, 0x39, 0x50, 0x82, 0x5a, 0x27, 0x5a,
	0x42, 0xa0, 0x70, 0x31, 0x5a, 0xef, 0x4e, 0xec, 0x11, 0xf6, 0x8e, 0x35, 0x33, 0x4e, 0xd4, 0x7f,
	0xc1, 0xf9, 0x58, 0xce, 0x50, 0x7e, 0x14, 0x7f, 0x80, 0xe3, 0x2d, 0xd7, 0xbc, 0xb3, 0xb3, 0xde,
	0xf5, 0x3a, 0x8e, 0x76, 0x7d, 0x63, 0x7b, 0x3d, 0xef, 0xf3, 0xcc, 0xb3, 0xcf, 0x7b, 0x98, 0x81,
	0xbb, 0xa1, 0x36, 0x52, 0xf1, 0x35, 0x1e, 0xb5, 0x44, 0xc4, 0xd7, 0x7a, 0x4a, 0x06, 0x3c, 0xec,
	0x2b, 0xae, 0xd7, 0x44, 0x97, 0xdd, 0xe3, 0x66, 0xc7, 0xf0, 0xee, 0xa6, 0x8c, 0x42, 0x61, 0x84,
	0x8c, 0x34, 0xab, 0x87, 0x35, 0x0c, 0x31, 0x92, 0xdc, 0x74, 0xb8, 0x9a, 0xc3, 0xd5, 0x4e, 0x09,
	0xae, 0x2e, 0x26, 0xf4, 0x47, 0x7e, 0xa7, 0xcf, 0xb5, 0xc3, 0x56, 0xaf, 0xe6, 0xf7, 0xe4, 0x4a,
	0x49, 0x95, 0x2c, 0xad, 0xe4, 0x97, 0xba, 0x5c, 0x6b, 0xbf, 0xc5, 0x93, 0xc5, 0x1b, 0xa3, 0x8b,
	0xc6, 0x17, 0xd1, 0xa1, 0x54, 0x5d, 0xdf, 0xee, 0xe7, 0x82, 0x56, 0x7f, 0x3f, 0x0b, 0xb0, 0xe7,
	0x2b, 0x1f, 0x57, 0xb9, 0xd2, 0xe4, 0x15, 0x98, 0x0b, 0x06, 0x8a, 0x98, 0x08, 0xe9, 0x99, 0xa7,
	0xcf, 0x3c, 0x3b, 0xbb, 0xbe, 0x52, 0x4b, 0xe4, 0x27, 0xba, 0x44, 0x64, 0x78, 0x8b, 0xab, 0x03,
	0xfb, 0xe4, 0xcd, 0xa6, 0x80, 0x9d, 0x90, 0x3c, 0x07, 0x97, 0x86, 0xf1, 0x2c, 0xea, 0x77, 0x3a,
	0xf4, 0x8f, 0x19, 0x64, 0xa9, 0x78, 0x17, 0x87, 0x02, 0x1b, 0xf8, 0x3f, 0x79, 0x07, 0xaa, 0x59,
	0x70, 0xc8, 0x75, 0xa0, 0x44, 0x2f, 0xfe, 0xdd, 0x11, 0xef, 0x73, 0xfa, 0xbf, 0x78, 0xeb, 0xea,
	0xc8, 0xd6, 0xda, 0x28, 0x11, 0xb5, 0xdc, 0xce, 0x34, 0x45, 0x6f, 0x65, 0xe0, 0xfb, 0x88, 0x25,
	0xaf, 0xc1, 0x53, 0xa7, 0x33, 0x3b, 0x51, 0x7f, 0x3a, 0x51, 0xd7, 0x4e, 0xe3, 0x88, 0x15, 0xee,
	0xc2, 0xe5, 0x16, 0x37, 0xac, 0x1f, 0xf5, 0x35, 0x0f, 0x59, 0x1a, 0xaa, 0xe9, 0xd4, 0x58, 0x5f,
	0x9a, 0x52, 0x76, 0xb8, 0x1f, 0x39, 0x75, 0x8b, 0x88, 0x7c, 0x2b, 0x06, 0x66, 0x39, 0x26, 0x2f,
	0x43, 0x75, 0x2c, 0xa1, 0xd3, 0xf4, 0x97, 0xd3, 0xb4, 0x3c, 0x06, 0x19, 0xcb, 0xb9, 0x0b, 0x15,
	0xa9, 0x42, 0xae, 0x58, 0xf3, 0x11, 0x3d, 0x5b, 0x9c, 0x99, 0x99, 0x38, 0x78, 0xe3, 0x11, 0xb9,
	0x01, 0xf3, 0x03, 0x9c, 0xdb, 0xe8, 0x6f, 0xb7, 0xd1, 0x6c, 0x12, 0x10, 0x93, 0xbf, 0x00, 0xe7,
	0x95, 0x3c, 0x46, 0x4d, 0xfd, 0xc8, 0xd0, 0xe9, 0x62, 0xf6, 0x0a, 0x46, 0x6f, 0xda, 0x60, 0x72,
	0x13, 0x2e, 0xa4, 0x48, 0xc7, 0xff, 0x8f, 0xe3, 0x9f, 0x1b, 0x84, 0xd8, 0x0d, 0x56, 0xff, 0x5d,
	0x80, 0x8a, 0xc7, 0x75, 0x0f, 0xdf, 0x86, 0x93, 0x5b, 0x30, 0x1d, 0x17, 0x72, 0x52, 0x61, 0x69,
	0x9a, 0x93, 0x06, 0x71, 0x45, 0xbe, 0x6d, 0x3f, 0x3d, 0x17, 0x48, 0x1e, 0xc2, 0x82, 0x2d, 0x61,
	0x36, 0x54, 0xc3, 0x58, 0x23, 0x53, 0x08, 0xae, 0x8d, 0x80, 0x47, 0x2b, 0xfd, 0x01, 0x3e, 0xef,
	0x64, 0xcf, 0xde, 0xc5, 0x6e, 0xfe, 0x0f, 0x7c, 0xf5, 0x99, 0xa4, 0x75, 0x30, 0xb1, 0x96, 0xf1,
	0xfa, 0x09, 0x46, 0xd7, 0x58, 0x0f, 0xdc, 0xb7, 0x37, 0x08, 0x27, 0xdb, 0x30, 0x85, 0xef, 0x88,
	0xc9, 0xb0, 0xa8, 0x3b, 0xb5, 0x52, 0x5d, 0x5e, 0x1b, 0x98, 0x50, 0xf3, 0xe4, 0xb1, 0x67, 0xf1,
	0xd5, 0xdf, 0x2e, 0xc0, 0x14, 0x3e, 0x90, 0x2b, 0x70, 0xce, 0x3a, 0x89, 0x8d, 0xf7, 0x41, 0x03,
	0x7d, 0x99, 0xf6, 0xa6, 0xf1, 0x11, 0xdb, 0x6a, 0x0f, 0x2e, 0x8f, 0xad, 0x67, 0xfa, 0x61, 0xa3,
	0xb0, 0x4b, 0x96, 0xc6, 0x55, 0x38, 0x79, 0x11, 0xce, 0xcb, 0x1e, 0x57, 0x3e, 0xa2, 0x6e, 0xd3,
	0x8f, 0x8a, 0x59, 0xb2, 0x68, 0xf2, 0x12, 0x40, 0x4a, 0x79, 0x9b, 0x7e, 0x5c, 0x8c, 0x1d, 0x0a,
	0xcf, 0x81, 0xd7, 0xe9, 0x27, 0x93, 0x80, 0xd7, 0x87, 0x45, 0xaf, 0xd3, 0x4f, 0x27, 0x10, 0xbd,
	0x4e, 0xde, 0x83, 0x95, 0xcc, 0xc1, 0x96, 0x92, 0xfd, 0x5e, 0xce, 0xc7, 0xcf, 0x8a, 0xc9, 0xae,
	0xa6, 0xf8, 0x7b, 0x16, 0x3e, 0x6c, 0x66, 0x08, 0xcf, 0x04, 0xb2, 0xdb, 0xc4, 0x9c, 0xb3, 0x9e,
	0xaf, 0x8c, 0x66, 0xc7, 0xc2, 0xb4, 0x99, 0xcf, 0x30, 0x57, 0x6c, 0x20, 0x81, 0x7e, 0xde, 0x28,
	0x9e, 0x19, 0x2b, 0x09, 0xcd, 0x9e, 0x65, 0x79, 0x1b, 0x49, 0xea, 0x8d, 0xad, 0xdd, 0x84, 0x00,
	0x87, 0xd1, 0x92, 0xe2, 0x41, 0x5f, 0x69, 0x71, 0xc4, 0x19, 0xb7, 0x70, 0xd7, 0x04, 0x5f, 0x34,
	0x8a, 0x9b, 0x75, 0x31, 0x45, 0x6e, 0xa7, 0x40, 0xf2, 0xfa, 0xf0, 0xb0, 0xb6, 0xc2, 0x6d, 0xe1,
	0x7d, 0x59, 0x82, 0x2d, 0x9b, 0xe4, 0x56, 0x28, 0xd6, 0xe7, 0x7d, 0x58, 0x0a, 0x65, 0x17, 0x9b,
	0x8e, 0x19, 0xc5, 0x71, 0xc0, 0xca, 0x90, 0x23, 0x97, 0xa6, 0x5f, 0x15, 0xdb, 0x7a, 0xc9, 0x01,
	0xf7, 0x11, 0xd7, 0x40, 0xd8, 0x4e, 0xa8, 0x89, 0x07, 0x57, 0x62, 0x86, 0xa0, 0x8d, 0x07, 0x53,
	0x80, 0xe7, 0x92, 0xd0, 0x46, 0x04, 0x56, 0xdc, 0xd7, 0x25, 0xc4, 0x2d, 0x59, 0xec, 0x66, 0x0e,
	0x8a, 0x0a, 0x0f, 0x80, 0x06, 0x8a, 0xfb, 0x06, 0xa7, 0xae, 0x6f, 0x58, 0x88, 0x3f, 0x98, 0x1f,
	0x85, 0xcc, 0x88, 0x2e, 0xa7, 0x8f, 0x1d, 0xeb, 0xff, 0x47, 0x58, 0xed, 0x9a, 0x36, 0x7e, 0xb7,
	0x37, 0xe8, 0x23, 0x87, 0xaf, 0x9b, 0x2d, 0xfc, 0xaa, 0x47, 0xe1, 0x3e, 0xae, 0x93, 0x43, 0x58,
	0x1d, 0xa4, 0x3e, 0xae, 0xaa, 0xf1, 0xb9, 0xff, 0xa6, 0x44, 0xee, 0xaf, 0x25, 0x3c, 0x71, 0x75,
	0x9d, 0x48, 0x7e, 0x1b, 0x56, 0xe3, 0x23, 0xc3, 0xd7, 0x2c, 0x40, 0x49, 0xbe, 0x68, 0x45, 0xac,
	0xc9, 0x23, 0x7e, 0x28, 0x4c, 0x76, 0x8c, 0xd0, 0x6f, 0x4b, 0xec, 0x73, 0xdd, 0xf2, 0xd4, 0xf5,
	0x66, 0xc2, 0xb2, 0xe1, 0x48, 0xd2, 0x09, 0x45, 0xde, 0x00, 0x32, 0xda, 0x29, 0xe8, 0xfc, 0x77,
	0x25, 0x9c, 0x5f, 0xc8, 0x77, 0x08, 0xba, 0x8e, 0x67, 0x4a, 0x87, 0x1f, 0xf1, 0x4e, 0x5c, 0x0c,
	0xdf, 0x17, 0x17, 0x43, 0x25, 0x8e, 0xb6, 0x35, 0xb0, 0x0f, 0xcb, 0x1c, 0xb9, 0xc6, 0xa5, 0xeb,
	0x87, 0x52, 0xe9, 0x5a, 0x74, 0xf0, 0x7c, 0xb6, 0x1e, 0x42, 0xf5, 0x84, 0x8b, 0x99, 0x7b, 0x3f,
	0x96, 0x70, 0x6f, 0x39, 0xef, 0x5e, 0x66, 0xdb, 0xab, 0x30, 0xef, 0xcc, 0xd2, 0x12, 0x1b, 0x29,
	0x92, 0xf4, 0xa7, 0x12, 0x8e, 0xcd, 0xc6, 0x90, 0x37, 0x11, 0xd1, 0x90, 0xf6, 0xee, 0x15, 0x37,
	0xe1, 0x80, 0xe0, 0xe7, 0x12, 0x04, 0x60, 0x11, 0x09, 0xfe, 0x79, 0xa8, 0x08, 0xcd, 0x30, 0x0a,
	0xd3, 0xf5, 0x4b, 0x09, 0xec, 0x8c, 0xd0, 0x07, 0x36, 0xd8, 0xba, 0x32, 0x32, 0x07, 0x86, 0x47,
	0xe3, 0x93, 0xc6, 0x04, 0x17, 0x31, 0x3b, 0x0f, 0x86, 0x27, 0x63, 0x1d, 0xe6, 0x45, 0xd4, 0xc6,
	0x36, 0xb4, 0x9c, 0x3d, 0xd3, 0xa6, 0xbf, 0x96, 0x10, 0x36, 0x97, 0x40, 0xb6, 0x2c, 0x02, 0x8d,
	0xcd, 0x5f, 0x49, 0x9f, 0x3c, 0x9e, 0xf0, 0x52, 0xba, 0xb1, 0x0b, 0x2b, 0x42, 0x8e, 0x9c, 0xcd,
	0xd9, 0xcd, 0xfd, 0xdd, 0x5b, 0x93, 0xde, 0xe9, 0x9b, 0xe7, 0xe2, 0xbb, 0xf3, 0x9d, 0xff, 0x02,
	0x00, 0x00, 0xff, 0xff, 0xf7, 0xa9, 0xe1, 0xe0, 0x0e, 0x0c, 0x00, 0x00,
}
