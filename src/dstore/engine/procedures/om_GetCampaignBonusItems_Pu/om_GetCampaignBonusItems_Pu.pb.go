// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/om_GetCampaignBonusItems_Pu.proto
// DO NOT EDIT!

/*
Package om_GetCampaignBonusItems_Pu is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/om_GetCampaignBonusItems_Pu.proto

It has these top-level messages:
	Parameters
	Response
*/
package om_GetCampaignBonusItems_Pu

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "dstore/values"
import dstore_engine_error "dstore/engine/error"
import dstore_engine_message "dstore/engine/message"
import dstore_engine_metainformation "dstore/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	BenefitId                         *dstore_values.IntegerValue `protobuf:"bytes,1,opt,name=benefit_id,json=benefitId" json:"benefit_id,omitempty"`
	BenefitIdNull                     bool                        `protobuf:"varint,1001,opt,name=benefit_id_null,json=benefitIdNull" json:"benefit_id_null,omitempty"`
	OnlyDefinition                    *dstore_values.IntegerValue `protobuf:"bytes,2,opt,name=only_definition,json=onlyDefinition" json:"only_definition,omitempty"`
	OnlyDefinitionNull                bool                        `protobuf:"varint,1002,opt,name=only_definition_null,json=onlyDefinitionNull" json:"only_definition_null,omitempty"`
	SortByCharacteristicIdList        *dstore_values.StringValue  `protobuf:"bytes,3,opt,name=sort_by_characteristic_id_list,json=sortByCharacteristicIdList" json:"sort_by_characteristic_id_list,omitempty"`
	SortByCharacteristicIdListNull    bool                        `protobuf:"varint,1003,opt,name=sort_by_characteristic_id_list_null,json=sortByCharacteristicIdListNull" json:"sort_by_characteristic_id_list_null,omitempty"`
	SortOptionList                    *dstore_values.StringValue  `protobuf:"bytes,4,opt,name=sort_option_list,json=sortOptionList" json:"sort_option_list,omitempty"`
	SortOptionListNull                bool                        `protobuf:"varint,1004,opt,name=sort_option_list_null,json=sortOptionListNull" json:"sort_option_list_null,omitempty"`
	InheritDepthOptionList            *dstore_values.StringValue  `protobuf:"bytes,5,opt,name=inherit_depth_option_list,json=inheritDepthOptionList" json:"inherit_depth_option_list,omitempty"`
	InheritDepthOptionListNull        bool                        `protobuf:"varint,1005,opt,name=inherit_depth_option_list_null,json=inheritDepthOptionListNull" json:"inherit_depth_option_list_null,omitempty"`
	RecursiveEvaluationOptionList     *dstore_values.StringValue  `protobuf:"bytes,6,opt,name=recursive_evaluation_option_list,json=recursiveEvaluationOptionList" json:"recursive_evaluation_option_list,omitempty"`
	RecursiveEvaluationOptionListNull bool                        `protobuf:"varint,1006,opt,name=recursive_evaluation_option_list_null,json=recursiveEvaluationOptionListNull" json:"recursive_evaluation_option_list_null,omitempty"`
	GetValuesForSortByCharacs         *dstore_values.BooleanValue `protobuf:"bytes,7,opt,name=get_values_for_sort_by_characs,json=getValuesForSortByCharacs" json:"get_values_for_sort_by_characs,omitempty"`
	GetValuesForSortByCharacsNull     bool                        `protobuf:"varint,1007,opt,name=get_values_for_sort_by_characs_null,json=getValuesForSortByCharacsNull" json:"get_values_for_sort_by_characs_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetBenefitId() *dstore_values.IntegerValue {
	if m != nil {
		return m.BenefitId
	}
	return nil
}

func (m *Parameters) GetOnlyDefinition() *dstore_values.IntegerValue {
	if m != nil {
		return m.OnlyDefinition
	}
	return nil
}

func (m *Parameters) GetSortByCharacteristicIdList() *dstore_values.StringValue {
	if m != nil {
		return m.SortByCharacteristicIdList
	}
	return nil
}

func (m *Parameters) GetSortOptionList() *dstore_values.StringValue {
	if m != nil {
		return m.SortOptionList
	}
	return nil
}

func (m *Parameters) GetInheritDepthOptionList() *dstore_values.StringValue {
	if m != nil {
		return m.InheritDepthOptionList
	}
	return nil
}

func (m *Parameters) GetRecursiveEvaluationOptionList() *dstore_values.StringValue {
	if m != nil {
		return m.RecursiveEvaluationOptionList
	}
	return nil
}

func (m *Parameters) GetGetValuesForSortByCharacs() *dstore_values.BooleanValue {
	if m != nil {
		return m.GetValuesForSortByCharacs
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId                         int32                       `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	NodeDescription               *dstore_values.StringValue  `protobuf:"bytes,10001,opt,name=node_description,json=nodeDescription" json:"node_description,omitempty"`
	Value2                        *dstore_values.StringValue  `protobuf:"bytes,10002,opt,name=value2" json:"value2,omitempty"`
	Value3                        *dstore_values.StringValue  `protobuf:"bytes,10003,opt,name=value3" json:"value3,omitempty"`
	Value1                        *dstore_values.StringValue  `protobuf:"bytes,10004,opt,name=value1" json:"value1,omitempty"`
	ItemSetId                     *dstore_values.IntegerValue `protobuf:"bytes,10005,opt,name=item_set_id,json=itemSetId" json:"item_set_id,omitempty"`
	NodeId                        *dstore_values.IntegerValue `protobuf:"bytes,10006,opt,name=node_id,json=nodeId" json:"node_id,omitempty"`
	TreeNodeId                    *dstore_values.IntegerValue `protobuf:"bytes,10007,opt,name=tree_node_id,json=treeNodeId" json:"tree_node_id,omitempty"`
	BonusFromOneSetOnly           *dstore_values.BooleanValue `protobuf:"bytes,10008,opt,name=bonus_from_one_set_only,json=bonusFromOneSetOnly" json:"bonus_from_one_set_only,omitempty"`
	MaxQuantity                   *dstore_values.IntegerValue `protobuf:"bytes,10009,opt,name=max_quantity,json=maxQuantity" json:"max_quantity,omitempty"`
	ItemConditionId               *dstore_values.IntegerValue `protobuf:"bytes,20001,opt,name=item_condition_id,json=itemConditionId" json:"item_condition_id,omitempty"`
	ItemConditionDescription      *dstore_values.StringValue  `protobuf:"bytes,20005,opt,name=item_condition_description,json=itemConditionDescription" json:"item_condition_description,omitempty"`
	SortNo                        *dstore_values.IntegerValue `protobuf:"bytes,20006,opt,name=sort_no,json=sortNo" json:"sort_no,omitempty"`
	ItemGroupSortNo               *dstore_values.IntegerValue `protobuf:"bytes,30001,opt,name=item_group_sort_no,json=itemGroupSortNo" json:"item_group_sort_no,omitempty"`
	Operator1                     *dstore_values.StringValue  `protobuf:"bytes,30002,opt,name=operator1" json:"operator1,omitempty"`
	Condition1                    *dstore_values.StringValue  `protobuf:"bytes,30003,opt,name=condition1" json:"condition1,omitempty"`
	Condition2                    *dstore_values.StringValue  `protobuf:"bytes,30004,opt,name=condition2" json:"condition2,omitempty"`
	Operator2                     *dstore_values.StringValue  `protobuf:"bytes,30005,opt,name=operator2" json:"operator2,omitempty"`
	ItemConditionGroupDescription *dstore_values.StringValue  `protobuf:"bytes,30006,opt,name=item_condition_group_description,json=itemConditionGroupDescription" json:"item_condition_group_description,omitempty"`
	CombinePartsWithANDOperator   *dstore_values.BooleanValue `protobuf:"bytes,30007,opt,name=combine_parts_with_a_n_d_operator,json=combinePartsWithANDOperator" json:"combine_parts_with_a_n_d_operator,omitempty"`
	RecursiveEvaluation           *dstore_values.IntegerValue `protobuf:"bytes,30008,opt,name=recursive_evaluation,json=recursiveEvaluation" json:"recursive_evaluation,omitempty"`
	ItemPartSortNo                *dstore_values.IntegerValue `protobuf:"bytes,30009,opt,name=item_part_sort_no,json=itemPartSortNo" json:"item_part_sort_no,omitempty"`
	DomainTreeNodeIds             *dstore_values.StringValue  `protobuf:"bytes,30011,opt,name=domain_tree_node_ids,json=domainTreeNodeIds" json:"domain_tree_node_ids,omitempty"`
	NodeCharacteristicId          *dstore_values.IntegerValue `protobuf:"bytes,30012,opt,name=node_characteristic_id,json=nodeCharacteristicId" json:"node_characteristic_id,omitempty"`
	ItemConditionPartId           *dstore_values.IntegerValue `protobuf:"bytes,30013,opt,name=item_condition_part_id,json=itemConditionPartId" json:"item_condition_part_id,omitempty"`
	CombineGroupsWithANDOperator  *dstore_values.BooleanValue `protobuf:"bytes,30017,opt,name=combine_groups_with_a_n_d_operator,json=combineGroupsWithANDOperator" json:"combine_groups_with_a_n_d_operator,omitempty"`
	ItemConditionPartDescription  *dstore_values.StringValue  `protobuf:"bytes,30018,opt,name=item_condition_part_description,json=itemConditionPartDescription" json:"item_condition_part_description,omitempty"`
	LevelIds                      *dstore_values.StringValue  `protobuf:"bytes,30019,opt,name=level_ids,json=levelIds" json:"level_ids,omitempty"`
	ItemConditionGroupId          *dstore_values.IntegerValue `protobuf:"bytes,30020,opt,name=item_condition_group_id,json=itemConditionGroupId" json:"item_condition_group_id,omitempty"`
	InheritDepth                  *dstore_values.IntegerValue `protobuf:"bytes,30023,opt,name=inherit_depth,json=inheritDepth" json:"inherit_depth,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetNodeDescription() *dstore_values.StringValue {
	if m != nil {
		return m.NodeDescription
	}
	return nil
}

func (m *Response_Row) GetValue2() *dstore_values.StringValue {
	if m != nil {
		return m.Value2
	}
	return nil
}

func (m *Response_Row) GetValue3() *dstore_values.StringValue {
	if m != nil {
		return m.Value3
	}
	return nil
}

func (m *Response_Row) GetValue1() *dstore_values.StringValue {
	if m != nil {
		return m.Value1
	}
	return nil
}

func (m *Response_Row) GetItemSetId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ItemSetId
	}
	return nil
}

func (m *Response_Row) GetNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeId
	}
	return nil
}

func (m *Response_Row) GetTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.TreeNodeId
	}
	return nil
}

func (m *Response_Row) GetBonusFromOneSetOnly() *dstore_values.BooleanValue {
	if m != nil {
		return m.BonusFromOneSetOnly
	}
	return nil
}

func (m *Response_Row) GetMaxQuantity() *dstore_values.IntegerValue {
	if m != nil {
		return m.MaxQuantity
	}
	return nil
}

func (m *Response_Row) GetItemConditionId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ItemConditionId
	}
	return nil
}

func (m *Response_Row) GetItemConditionDescription() *dstore_values.StringValue {
	if m != nil {
		return m.ItemConditionDescription
	}
	return nil
}

func (m *Response_Row) GetSortNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.SortNo
	}
	return nil
}

func (m *Response_Row) GetItemGroupSortNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.ItemGroupSortNo
	}
	return nil
}

func (m *Response_Row) GetOperator1() *dstore_values.StringValue {
	if m != nil {
		return m.Operator1
	}
	return nil
}

func (m *Response_Row) GetCondition1() *dstore_values.StringValue {
	if m != nil {
		return m.Condition1
	}
	return nil
}

func (m *Response_Row) GetCondition2() *dstore_values.StringValue {
	if m != nil {
		return m.Condition2
	}
	return nil
}

func (m *Response_Row) GetOperator2() *dstore_values.StringValue {
	if m != nil {
		return m.Operator2
	}
	return nil
}

func (m *Response_Row) GetItemConditionGroupDescription() *dstore_values.StringValue {
	if m != nil {
		return m.ItemConditionGroupDescription
	}
	return nil
}

func (m *Response_Row) GetCombinePartsWithANDOperator() *dstore_values.BooleanValue {
	if m != nil {
		return m.CombinePartsWithANDOperator
	}
	return nil
}

func (m *Response_Row) GetRecursiveEvaluation() *dstore_values.IntegerValue {
	if m != nil {
		return m.RecursiveEvaluation
	}
	return nil
}

func (m *Response_Row) GetItemPartSortNo() *dstore_values.IntegerValue {
	if m != nil {
		return m.ItemPartSortNo
	}
	return nil
}

func (m *Response_Row) GetDomainTreeNodeIds() *dstore_values.StringValue {
	if m != nil {
		return m.DomainTreeNodeIds
	}
	return nil
}

func (m *Response_Row) GetNodeCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeCharacteristicId
	}
	return nil
}

func (m *Response_Row) GetItemConditionPartId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ItemConditionPartId
	}
	return nil
}

func (m *Response_Row) GetCombineGroupsWithANDOperator() *dstore_values.BooleanValue {
	if m != nil {
		return m.CombineGroupsWithANDOperator
	}
	return nil
}

func (m *Response_Row) GetItemConditionPartDescription() *dstore_values.StringValue {
	if m != nil {
		return m.ItemConditionPartDescription
	}
	return nil
}

func (m *Response_Row) GetLevelIds() *dstore_values.StringValue {
	if m != nil {
		return m.LevelIds
	}
	return nil
}

func (m *Response_Row) GetItemConditionGroupId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ItemConditionGroupId
	}
	return nil
}

func (m *Response_Row) GetInheritDepth() *dstore_values.IntegerValue {
	if m != nil {
		return m.InheritDepth
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.om_GetCampaignBonusItems_Pu.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.om_GetCampaignBonusItems_Pu.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.om_GetCampaignBonusItems_Pu.Response.Row")
}

var fileDescriptor0 = []byte{
	// 1195 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x57, 0x5b, 0x53, 0x23, 0x45,
	0x14, 0x2e, 0x44, 0x02, 0x1c, 0x58, 0x60, 0x1b, 0x64, 0x9b, 0xb0, 0x20, 0x0b, 0x65, 0xa9, 0x2f,
	0x41, 0x82, 0x57, 0xca, 0xd2, 0x12, 0x58, 0x56, 0x74, 0x09, 0x6c, 0x58, 0xb5, 0xdc, 0x07, 0xbb,
	0x26, 0x49, 0x13, 0xa6, 0x2a, 0x99, 0x8e, 0xdd, 0x13, 0x90, 0x7f, 0xe1, 0xba, 0x5e, 0xab, 0xf6,
	0xc5, 0x07, 0x7d, 0xf7, 0xae, 0xa5, 0x3e, 0x78, 0xa9, 0xf2, 0xb7, 0x88, 0xb7, 0x2a, 0x7f, 0x81,
	0xa7, 0xbb, 0x27, 0x61, 0x66, 0x08, 0xa4, 0xd7, 0x17, 0x48, 0x67, 0xce, 0xf7, 0xf5, 0x77, 0xce,
	0xf9, 0xfa, 0xf4, 0x04, 0x56, 0x2a, 0x2a, 0x14, 0x92, 0x2f, 0xf2, 0xa0, 0xea, 0x07, 0x7c, 0xb1,
	0x21, 0x45, 0x99, 0x57, 0x9a, 0x92, 0xab, 0x45, 0x51, 0x67, 0xd7, 0x78, 0xb8, 0xe6, 0xd5, 0x1b,
	0x9e, 0x5f, 0x0d, 0x56, 0x45, 0xd0, 0x54, 0x9b, 0x21, 0xaf, 0x2b, 0xb6, 0xd3, 0xcc, 0x61, 0x58,
	0x28, 0xc8, 0xa3, 0x16, 0x9b, 0xb3, 0xd8, 0xdc, 0x39, 0x80, 0xec, 0x78, 0xb4, 0xcd, 0x81, 0x57,
	0x6b, 0x72, 0x65, 0xf1, 0xd9, 0xa9, 0xe4, 0xde, 0x5c, 0x4a, 0x21, 0xa3, 0x47, 0xd3, 0xc9, 0x47,
	0x75, 0xae, 0x94, 0x57, 0xe5, 0xd1, 0xc3, 0x85, 0xf4, 0xc3, 0xd0, 0xf3, 0x83, 0x3d, 0x21, 0xeb,
	0x5e, 0xe8, 0x8b, 0xc0, 0x06, 0xcd, 0xdf, 0x19, 0x00, 0xd8, 0xf1, 0xa4, 0x87, 0x4f, 0xb9, 0x54,
	0x64, 0x05, 0xa0, 0xc4, 0x03, 0xbe, 0xe7, 0x87, 0xcc, 0xaf, 0xd0, 0x9e, 0xb9, 0x9e, 0x47, 0x86,
	0xf2, 0xd3, 0xb9, 0x28, 0x81, 0x48, 0x95, 0x1f, 0x84, 0xbc, 0xca, 0xe5, 0xab, 0x7a, 0x55, 0x1c,
	0x8c, 0xc2, 0x37, 0x2b, 0xe4, 0x61, 0x18, 0x3d, 0xc1, 0xb2, 0xa0, 0x59, 0xab, 0xd1, 0xdf, 0xfb,
	0x91, 0x61, 0xa0, 0x78, 0xa1, 0x1d, 0x54, 0xc0, 0x6f, 0xc9, 0x3a, 0x8c, 0x8a, 0xa0, 0x76, 0xc4,
	0x2a, 0xf8, 0x5d, 0xe0, 0x6b, 0x31, 0xf4, 0xbe, 0xee, 0x3b, 0x8d, 0x68, 0xcc, 0x7a, 0x1b, 0x42,
	0x96, 0x60, 0x22, 0xc5, 0x62, 0xf7, 0x3c, 0xb6, 0x7b, 0x92, 0x64, 0xb8, 0xd9, 0xf8, 0x0d, 0x98,
	0x55, 0x42, 0x86, 0xac, 0x74, 0xc4, 0xca, 0xfb, 0x98, 0x74, 0x19, 0x73, 0xf6, 0x55, 0xe8, 0x97,
	0xb5, 0xe0, 0x1a, 0x7e, 0xa2, 0xbd, 0x46, 0x47, 0x36, 0xa5, 0x43, 0x85, 0xd2, 0x0f, 0xaa, 0x56,
	0x46, 0x56, 0x33, 0xac, 0x1e, 0xad, 0x25, 0xf0, 0x9b, 0x95, 0xeb, 0xf8, 0x9f, 0x5c, 0x87, 0x85,
	0xf3, 0xf9, 0xad, 0xc2, 0x3f, 0xac, 0xc2, 0xd9, 0xb3, 0x99, 0xa2, 0x32, 0x8d, 0x19, 0x36, 0xd1,
	0x30, 0xc9, 0x19, 0x7d, 0xf7, 0x77, 0xd5, 0x37, 0xa2, 0x31, 0xdb, 0x06, 0x62, 0x34, 0xe5, 0xe1,
	0x81, 0x34, 0x8b, 0x55, 0xf1, 0x67, 0x54, 0xa7, 0x64, 0xbc, 0xd9, 0xf9, 0x15, 0x98, 0xf2, 0x83,
	0x7d, 0x54, 0x14, 0x62, 0x75, 0x1b, 0xe1, 0x7e, 0x42, 0x42, 0x5f, 0x57, 0x09, 0x93, 0x11, 0x78,
	0x5d, 0x63, 0x63, 0x52, 0xd6, 0x60, 0xf6, 0x4c, 0x5a, 0xab, 0xe9, 0x2f, 0xab, 0x29, 0xdb, 0x99,
	0xc0, 0x68, 0x2b, 0xc3, 0x9c, 0xe4, 0xe5, 0xa6, 0x54, 0xfe, 0x01, 0x67, 0x5c, 0xef, 0x6e, 0xec,
	0x9c, 0x90, 0x98, 0xe9, 0x2a, 0x71, 0xa6, 0xcd, 0x71, 0xb5, 0x4d, 0x11, 0x53, 0x7a, 0x03, 0x1e,
	0xea, 0xb6, 0x89, 0x15, 0xfc, 0xb7, 0x15, 0x7c, 0xe5, 0x5c, 0xba, 0x96, 0xf7, 0xaa, 0x3c, 0x64,
	0x56, 0x0b, 0xc3, 0x63, 0xc8, 0x92, 0x56, 0x51, 0xb4, 0xbf, 0xe3, 0x19, 0x28, 0x09, 0x51, 0xe3,
	0x5e, 0x60, 0x65, 0x4f, 0x21, 0x85, 0xf9, 0xa4, 0x36, 0x84, 0xdc, 0x8d, 0xd9, 0x47, 0x91, 0x97,
	0x61, 0xe1, 0x7c, 0x7e, 0x2b, 0xf8, 0x1f, 0x2b, 0x78, 0xe6, 0x4c, 0x22, 0x2d, 0x76, 0xfe, 0xf6,
	0x38, 0x0c, 0x14, 0xb9, 0x6a, 0x88, 0x40, 0x71, 0xf2, 0x18, 0xf4, 0x99, 0x99, 0x13, 0x8d, 0x83,
	0x76, 0x59, 0xa3, 0x79, 0x66, 0xe7, 0xd1, 0x55, 0xfd, 0xb7, 0x68, 0x03, 0xc9, 0xeb, 0x30, 0xa6,
	0xa7, 0x0d, 0x8b, 0x8d, 0x1b, 0x3c, 0xe1, 0xbd, 0x08, 0xce, 0xa5, 0xc0, 0xe9, 0xa1, 0xb4, 0x85,
	0xeb, 0xcd, 0x93, 0x75, 0x71, 0xb4, 0x9e, 0xfc, 0x82, 0x3c, 0x0d, 0xfd, 0xd1, 0x94, 0xc3, 0xb3,
	0xaa, 0x19, 0x67, 0x4f, 0x31, 0xda, 0x19, 0xb8, 0x65, 0xff, 0x17, 0x5b, 0xe1, 0x64, 0x13, 0x7a,
	0xa5, 0x38, 0xc4, 0x13, 0xa4, 0x51, 0x4f, 0xe5, 0x9c, 0x87, 0x72, 0xae, 0x55, 0x88, 0x5c, 0x51,
	0x1c, 0x16, 0x35, 0x47, 0xf6, 0xdf, 0x31, 0xe8, 0xc5, 0x05, 0x99, 0x84, 0x0c, 0x2e, 0xf5, 0xa4,
	0x7c, 0xbb, 0x80, 0xb5, 0xe9, 0x2b, 0xf6, 0xe1, 0x12, 0x27, 0xe1, 0x06, 0x8c, 0x05, 0xa2, 0xc2,
	0xd1, 0xe5, 0xaa, 0x2c, 0x7d, 0xe3, 0x03, 0x7a, 0xbb, 0xd0, 0xd5, 0x94, 0xa3, 0x1a, 0xb4, 0x7e,
	0x82, 0x21, 0xcb, 0x90, 0x31, 0x61, 0x79, 0xfa, 0x4e, 0x77, 0x74, 0x14, 0xda, 0x06, 0x2d, 0xd3,
	0x3b, 0xae, 0xa0, 0xe5, 0x36, 0x68, 0x89, 0xbe, 0xeb, 0x0a, 0x5a, 0x22, 0xcf, 0xc2, 0x90, 0x8f,
	0x45, 0x62, 0x8a, 0x9b, 0xdb, 0xe2, 0xbd, 0x82, 0xc3, 0x75, 0xa1, 0x01, 0xbb, 0x5c, 0x5f, 0x17,
	0x4f, 0x40, 0xbf, 0x29, 0x12, 0x22, 0xdf, 0x77, 0x40, 0x66, 0x74, 0x30, 0xc2, 0x9e, 0x83, 0xe1,
	0x50, 0x72, 0xce, 0x5a, 0xd8, 0x0f, 0x1c, 0xb0, 0xa0, 0x11, 0x05, 0x8b, 0x2f, 0xc2, 0xa5, 0x92,
	0x6e, 0x2f, 0xdb, 0x93, 0xd8, 0x74, 0x11, 0x70, 0x23, 0x5f, 0x5f, 0x16, 0xf4, 0xc3, 0x42, 0xf7,
	0x13, 0x38, 0x6e, 0xc0, 0x1b, 0x88, 0xdd, 0x0e, 0x38, 0x26, 0xb2, 0x8d, 0x40, 0xf2, 0x3c, 0x0c,
	0xd7, 0xbd, 0xb7, 0xd8, 0x9b, 0x4d, 0x2f, 0x08, 0xfd, 0xf0, 0x88, 0x7e, 0xe4, 0xa0, 0x69, 0x08,
	0x11, 0x37, 0x22, 0x00, 0x7a, 0xf3, 0xa2, 0xa9, 0x64, 0x59, 0x04, 0x15, 0x7b, 0x95, 0x61, 0x66,
	0x1f, 0xdf, 0x75, 0xb8, 0x7f, 0x47, 0x35, 0x6e, 0xad, 0x05, 0xc3, 0xfc, 0x6e, 0x41, 0x36, 0x45,
	0x15, 0x77, 0xe1, 0x27, 0x77, 0x7b, 0xba, 0xb6, 0x97, 0x26, 0x28, 0xe3, 0x7e, 0x7c, 0x12, 0xfa,
	0xcd, 0x50, 0x09, 0x04, 0xfd, 0xd4, 0x45, 0x5c, 0x46, 0x47, 0x17, 0x04, 0x79, 0x09, 0x88, 0xd1,
	0x54, 0x95, 0xa2, 0xd9, 0x60, 0x2d, 0x8a, 0xcf, 0x8e, 0x5d, 0xf3, 0xbb, 0xa6, 0x71, 0xbb, 0x96,
	0x6b, 0x05, 0x06, 0x45, 0x83, 0x4b, 0x0f, 0x11, 0x4b, 0xf4, 0xf3, 0xe3, 0xee, 0xe9, 0x9c, 0x84,
	0xa3, 0x61, 0xa1, 0x5d, 0x96, 0x25, 0xfa, 0x85, 0x03, 0x38, 0x16, 0x9f, 0x40, 0xe7, 0xe9, 0x97,
	0xf7, 0x84, 0xce, 0xc7, 0x75, 0xe7, 0xe9, 0x57, 0xf7, 0xa2, 0x3b, 0x4f, 0x38, 0xcc, 0xa5, 0x7a,
	0x6a, 0x2b, 0x19, 0xef, 0xec, 0xd7, 0x0e, 0x94, 0x33, 0x89, 0xce, 0x9a, 0xaa, 0xc6, 0xdb, 0xcb,
	0xe1, 0x4a, 0x59, 0xd4, 0x4b, 0x38, 0x0f, 0x59, 0xc3, 0x93, 0xa1, 0x62, 0x87, 0x3e, 0x5e, 0xd2,
	0x1e, 0x43, 0x0b, 0xb1, 0x96, 0x18, 0xfa, 0xcd, 0x19, 0x5d, 0x4b, 0x9c, 0x92, 0xe9, 0x88, 0x67,
	0x47, 0xd3, 0xbc, 0x86, 0x2c, 0x2f, 0x14, 0xd6, 0xb7, 0x23, 0x06, 0xb2, 0x03, 0x13, 0x9d, 0x2e,
	0x57, 0xfa, 0xad, 0x8b, 0x1f, 0xc6, 0x3b, 0xdc, 0xb4, 0xe4, 0xc5, 0xe8, 0xf8, 0x68, 0xd5, 0x6d,
	0x7b, 0x7d, 0xe7, 0x42, 0x37, 0xa2, 0x71, 0x5a, 0x65, 0xe4, 0xae, 0x2d, 0x98, 0xa8, 0x88, 0x3a,
	0x5e, 0x49, 0x2c, 0x3e, 0x64, 0x14, 0xfd, 0xde, 0xa1, 0xba, 0x17, 0x2d, 0xf2, 0x66, 0x7b, 0xd6,
	0x28, 0xb2, 0x0b, 0x93, 0x86, 0xe2, 0xd4, 0xdb, 0x20, 0xfd, 0xc1, 0x45, 0xdd, 0x84, 0x06, 0xa7,
	0xdf, 0x0f, 0x71, 0x82, 0x4d, 0xa6, 0xdc, 0x60, 0xf2, 0x46, 0xd2, 0x1f, 0x9d, 0x2a, 0x98, 0x30,
	0x81, 0xce, 0x1d, 0x39, 0xab, 0x30, 0xdf, 0x6a, 0xbd, 0xb1, 0x56, 0xe7, 0xde, 0xff, 0xe4, 0xd2,
	0xfb, 0xcb, 0x11, 0x91, 0xb1, 0xd7, 0xa9, 0xe6, 0x97, 0xe1, 0xc1, 0x4e, 0xe2, 0xe3, 0x4e, 0xfe,
	0xd9, 0xa1, 0xd6, 0x97, 0x4f, 0x25, 0x11, 0x37, 0xf2, 0x33, 0x30, 0x58, 0xe3, 0x07, 0xbc, 0x66,
	0x5a, 0xf7, 0x8b, 0x03, 0xdd, 0x80, 0x09, 0xd7, 0x1d, 0xbb, 0x09, 0x97, 0x3a, 0x1e, 0x35, 0xac,
	0xee, 0xaf, 0x4e, 0x2d, 0x3b, 0x7d, 0xc4, 0xb0, 0xbc, 0xab, 0x70, 0x21, 0xf1, 0xe6, 0x4b, 0x7f,
	0x73, 0xe1, 0x1a, 0x8e, 0xbf, 0x06, 0xaf, 0xee, 0xc2, 0xb4, 0x2f, 0x52, 0xaf, 0x2d, 0x27, 0xbf,
	0x43, 0x6f, 0x3d, 0xfe, 0x7f, 0x7e, 0xa1, 0x96, 0x32, 0xe6, 0x57, 0xe0, 0xf2, 0x7f, 0x01, 0x00,
	0x00, 0xff, 0xff, 0x85, 0x93, 0xe1, 0xcb, 0xe0, 0x0e, 0x00, 0x00,
}
