// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/st_GetHTreeNodeStatistics_Ad.proto
// DO NOT EDIT!

/*
Package st_GetHTreeNodeStatistics_Ad is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/st_GetHTreeNodeStatistics_Ad.proto

It has these top-level messages:
	Parameters
	Response
*/
package st_GetHTreeNodeStatistics_Ad

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "dstore/values"
import dstore_engine_error "dstore/engine/error"
import dstore_engine_message "dstore/engine/message"
import dstore_engine_metainformation "dstore/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	HTreeNodeId                    *dstore_values.IntegerValue   `protobuf:"bytes,1,opt,name=h_tree_node_id,json=hTreeNodeId" json:"h_tree_node_id,omitempty"`
	HTreeNodeIdNull                bool                          `protobuf:"varint,1001,opt,name=h_tree_node_id_null,json=hTreeNodeIdNull" json:"h_tree_node_id_null,omitempty"`
	FromDate                       *dstore_values.TimestampValue `protobuf:"bytes,2,opt,name=from_date,json=fromDate" json:"from_date,omitempty"`
	FromDateNull                   bool                          `protobuf:"varint,1002,opt,name=from_date_null,json=fromDateNull" json:"from_date_null,omitempty"`
	ToDate                         *dstore_values.TimestampValue `protobuf:"bytes,3,opt,name=to_date,json=toDate" json:"to_date,omitempty"`
	ToDateNull                     bool                          `protobuf:"varint,1003,opt,name=to_date_null,json=toDateNull" json:"to_date_null,omitempty"`
	SourceTable                    *dstore_values.IntegerValue   `protobuf:"bytes,4,opt,name=source_table,json=sourceTable" json:"source_table,omitempty"`
	SourceTableNull                bool                          `protobuf:"varint,1004,opt,name=source_table_null,json=sourceTableNull" json:"source_table_null,omitempty"`
	BasicCharacteristicNumbers     *dstore_values.StringValue    `protobuf:"bytes,5,opt,name=basic_characteristic_numbers,json=basicCharacteristicNumbers" json:"basic_characteristic_numbers,omitempty"`
	BasicCharacteristicNumbersNull bool                          `protobuf:"varint,1005,opt,name=basic_characteristic_numbers_null,json=basicCharacteristicNumbersNull" json:"basic_characteristic_numbers_null,omitempty"`
	NodeCharacteristicId           *dstore_values.IntegerValue   `protobuf:"bytes,6,opt,name=node_characteristic_id,json=nodeCharacteristicId" json:"node_characteristic_id,omitempty"`
	NodeCharacteristicIdNull       bool                          `protobuf:"varint,1006,opt,name=node_characteristic_id_null,json=nodeCharacteristicIdNull" json:"node_characteristic_id_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetHTreeNodeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.HTreeNodeId
	}
	return nil
}

func (m *Parameters) GetFromDate() *dstore_values.TimestampValue {
	if m != nil {
		return m.FromDate
	}
	return nil
}

func (m *Parameters) GetToDate() *dstore_values.TimestampValue {
	if m != nil {
		return m.ToDate
	}
	return nil
}

func (m *Parameters) GetSourceTable() *dstore_values.IntegerValue {
	if m != nil {
		return m.SourceTable
	}
	return nil
}

func (m *Parameters) GetBasicCharacteristicNumbers() *dstore_values.StringValue {
	if m != nil {
		return m.BasicCharacteristicNumbers
	}
	return nil
}

func (m *Parameters) GetNodeCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.NodeCharacteristicId
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId                     int32                       `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	PercentageOfAllItems      *dstore_values.DecimalValue `protobuf:"bytes,10001,opt,name=percentage_of_all_items,json=percentageOfAllItems" json:"percentage_of_all_items,omitempty"`
	Description               *dstore_values.StringValue  `protobuf:"bytes,10002,opt,name=description" json:"description,omitempty"`
	BasicCharacteristic       *dstore_values.StringValue  `protobuf:"bytes,10003,opt,name=basic_characteristic,json=basicCharacteristic" json:"basic_characteristic,omitempty"`
	PercentageOfItemTree      *dstore_values.DecimalValue `protobuf:"bytes,10004,opt,name=percentage_of_item_tree,json=percentageOfItemTree" json:"percentage_of_item_tree,omitempty"`
	TotalValueHTreeNodeId     *dstore_values.DecimalValue `protobuf:"bytes,10005,opt,name=total_value_h_tree_node_id,json=totalValueHTreeNodeId" json:"total_value_h_tree_node_id,omitempty"`
	DirectValueSimilarNodes   *dstore_values.DecimalValue `protobuf:"bytes,10006,opt,name=direct_value_similar_nodes,json=directValueSimilarNodes" json:"direct_value_similar_nodes,omitempty"`
	TotalValueSimilarNodes    *dstore_values.DecimalValue `protobuf:"bytes,10007,opt,name=total_value_similar_nodes,json=totalValueSimilarNodes" json:"total_value_similar_nodes,omitempty"`
	BasicCharacteristicNumber *dstore_values.IntegerValue `protobuf:"bytes,10008,opt,name=basic_characteristic_number,json=basicCharacteristicNumber" json:"basic_characteristic_number,omitempty"`
	PercentageOfPredecessor   *dstore_values.DecimalValue `protobuf:"bytes,10009,opt,name=percentage_of_predecessor,json=percentageOfPredecessor" json:"percentage_of_predecessor,omitempty"`
	DirectValueHTreeNodeId    *dstore_values.DecimalValue `protobuf:"bytes,10010,opt,name=direct_value_h_tree_node_id,json=directValueHTreeNodeId" json:"direct_value_h_tree_node_id,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetPercentageOfAllItems() *dstore_values.DecimalValue {
	if m != nil {
		return m.PercentageOfAllItems
	}
	return nil
}

func (m *Response_Row) GetDescription() *dstore_values.StringValue {
	if m != nil {
		return m.Description
	}
	return nil
}

func (m *Response_Row) GetBasicCharacteristic() *dstore_values.StringValue {
	if m != nil {
		return m.BasicCharacteristic
	}
	return nil
}

func (m *Response_Row) GetPercentageOfItemTree() *dstore_values.DecimalValue {
	if m != nil {
		return m.PercentageOfItemTree
	}
	return nil
}

func (m *Response_Row) GetTotalValueHTreeNodeId() *dstore_values.DecimalValue {
	if m != nil {
		return m.TotalValueHTreeNodeId
	}
	return nil
}

func (m *Response_Row) GetDirectValueSimilarNodes() *dstore_values.DecimalValue {
	if m != nil {
		return m.DirectValueSimilarNodes
	}
	return nil
}

func (m *Response_Row) GetTotalValueSimilarNodes() *dstore_values.DecimalValue {
	if m != nil {
		return m.TotalValueSimilarNodes
	}
	return nil
}

func (m *Response_Row) GetBasicCharacteristicNumber() *dstore_values.IntegerValue {
	if m != nil {
		return m.BasicCharacteristicNumber
	}
	return nil
}

func (m *Response_Row) GetPercentageOfPredecessor() *dstore_values.DecimalValue {
	if m != nil {
		return m.PercentageOfPredecessor
	}
	return nil
}

func (m *Response_Row) GetDirectValueHTreeNodeId() *dstore_values.DecimalValue {
	if m != nil {
		return m.DirectValueHTreeNodeId
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.st_GetHTreeNodeStatistics_Ad.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.st_GetHTreeNodeStatistics_Ad.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.st_GetHTreeNodeStatistics_Ad.Response.Row")
}

var fileDescriptor0 = []byte{
	// 801 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x56, 0xdb, 0x4f, 0x13, 0x4f,
	0x14, 0x0e, 0xbf, 0xfe, 0x5a, 0x60, 0x20, 0xa0, 0x0b, 0xc2, 0xb6, 0x55, 0x22, 0x18, 0x13, 0xa3,
	0x71, 0x31, 0x1a, 0x0d, 0xd1, 0x48, 0xc4, 0x4b, 0x04, 0x13, 0x56, 0x5c, 0x88, 0x8a, 0x21, 0xd9,
	0x6c, 0x77, 0xa7, 0x65, 0x92, 0xdd, 0x9d, 0x66, 0x66, 0x2a, 0xff, 0x86, 0x57, 0xbc, 0xfc, 0x7f,
	0x3e, 0x78, 0x7d, 0xf4, 0xd9, 0x33, 0x33, 0x5b, 0xba, 0xbb, 0x14, 0xba, 0xfa, 0xd2, 0x76, 0x76,
	0xce, 0xf7, 0x7d, 0x67, 0xbe, 0x73, 0xce, 0x74, 0xd1, 0xad, 0x80, 0x0b, 0xca, 0xf0, 0x22, 0x8e,
	0x5b, 0x24, 0xc6, 0x8b, 0x6d, 0x46, 0x7d, 0x1c, 0x74, 0x18, 0xe6, 0x8b, 0x5c, 0xb8, 0x0f, 0xb1,
	0x58, 0xdd, 0x62, 0x18, 0xdb, 0x34, 0xc0, 0x9b, 0xc2, 0x13, 0x84, 0x0b, 0xe2, 0x73, 0x77, 0x25,
	0xb0, 0x20, 0x4e, 0x50, 0xe3, 0xa2, 0x06, 0x5b, 0x1a, 0x6c, 0x1d, 0x87, 0xa8, 0x4d, 0x25, 0x42,
	0x2f, 0xbd, 0xb0, 0x83, 0xb9, 0x26, 0xa8, 0x55, 0xb3, 0xea, 0x98, 0x31, 0xca, 0x92, 0xad, 0x7a,
	0x76, 0x2b, 0xc2, 0x9c, 0x7b, 0x2d, 0x9c, 0x6c, 0x9e, 0xcb, 0x6f, 0x0a, 0x8f, 0xc4, 0x4d, 0xca,
	0x22, 0x50, 0xa4, 0xb1, 0x0e, 0x5a, 0xf8, 0x52, 0x46, 0x68, 0xc3, 0x63, 0x1e, 0xec, 0x62, 0xc6,
	0x8d, 0x3b, 0x68, 0x62, 0xd7, 0x15, 0x90, 0x9b, 0x1b, 0x43, 0x72, 0x2e, 0x09, 0xcc, 0xa1, 0xb3,
	0x43, 0x17, 0xc6, 0xae, 0xd6, 0xad, 0xe4, 0x14, 0x49, 0x66, 0x24, 0x16, 0xb8, 0x85, 0xd9, 0x53,
	0xb9, 0x72, 0xc6, 0x76, 0xbb, 0xa7, 0x59, 0x0b, 0x8c, 0xcb, 0x68, 0x2a, 0xcb, 0xe0, 0xc6, 0x9d,
	0x30, 0x34, 0xbf, 0x0e, 0x03, 0xcf, 0x88, 0x33, 0x99, 0x0a, 0xb5, 0xe1, 0xb9, 0x71, 0x13, 0x8d,
	0x36, 0x19, 0x8d, 0xdc, 0xc0, 0x13, 0xd8, 0xfc, 0x4f, 0x69, 0x9d, 0xc9, 0x69, 0x09, 0x02, 0xe7,
	0x12, 0x5e, 0xd4, 0xd6, 0x6a, 0x23, 0x32, 0xfe, 0x3e, 0x84, 0x1b, 0xe7, 0xd1, 0xc4, 0x01, 0x56,
	0xab, 0x7c, 0xd3, 0x2a, 0xe3, 0xdd, 0x10, 0x25, 0x71, 0x03, 0x0d, 0x0b, 0xaa, 0x05, 0x4a, 0x45,
	0x04, 0x2a, 0x82, 0x2a, 0xfa, 0x79, 0x34, 0x9e, 0xe0, 0x34, 0xf9, 0x77, 0x4d, 0x8e, 0xf4, 0xb6,
	0xa2, 0x5e, 0x46, 0xe3, 0x9c, 0x76, 0x98, 0x8f, 0x5d, 0xe1, 0x35, 0x42, 0x6c, 0xfe, 0x5f, 0xc0,
	0x2c, 0x0d, 0xd8, 0x92, 0xf1, 0xc6, 0x25, 0x74, 0x32, 0x8d, 0xd7, 0x3a, 0x3f, 0x12, 0xab, 0x52,
	0x81, 0x4a, 0x6c, 0x07, 0x9d, 0x6e, 0x78, 0x9c, 0xf8, 0xae, 0xbf, 0x0b, 0x05, 0xf3, 0xa1, 0x5e,
	0xaa, 0x71, 0x00, 0x14, 0x35, 0xa0, 0x76, 0x66, 0x59, 0x89, 0xd7, 0x72, 0xe2, 0x5c, 0x30, 0x12,
	0xb7, 0xb4, 0x76, 0x4d, 0xe1, 0xef, 0x65, 0xe0, 0xb6, 0x46, 0x1b, 0x8f, 0xd0, 0xfc, 0x71, 0xec,
	0x3a, 0xb5, 0x9f, 0x3a, 0xb5, 0xb9, 0xa3, 0x79, 0x54, 0xa6, 0x4f, 0xd0, 0x8c, 0x2a, 0x7e, 0x8e,
	0x0a, 0xba, 0xa9, 0x32, 0xd8, 0xa0, 0x69, 0x09, 0xcd, 0x72, 0x43, 0x5b, 0x2d, 0xa3, 0x7a, 0x7f,
	0x4a, 0x9d, 0xd8, 0x2f, 0x9d, 0x98, 0xd9, 0x0f, 0x2b, 0x53, 0x5a, 0xd8, 0x1f, 0x45, 0x23, 0x0e,
	0xe6, 0x6d, 0x1a, 0x73, 0x6c, 0x5c, 0x41, 0x65, 0x35, 0x45, 0x49, 0x73, 0x1f, 0x58, 0x96, 0x8c,
	0xa8, 0x9e, 0xb0, 0x07, 0xf2, 0xd3, 0xd1, 0x81, 0xc6, 0x36, 0x3a, 0x21, 0xe7, 0xc7, 0x4d, 0x0d,
	0x10, 0x74, 0x6b, 0x09, 0xc0, 0x56, 0x0e, 0x9c, 0x1f, 0xb3, 0x75, 0x58, 0xaf, 0xf5, 0xd6, 0xce,
	0x64, 0x94, 0x7d, 0x60, 0x2c, 0xa1, 0xe1, 0x64, 0x6e, 0xa1, 0x3d, 0x25, 0xe3, 0xdc, 0x21, 0x46,
	0x3d, 0xd5, 0xeb, 0xfa, 0xdb, 0xe9, 0x86, 0x43, 0xc9, 0x4a, 0x8c, 0xee, 0x41, 0xd3, 0x49, 0xd4,
	0x92, 0x55, 0xfc, 0x9e, 0xb1, 0xba, 0x4e, 0x58, 0x0e, 0xdd, 0x73, 0x24, 0x49, 0xed, 0x77, 0x05,
	0x95, 0x60, 0x61, 0xcc, 0xa0, 0x0a, 0x2c, 0x65, 0xa9, 0x5e, 0xd9, 0x60, 0x4e, 0xd9, 0x29, 0xc3,
	0x12, 0xfc, 0xdf, 0x44, 0xb3, 0x6d, 0x0c, 0xed, 0x18, 0x0b, 0x50, 0x76, 0x69, 0xd3, 0xf5, 0xc2,
	0xd0, 0x25, 0x02, 0x47, 0xdc, 0x7c, 0x6d, 0xf7, 0x2d, 0x6a, 0x80, 0x7d, 0x12, 0x79, 0x61, 0x52,
	0xd4, 0x1e, 0xf8, 0x71, 0x73, 0x25, 0x0c, 0xd7, 0x24, 0xd2, 0xb8, 0x8d, 0xc6, 0x02, 0xcc, 0x7d,
	0x46, 0xda, 0xca, 0xd0, 0x37, 0xf6, 0xc0, 0x0e, 0x4e, 0xc7, 0x1b, 0x36, 0x9a, 0xee, 0xd7, 0xb2,
	0xe6, 0xdb, 0xc1, 0x3c, 0x53, 0x7d, 0x3a, 0xf8, 0xf0, 0x19, 0xe5, 0xf9, 0xd4, 0x5d, 0x66, 0xbe,
	0xfb, 0xdb, 0x33, 0xca, 0x03, 0x4a, 0xef, 0x8d, 0x67, 0xa8, 0x26, 0xa8, 0xf0, 0x42, 0x57, 0x41,
	0xdc, 0xdc, 0xed, 0xfa, 0xbe, 0x00, 0xef, 0x29, 0x85, 0x57, 0xbf, 0x57, 0x53, 0x17, 0xed, 0x36,
	0xaa, 0x05, 0x84, 0x61, 0x5f, 0x24, 0xcc, 0x9c, 0x44, 0x24, 0xf4, 0x98, 0xa2, 0xe6, 0xe6, 0x7e,
	0x01, 0xe2, 0x59, 0x8d, 0x57, 0x8b, 0x4d, 0x8d, 0x96, 0xdc, 0x1c, 0x72, 0xae, 0xa6, 0x73, 0xce,
	0x32, 0x7f, 0x28, 0xc0, 0x3c, 0xd3, 0x4b, 0x39, 0x43, 0xbc, 0x83, 0xea, 0xc7, 0x5c, 0x32, 0xe6,
	0x47, 0x7b, 0xf0, 0xf5, 0x50, 0x3d, 0xf2, 0xee, 0x31, 0x9e, 0xa3, 0x6a, 0xb6, 0x7e, 0x6d, 0x86,
	0x21, 0x2d, 0x98, 0x16, 0x18, 0xf5, 0x4f, 0x45, 0x0c, 0x49, 0x57, 0x70, 0xa3, 0x07, 0x06, 0xaf,
	0xeb, 0x19, 0xaf, 0x73, 0x55, 0xfc, 0x5c, 0xc4, 0x92, 0x94, 0xd9, 0xa9, 0x32, 0xde, 0xdd, 0x42,
	0x75, 0x42, 0x73, 0xb3, 0xdb, 0x7b, 0xc1, 0x78, 0x71, 0xfd, 0x9f, 0x5e, 0x3d, 0x1a, 0x15, 0xf5,
	0xef, 0x7e, 0xed, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xc7, 0x19, 0x50, 0x70, 0xba, 0x08, 0x00,
	0x00,
}
