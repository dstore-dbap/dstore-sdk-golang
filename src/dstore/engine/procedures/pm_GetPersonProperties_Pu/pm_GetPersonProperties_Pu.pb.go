// Code generated by protoc-gen-go.
// source: dstore/engine/procedures/pm_GetPersonProperties_Pu.proto
// DO NOT EDIT!

/*
Package pm_GetPersonProperties_Pu is a generated protocol buffer package.

It is generated from these files:
	dstore/engine/procedures/pm_GetPersonProperties_Pu.proto

It has these top-level messages:
	Parameters
	Response
*/
package pm_GetPersonProperties_Pu

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import dstore_values "dstore/values"
import dstore_engine_error "dstore/engine/error"
import dstore_engine_message "dstore/engine/message"
import dstore_engine_metainformation "dstore/engine/metainformation"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Parameters struct {
	SortedResult                      *dstore_values.BooleanValue   `protobuf:"bytes,1,opt,name=sorted_result,json=sortedResult" json:"sorted_result,omitempty"`
	SortedResultNull                  bool                          `protobuf:"varint,1001,opt,name=sorted_result_null,json=sortedResultNull" json:"sorted_result_null,omitempty"`
	IncludePersonCharacCategoryId     *dstore_values.BooleanValue   `protobuf:"bytes,2,opt,name=include_person_charac_category_id,json=includePersonCharacCategoryId" json:"include_person_charac_category_id,omitempty"`
	IncludePersonCharacCategoryIdNull bool                          `protobuf:"varint,1002,opt,name=include_person_charac_category_id_null,json=includePersonCharacCategoryIdNull" json:"include_person_charac_category_id_null,omitempty"`
	InputParameter                    *dstore_values.StringValue    `protobuf:"bytes,3,opt,name=input_parameter,json=inputParameter" json:"input_parameter,omitempty"`
	InputParameterNull                bool                          `protobuf:"varint,1003,opt,name=input_parameter_null,json=inputParameterNull" json:"input_parameter_null,omitempty"`
	InputIsUniqueId                   *dstore_values.IntegerValue   `protobuf:"bytes,4,opt,name=input_is_unique_id,json=inputIsUniqueId" json:"input_is_unique_id,omitempty"`
	InputIsUniqueIdNull               bool                          `protobuf:"varint,1004,opt,name=input_is_unique_id_null,json=inputIsUniqueIdNull" json:"input_is_unique_id_null,omitempty"`
	PersonTypeId                      *dstore_values.IntegerValue   `protobuf:"bytes,5,opt,name=person_type_id,json=personTypeId" json:"person_type_id,omitempty"`
	PersonTypeIdNull                  bool                          `protobuf:"varint,1005,opt,name=person_type_id_null,json=personTypeIdNull" json:"person_type_id_null,omitempty"`
	LanguageId                        *dstore_values.IntegerValue   `protobuf:"bytes,6,opt,name=language_id,json=languageId" json:"language_id,omitempty"`
	LanguageIdNull                    bool                          `protobuf:"varint,1006,opt,name=language_id_null,json=languageIdNull" json:"language_id_null,omitempty"`
	CharacteristicIdList              *dstore_values.StringValue    `protobuf:"bytes,7,opt,name=characteristic_id_list,json=characteristicIdList" json:"characteristic_id_list,omitempty"`
	CharacteristicIdListNull          bool                          `protobuf:"varint,1007,opt,name=characteristic_id_list_null,json=characteristicIdListNull" json:"characteristic_id_list_null,omitempty"`
	DateFormat                        *dstore_values.StringValue    `protobuf:"bytes,8,opt,name=date_format,json=dateFormat" json:"date_format,omitempty"`
	DateFormatNull                    bool                          `protobuf:"varint,1008,opt,name=date_format_null,json=dateFormatNull" json:"date_format_null,omitempty"`
	CaseSensitive                     *dstore_values.BooleanValue   `protobuf:"bytes,9,opt,name=case_sensitive,json=caseSensitive" json:"case_sensitive,omitempty"`
	CaseSensitiveNull                 bool                          `protobuf:"varint,1009,opt,name=case_sensitive_null,json=caseSensitiveNull" json:"case_sensitive_null,omitempty"`
	PersonId                          *dstore_values.IntegerValue   `protobuf:"bytes,10,opt,name=person_id,json=personId" json:"person_id,omitempty"`
	PersonIdNull                      bool                          `protobuf:"varint,1010,opt,name=person_id_null,json=personIdNull" json:"person_id_null,omitempty"`
	DateAndTime                       *dstore_values.TimestampValue `protobuf:"bytes,11,opt,name=date_and_time,json=dateAndTime" json:"date_and_time,omitempty"`
	DateAndTimeNull                   bool                          `protobuf:"varint,1011,opt,name=date_and_time_null,json=dateAndTimeNull" json:"date_and_time_null,omitempty"`
	GetActualProperties               *dstore_values.BooleanValue   `protobuf:"bytes,12,opt,name=get_actual_properties,json=getActualProperties" json:"get_actual_properties,omitempty"`
	GetActualPropertiesNull           bool                          `protobuf:"varint,1012,opt,name=get_actual_properties_null,json=getActualPropertiesNull" json:"get_actual_properties_null,omitempty"`
	SeparatorForIdentVals             *dstore_values.StringValue    `protobuf:"bytes,13,opt,name=separator_for_ident_vals,json=separatorForIdentVals" json:"separator_for_ident_vals,omitempty"`
	SeparatorForIdentValsNull         bool                          `protobuf:"varint,1013,opt,name=separator_for_ident_vals_null,json=separatorForIdentValsNull" json:"separator_for_ident_vals_null,omitempty"`
}

func (m *Parameters) Reset()                    { *m = Parameters{} }
func (m *Parameters) String() string            { return proto.CompactTextString(m) }
func (*Parameters) ProtoMessage()               {}
func (*Parameters) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Parameters) GetSortedResult() *dstore_values.BooleanValue {
	if m != nil {
		return m.SortedResult
	}
	return nil
}

func (m *Parameters) GetIncludePersonCharacCategoryId() *dstore_values.BooleanValue {
	if m != nil {
		return m.IncludePersonCharacCategoryId
	}
	return nil
}

func (m *Parameters) GetInputParameter() *dstore_values.StringValue {
	if m != nil {
		return m.InputParameter
	}
	return nil
}

func (m *Parameters) GetInputIsUniqueId() *dstore_values.IntegerValue {
	if m != nil {
		return m.InputIsUniqueId
	}
	return nil
}

func (m *Parameters) GetPersonTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonTypeId
	}
	return nil
}

func (m *Parameters) GetLanguageId() *dstore_values.IntegerValue {
	if m != nil {
		return m.LanguageId
	}
	return nil
}

func (m *Parameters) GetCharacteristicIdList() *dstore_values.StringValue {
	if m != nil {
		return m.CharacteristicIdList
	}
	return nil
}

func (m *Parameters) GetDateFormat() *dstore_values.StringValue {
	if m != nil {
		return m.DateFormat
	}
	return nil
}

func (m *Parameters) GetCaseSensitive() *dstore_values.BooleanValue {
	if m != nil {
		return m.CaseSensitive
	}
	return nil
}

func (m *Parameters) GetPersonId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonId
	}
	return nil
}

func (m *Parameters) GetDateAndTime() *dstore_values.TimestampValue {
	if m != nil {
		return m.DateAndTime
	}
	return nil
}

func (m *Parameters) GetGetActualProperties() *dstore_values.BooleanValue {
	if m != nil {
		return m.GetActualProperties
	}
	return nil
}

func (m *Parameters) GetSeparatorForIdentVals() *dstore_values.StringValue {
	if m != nil {
		return m.SeparatorForIdentVals
	}
	return nil
}

type Response struct {
	Error           *dstore_engine_error.Error                       `protobuf:"bytes,1,opt,name=error" json:"error,omitempty"`
	MetaInformation []*dstore_engine_metainformation.MetaInformation `protobuf:"bytes,2,rep,name=meta_information,json=metaInformation" json:"meta_information,omitempty"`
	Message         []*dstore_engine_message.Message                 `protobuf:"bytes,3,rep,name=message" json:"message,omitempty"`
	Row             []*Response_Row                                  `protobuf:"bytes,4,rep,name=row" json:"row,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Response) GetError() *dstore_engine_error.Error {
	if m != nil {
		return m.Error
	}
	return nil
}

func (m *Response) GetMetaInformation() []*dstore_engine_metainformation.MetaInformation {
	if m != nil {
		return m.MetaInformation
	}
	return nil
}

func (m *Response) GetMessage() []*dstore_engine_message.Message {
	if m != nil {
		return m.Message
	}
	return nil
}

func (m *Response) GetRow() []*Response_Row {
	if m != nil {
		return m.Row
	}
	return nil
}

type Response_Row struct {
	RowId                        int32                         `protobuf:"varint,10000,opt,name=row_id,json=rowId" json:"row_id,omitempty"`
	ValueRestrictedByPattern     *dstore_values.StringValue    `protobuf:"bytes,10001,opt,name=value_restricted_by_pattern,json=valueRestrictedByPattern" json:"value_restricted_by_pattern,omitempty"`
	CharacteristicDescription    *dstore_values.StringValue    `protobuf:"bytes,10002,opt,name=characteristic_description,json=characteristicDescription" json:"characteristic_description,omitempty"`
	FieldTypeId                  *dstore_values.IntegerValue   `protobuf:"bytes,10003,opt,name=field_type_id,json=fieldTypeId" json:"field_type_id,omitempty"`
	CharacteristicId             *dstore_values.IntegerValue   `protobuf:"bytes,10004,opt,name=characteristic_id,json=characteristicId" json:"characteristic_id,omitempty"`
	ValueId                      *dstore_values.IntegerValue   `protobuf:"bytes,10005,opt,name=value_id,json=valueId" json:"value_id,omitempty"`
	Modify                       *dstore_values.IntegerValue   `protobuf:"bytes,10006,opt,name=modify" json:"modify,omitempty"`
	MaxLength                    *dstore_values.IntegerValue   `protobuf:"bytes,10007,opt,name=max_length,json=maxLength" json:"max_length,omitempty"`
	PredefinedValues             *dstore_values.BooleanValue   `protobuf:"bytes,10008,opt,name=predefined_values,json=predefinedValues" json:"predefined_values,omitempty"`
	PersonCharacCategoryId       *dstore_values.IntegerValue   `protobuf:"bytes,10009,opt,name=person_charac_category_id,json=personCharacCategoryId" json:"person_charac_category_id,omitempty"`
	ReadAccessRestrictionPattern *dstore_values.StringValue    `protobuf:"bytes,10010,opt,name=read_access_restriction_pattern,json=readAccessRestrictionPattern" json:"read_access_restriction_pattern,omitempty"`
	PersonId                     *dstore_values.IntegerValue   `protobuf:"bytes,10011,opt,name=person_id,json=personId" json:"person_id,omitempty"`
	Required                     *dstore_values.BooleanValue   `protobuf:"bytes,10012,opt,name=required" json:"required,omitempty"`
	ActualValue                  *dstore_values.StringValue    `protobuf:"bytes,10013,opt,name=actual_value,json=actualValue" json:"actual_value,omitempty"`
	Value                        *dstore_values.StringValue    `protobuf:"bytes,10014,opt,name=value" json:"value,omitempty"`
	Visible                      *dstore_values.BooleanValue   `protobuf:"bytes,10015,opt,name=visible" json:"visible,omitempty"`
	LastEdited                   *dstore_values.TimestampValue `protobuf:"bytes,10016,opt,name=last_edited,json=lastEdited" json:"last_edited,omitempty"`
}

func (m *Response_Row) Reset()                    { *m = Response_Row{} }
func (m *Response_Row) String() string            { return proto.CompactTextString(m) }
func (*Response_Row) ProtoMessage()               {}
func (*Response_Row) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

func (m *Response_Row) GetValueRestrictedByPattern() *dstore_values.StringValue {
	if m != nil {
		return m.ValueRestrictedByPattern
	}
	return nil
}

func (m *Response_Row) GetCharacteristicDescription() *dstore_values.StringValue {
	if m != nil {
		return m.CharacteristicDescription
	}
	return nil
}

func (m *Response_Row) GetFieldTypeId() *dstore_values.IntegerValue {
	if m != nil {
		return m.FieldTypeId
	}
	return nil
}

func (m *Response_Row) GetCharacteristicId() *dstore_values.IntegerValue {
	if m != nil {
		return m.CharacteristicId
	}
	return nil
}

func (m *Response_Row) GetValueId() *dstore_values.IntegerValue {
	if m != nil {
		return m.ValueId
	}
	return nil
}

func (m *Response_Row) GetModify() *dstore_values.IntegerValue {
	if m != nil {
		return m.Modify
	}
	return nil
}

func (m *Response_Row) GetMaxLength() *dstore_values.IntegerValue {
	if m != nil {
		return m.MaxLength
	}
	return nil
}

func (m *Response_Row) GetPredefinedValues() *dstore_values.BooleanValue {
	if m != nil {
		return m.PredefinedValues
	}
	return nil
}

func (m *Response_Row) GetPersonCharacCategoryId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonCharacCategoryId
	}
	return nil
}

func (m *Response_Row) GetReadAccessRestrictionPattern() *dstore_values.StringValue {
	if m != nil {
		return m.ReadAccessRestrictionPattern
	}
	return nil
}

func (m *Response_Row) GetPersonId() *dstore_values.IntegerValue {
	if m != nil {
		return m.PersonId
	}
	return nil
}

func (m *Response_Row) GetRequired() *dstore_values.BooleanValue {
	if m != nil {
		return m.Required
	}
	return nil
}

func (m *Response_Row) GetActualValue() *dstore_values.StringValue {
	if m != nil {
		return m.ActualValue
	}
	return nil
}

func (m *Response_Row) GetValue() *dstore_values.StringValue {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *Response_Row) GetVisible() *dstore_values.BooleanValue {
	if m != nil {
		return m.Visible
	}
	return nil
}

func (m *Response_Row) GetLastEdited() *dstore_values.TimestampValue {
	if m != nil {
		return m.LastEdited
	}
	return nil
}

func init() {
	proto.RegisterType((*Parameters)(nil), "dstore.engine.pm_GetPersonProperties_Pu.Parameters")
	proto.RegisterType((*Response)(nil), "dstore.engine.pm_GetPersonProperties_Pu.Response")
	proto.RegisterType((*Response_Row)(nil), "dstore.engine.pm_GetPersonProperties_Pu.Response.Row")
}

var fileDescriptor0 = []byte{
	// 1160 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x57, 0xe9, 0x73, 0xdb, 0x44,
	0x14, 0x9f, 0x12, 0x92, 0x38, 0xcf, 0xce, 0x51, 0xa5, 0x4d, 0x37, 0x0e, 0x01, 0x5a, 0x86, 0x6b,
	0x06, 0x1c, 0x28, 0x14, 0xc2, 0xc0, 0x00, 0x49, 0x28, 0xc5, 0x33, 0xad, 0x31, 0x6a, 0x81, 0xa1,
	0x5f, 0x34, 0x8a, 0xb5, 0x71, 0x77, 0x46, 0x96, 0xd4, 0xdd, 0x55, 0x8a, 0xff, 0x0b, 0x8e, 0x72,
	0x9f, 0xff, 0x1e, 0xf7, 0xd9, 0xe1, 0x2b, 0x6f, 0xf7, 0xc9, 0xb2, 0xe5, 0x38, 0x95, 0xfb, 0xa5,
	0xe9, 0xee, 0xbe, 0xdf, 0xa1, 0xb7, 0x4f, 0xef, 0xc9, 0xb0, 0x1d, 0x28, 0x1d, 0x4b, 0xbe, 0xc5,
	0xa3, 0xae, 0x88, 0xf8, 0x56, 0x22, 0xe3, 0x0e, 0x0f, 0x52, 0xc9, 0xd5, 0x56, 0xd2, 0xf3, 0x2e,
	0x71, 0xdd, 0xe6, 0x52, 0xc5, 0x51, 0x5b, 0xc6, 0x09, 0x97, 0x5a, 0x70, 0xe5, 0xb5, 0xd3, 0x06,
	0x06, 0xe9, 0xd8, 0x79, 0x9c, 0x90, 0x0d, 0x42, 0x36, 0x8e, 0x0d, 0xaf, 0xaf, 0x66, 0x12, 0x87,
	0x7e, 0x98, 0x72, 0x45, 0xe8, 0xfa, 0x7a, 0x51, 0x97, 0x4b, 0x19, 0xcb, 0xec, 0x68, 0xa3, 0x78,
	0xd4, 0xe3, 0x4a, 0xf9, 0x5d, 0x9e, 0x1d, 0x3e, 0x32, 0x7e, 0xa8, 0x7d, 0x11, 0x1d, 0xc4, 0xb2,
	0xe7, 0x6b, 0x11, 0x47, 0x14, 0x74, 0xee, 0x4e, 0x0d, 0xa0, 0xed, 0x4b, 0x1f, 0x4f, 0xd1, 0x8f,
	0xf3, 0x3a, 0x2c, 0xaa, 0x58, 0x6a, 0x1e, 0x78, 0xf8, 0x5c, 0x69, 0xa8, 0xd9, 0x89, 0x87, 0x4f,
	0x3c, 0x51, 0x3d, 0xbf, 0xd1, 0xc8, 0x9e, 0x20, 0x33, 0xb6, 0x1f, 0xc7, 0x21, 0xf7, 0xa3, 0xf7,
	0xcc, 0xca, 0xad, 0x11, 0xc2, 0xb5, 0x00, 0xe7, 0x69, 0x70, 0x0a, 0x0c, 0x5e, 0x94, 0x86, 0x21,
	0xfb, 0x69, 0x1e, 0x79, 0x2a, 0xee, 0xca, 0x68, 0x68, 0x0b, 0x0f, 0x1c, 0x0e, 0x67, 0x45, 0xd4,
	0x09, 0xd3, 0x80, 0x7b, 0x89, 0x4d, 0x88, 0xd7, 0xb9, 0x81, 0x76, 0x3a, 0x5e, 0xc7, 0xd7, 0xbc,
	0x1b, 0xcb, 0xbe, 0x27, 0x02, 0x76, 0x5f, 0xb9, 0x89, 0xcd, 0x8c, 0x85, 0xb2, 0xba, 0x67, 0x39,
	0xf6, 0x32, 0x8a, 0x66, 0xe0, 0xb8, 0xf0, 0x58, 0xa9, 0x0c, 0x39, 0xfd, 0x99, 0x9c, 0x9e, 0xbd,
	0x2b, 0x9f, 0xb5, 0xbe, 0x07, 0xcb, 0x22, 0x4a, 0x52, 0xed, 0x25, 0x83, 0xfc, 0xb1, 0x19, 0x6b,
	0xb4, 0x3e, 0x66, 0x54, 0x69, 0x29, 0xa2, 0x2e, 0xf9, 0x5c, 0xb2, 0x90, 0x3c, 0xe3, 0xce, 0xb3,
	0x70, 0x6a, 0x8c, 0x84, 0x6c, 0xfc, 0x42, 0x36, 0x9c, 0x62, 0xb8, 0xd5, 0x7d, 0x0b, 0x68, 0xd7,
	0x13, 0xca, 0x4b, 0x23, 0x71, 0x33, 0xe5, 0x26, 0x47, 0xf7, 0x4f, 0xcc, 0x91, 0x88, 0xd0, 0x32,
	0x97, 0xa4, 0x4d, 0x76, 0x9b, 0xea, 0x5d, 0x0b, 0xc2, 0xac, 0x5c, 0x80, 0x33, 0x47, 0x99, 0x48,
	0xff, 0x57, 0xd2, 0x5f, 0x1d, 0x83, 0x58, 0x03, 0x3b, 0xb0, 0x94, 0x25, 0x51, 0xf7, 0x13, 0x2b,
	0x3e, 0x5b, 0x2e, 0x5e, 0x23, 0xc8, 0x35, 0x44, 0xa0, 0x72, 0x03, 0x56, 0x8b, 0x14, 0xa4, 0xfa,
	0x5b, 0x56, 0x26, 0xa3, 0xb1, 0x56, 0xf2, 0x15, 0xa8, 0x86, 0x7e, 0xd4, 0x4d, 0xb1, 0xba, 0x8d,
	0xde, 0x5c, 0xb9, 0x1e, 0x0c, 0xe2, 0x51, 0xed, 0x49, 0x58, 0x19, 0x41, 0x93, 0xd4, 0xef, 0x24,
	0xb5, 0x34, 0x0c, 0xb3, 0x42, 0x6d, 0x58, 0xa3, 0xca, 0xc0, 0x6c, 0x0b, 0xa5, 0x45, 0xc7, 0x00,
	0x42, 0xfc, 0x1f, 0x9b, 0x2f, 0xbd, 0xdb, 0x53, 0x45, 0x64, 0x33, 0xb8, 0x8c, 0x7f, 0x9d, 0x57,
	0x61, 0x63, 0x32, 0x23, 0xf9, 0xf8, 0x83, 0x7c, 0xb0, 0x49, 0x58, 0xeb, 0xe8, 0x65, 0xa8, 0x06,
	0x58, 0x78, 0x1e, 0xbd, 0xb9, 0xac, 0x52, 0x6a, 0x03, 0x4c, 0xf8, 0x9b, 0x36, 0xda, 0x3c, 0xf9,
	0x08, 0x98, 0x14, 0xff, 0xcc, 0x9e, 0x7c, 0x18, 0x66, 0x75, 0x76, 0x61, 0xa9, 0xe3, 0x2b, 0xee,
	0x29, 0x1e, 0x29, 0xa1, 0xc5, 0x21, 0x67, 0x0b, 0xe5, 0xaf, 0xdd, 0xa2, 0x81, 0x5c, 0x1d, 0x20,
	0x9c, 0x2d, 0x58, 0x2d, 0x72, 0x90, 0xe2, 0x5f, 0xa4, 0x78, 0xb2, 0x10, 0x6c, 0x45, 0xb7, 0x61,
	0x21, 0xab, 0x03, 0xbc, 0x55, 0x28, 0xbf, 0xd5, 0x0a, 0x45, 0xe3, 0x9d, 0x3e, 0x9a, 0x17, 0xe1,
	0xe0, 0x46, 0xff, 0x26, 0x95, 0xda, 0x20, 0x24, 0xab, 0xd5, 0x45, 0x9b, 0x00, 0x3f, 0x0a, 0x3c,
	0x2d, 0x7a, 0x9c, 0x55, 0xad, 0xc8, 0xe6, 0x98, 0x88, 0x39, 0x52, 0xda, 0xef, 0x25, 0x24, 0x63,
	0x33, 0xbe, 0x13, 0x05, 0xd7, 0x70, 0xdb, 0x79, 0x0a, 0x9c, 0x02, 0x05, 0xa9, 0xfd, 0x43, 0x6a,
	0xcb, 0x23, 0x91, 0x56, 0xf0, 0x6d, 0x38, 0xdd, 0xe5, 0xda, 0xc3, 0xab, 0x4c, 0xfd, 0xd0, 0x4b,
	0xf2, 0xf6, 0xce, 0x6a, 0xe5, 0xd9, 0x5c, 0x45, 0xe4, 0x8e, 0x05, 0x0e, 0xc7, 0x02, 0x96, 0x7e,
	0x7d, 0x22, 0x21, 0xd9, 0xf8, 0x97, 0x6c, 0x9c, 0x99, 0x80, 0xb4, 0x76, 0xae, 0x02, 0x53, 0xdc,
	0xf4, 0x16, 0x14, 0x35, 0x55, 0x80, 0xd9, 0xe2, 0x91, 0xf6, 0x50, 0x5d, 0xb1, 0xc5, 0xd2, 0x52,
	0x3a, 0x9d, 0x63, 0xb1, 0x50, 0x9a, 0x06, 0x89, 0xfb, 0x0a, 0x93, 0xba, 0x79, 0x1c, 0x29, 0xb9,
	0xba, 0x43, 0xae, 0xd6, 0x27, 0xc2, 0x8d, 0xaf, 0x73, 0xb7, 0xab, 0x50, 0xc1, 0x31, 0x90, 0xc4,
	0x91, 0xe2, 0xce, 0x33, 0x30, 0x6b, 0xa7, 0x5a, 0x36, 0x6d, 0x72, 0x47, 0xd9, 0xbc, 0xa4, 0x89,
	0x77, 0xd1, 0xfc, 0xeb, 0x52, 0xa0, 0xf3, 0x01, 0xac, 0x98, 0x79, 0xe6, 0x8d, 0x0c, 0x34, 0x9c,
	0x12, 0x33, 0x08, 0x6e, 0x8c, 0x81, 0xc7, 0xc7, 0xde, 0x15, 0x5c, 0x37, 0x87, 0x6b, 0x77, 0xb9,
	0x57, 0xdc, 0xc0, 0x92, 0x9c, 0xcf, 0xe6, 0x28, 0xb6, 0x73, 0xc3, 0xf8, 0xe0, 0x11, 0x46, 0x9a,
	0xb2, 0x57, 0xe8, 0xaf, 0x3b, 0x08, 0x77, 0x2e, 0xc1, 0x8c, 0x8c, 0x6f, 0x61, 0x27, 0x36, 0xa8,
	0x0b, 0x8d, 0x29, 0x87, 0x7e, 0x63, 0x90, 0x86, 0x86, 0x1b, 0xdf, 0x72, 0x0d, 0x43, 0xfd, 0xbf,
	0x0a, 0xcc, 0xe0, 0xc2, 0x59, 0x83, 0x39, 0x5c, 0x9a, 0x57, 0xe3, 0xa3, 0x16, 0x66, 0x66, 0xd6,
	0x9d, 0xc5, 0x25, 0xd6, 0xfe, 0x75, 0xd8, 0xb0, 0x97, 0x65, 0x46, 0x2c, 0xde, 0x56, 0xc7, 0x4c,
	0xdb, 0xfd, 0x3e, 0x8e, 0x10, 0x8d, 0xfd, 0x23, 0x62, 0x1f, 0xb7, 0x4a, 0x2f, 0x96, 0xd9, 0x3d,
	0x37, 0x87, 0xef, 0xf6, 0xdb, 0x04, 0x46, 0xee, 0xfa, 0x58, 0xbb, 0x0a, 0xb8, 0xea, 0x48, 0x91,
	0xd8, 0x1c, 0x7f, 0x52, 0x4e, 0xbd, 0x5e, 0x84, 0xbf, 0x31, 0x44, 0x9b, 0xaf, 0x8b, 0x03, 0xc1,
	0xc3, 0x20, 0x9f, 0x1b, 0x9f, 0xb6, 0xca, 0x5f, 0xf9, 0xaa, 0x85, 0x64, 0x73, 0xa3, 0x09, 0x27,
	0x8f, 0x34, 0x53, 0x76, 0x7b, 0x0a, 0x96, 0x95, 0xf1, 0xfe, 0xea, 0xbc, 0x08, 0x15, 0x4a, 0x22,
	0x32, 0x7c, 0x36, 0x05, 0xc3, 0xbc, 0xdd, 0x44, 0xe0, 0xf3, 0x30, 0xd7, 0x8b, 0x03, 0x71, 0xd0,
	0x67, 0x9f, 0x4f, 0x01, 0xcb, 0x62, 0xb1, 0x8d, 0x43, 0xcf, 0xff, 0xd0, 0x0b, 0xb1, 0x1c, 0xf4,
	0x0d, 0xf6, 0xc5, 0x14, 0xc8, 0x05, 0x8c, 0xbf, 0x6c, 0xc3, 0xcd, 0x63, 0x27, 0x92, 0x07, 0xfc,
	0x00, 0x2b, 0x29, 0xf0, 0x28, 0x98, 0x7d, 0xd9, 0x2a, 0xef, 0x28, 0x2b, 0x43, 0x98, 0xdd, 0x50,
	0xce, 0xfb, 0xb0, 0x7e, 0xfc, 0x87, 0xd6, 0x57, 0x53, 0xd8, 0x5a, 0x4b, 0x26, 0x7f, 0x62, 0xed,
	0xc3, 0x43, 0x92, 0xfb, 0x01, 0x36, 0xaa, 0x0e, 0xbe, 0x0f, 0x79, 0x69, 0xe2, 0xbd, 0xe7, 0x85,
	0xf9, 0x75, 0x79, 0xf5, 0x3c, 0x60, 0x38, 0x76, 0x2c, 0x85, 0x3b, 0x64, 0x18, 0x14, 0xe7, 0x4b,
	0xa3, 0xe3, 0xe2, 0x9b, 0xd6, 0xbd, 0xcc, 0x8b, 0x6d, 0xa8, 0x48, 0x7e, 0x33, 0x15, 0x98, 0x0f,
	0xf6, 0xed, 0x14, 0x99, 0xcb, 0xa3, 0x71, 0x80, 0xd7, 0xb2, 0xe6, 0x6b, 0xe3, 0xd8, 0x77, 0xe5,
	0x4f, 0x51, 0x25, 0x80, 0x5d, 0xe0, 0x27, 0xde, 0x2c, 0x01, 0xbf, 0x2f, 0x07, 0x52, 0xa4, 0xf3,
	0x02, 0xcc, 0x1f, 0x0a, 0x25, 0xf6, 0x43, 0xce, 0x7e, 0x98, 0xc2, 0xeb, 0x20, 0xd8, 0x79, 0xcd,
	0x7c, 0x26, 0xe1, 0x97, 0x05, 0x0f, 0x04, 0xbe, 0xd4, 0xec, 0xc7, 0xd6, 0x34, 0xc3, 0x0e, 0x0c,
	0xe4, 0xa2, 0x45, 0xec, 0xbe, 0x03, 0x1b, 0x22, 0x1e, 0xef, 0x5c, 0xf9, 0x0f, 0x9d, 0xeb, 0xe7,
	0xef, 0xfd, 0x27, 0xd0, 0xfe, 0x9c, 0xfd, 0xa1, 0xf1, 0xdc, 0xff, 0x01, 0x00, 0x00, 0xff, 0xff,
	0x9a, 0x61, 0xd9, 0x84, 0x3f, 0x0d, 0x00, 0x00,
}
